/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: unittest_swift_naming.proto
 *
 */

// Protos/unittest_swift_reserved.proto - test proto
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2016 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
// -----------------------------------------------------------------------------
///
/// Test Swift reserved words used as enum or message names
///
// -----------------------------------------------------------------------------

/// proto2 syntax is used so the has*/clear* names also get generated.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

enum SwiftUnittest_Names_EnumFieldNames: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case a // = 0
  case string // = 1
  case int // = 2
  case double // = 3
  case float // = 4
  case uint // = 5
  case hashValue_ // = 6
  case description_ // = 7
  case debugDescription_ // = 8
  case swift // = 9
  case unrecognized // = 10
  case `class` // = 11
  case `deinit` // = 12
  case `enum` // = 13
  case `extension` // = 14
  case `func` // = 15
  case `import` // = 16
  case init_ // = 17
  case `inout` // = 18
  case `internal` // = 19
  case `let` // = 20
  case `operator` // = 21
  case `private` // = 22
  case `protocol` // = 23
  case `public` // = 24
  case `static` // = 25
  case `struct` // = 26
  case `subscript` // = 27
  case `typealias` // = 28
  case `var` // = 29
  case `break` // = 30
  case `case` // = 31
  case `continue` // = 32
  case `default` // = 33
  case `defer` // = 34
  case `do` // = 35
  case `else` // = 36
  case `fallthrough` // = 37
  case `for` // = 38
  case `guard` // = 39
  case `if` // = 40
  case `in` // = 41
  case `repeat` // = 42
  case `return` // = 43
  case `switch` // = 44
  case `where` // = 45
  case `while` // = 46
  case `as` // = 47
  case `catch` // = 48
  case dynamicType_ // = 49
  case `false` // = 50
  case `is` // = 51
  case `nil` // = 52
  case `rethrows` // = 53
  case `super` // = 54
  case self_ // = 55
  case `throw` // = 57
  case `throws` // = 58
  case `true` // = 59
  case `try` // = 60
  case _Column__ // = 61
  case _File__ // = 62
  case _Function__ // = 63
  case _Line__ // = 64
  case ___ // = 65
  case `associativity` // = 66
  case convenience // = 67
  case dynamic // = 68
  case didSet // = 69
  case final // = 70
  case get // = 71
  case infix // = 72
  case indirect // = 73
  case lazy // = 74
  case left // = 75
  case mutating // = 76
  case none // = 77
  case nonmutating // = 78
  case `optional` // = 79
  case override // = 80
  case postfix // = 81
  case precedence // = 82
  case prefix // = 83
  case `required` // = 85
  case right // = 86
  case set // = 87
  case type // = 88
  case unowned // = 89
  case weak // = 90
  case willSet // = 91
  case id // = 92
  case cmd // = 93
  case out // = 96
  case bycopy // = 98
  case byref // = 99
  case oneway // = 100
  case and // = 102
  case andEq // = 103
  case alignas // = 104
  case alignof // = 105
  case asm // = 106
  case auto // = 107
  case bitand // = 108
  case bitor // = 109
  case bool // = 110
  case char // = 114
  case char16T // = 115
  case char32T // = 116
  case compl // = 118
  case const // = 119
  case constexpr // = 120
  case constCast // = 121
  case decltype // = 123
  case delete // = 125
  case dynamicCast // = 127
  case explicit // = 130
  case export // = 131
  case extern // = 132
  case friend // = 136
  case goto // = 137
  case inline // = 139
  case long // = 141
  case mutable // = 142
  case namespace // = 143
  case new // = 144
  case noexcept // = 145
  case not // = 146
  case notEq // = 147
  case nullptr // = 148
  case or // = 150
  case orEq // = 151
  case protected // = 153
  case register // = 155
  case reinterpretCast // = 156
  case short // = 158
  case signed // = 159
  case sizeof // = 160
  case staticAssert // = 162
  case staticCast // = 163
  case template // = 166
  case this // = 167
  case threadLocal // = 168
  case typedef // = 172
  case typeid // = 173
  case typename // = 174
  case union // = 175
  case unsigned // = 176
  case using // = 177
  case virtual // = 178
  case void // = 179
  case volatile // = 180
  case wcharT // = 181
  case xor // = 183
  case xorEq // = 184
  case restrict // = 185
  case category // = 186
  case ivar // = 187
  case method // = 188
  case finalize // = 192
  case hash // = 193
  case dealloc // = 194
  case superclass // = 197
  case retain // = 198
  case release // = 199
  case autorelease // = 200
  case retainCount // = 201
  case zone // = 202
  case isProxy // = 203
  case copy // = 204
  case mutableCopy // = 205
  case classForCoder // = 206
  case clear // = 207
  case data // = 208
  case delimitedData // = 209
  case descriptor // = 210
  case extensionRegistry // = 211
  case extensionsCurrentlySet // = 212
  case isInitialized // = 213
  case serializedSize // = 214
  case sortedExtensionsInUse // = 215
  case unknownFields // = 216
  case fixed // = 217
  case fract // = 218
  case size // = 219
  case logicalAddress // = 220
  case physicalAddress // = 221
  case byteCount // = 222
  case byteOffset // = 223
  case duration // = 224
  case absoluteTime // = 225
  case optionBits // = 226
  case itemCount // = 227
  case pbversion // = 228
  case scriptCode // = 229
  case langCode // = 230
  case regionCode // = 231
  case ostype // = 232
  case processSerialNumber // = 233
  case point // = 234
  case rect // = 235
  case fixedPoint // = 236
  case fixedRect // = 237
  case style // = 238
  case styleParameter // = 239
  case styleField // = 240
  case timeScale // = 241
  case timeBase // = 242
  case timeRecord // = 243
  case extensions // = 244

  init() {
    self = .a
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .a
    case 1: self = .string
    case 2: self = .int
    case 3: self = .double
    case 4: self = .float
    case 5: self = .uint
    case 6: self = .hashValue_
    case 7: self = .description_
    case 8: self = .debugDescription_
    case 9: self = .swift
    case 10: self = .unrecognized
    case 11: self = .`class`
    case 12: self = .`deinit`
    case 13: self = .`enum`
    case 14: self = .`extension`
    case 15: self = .`func`
    case 16: self = .`import`
    case 17: self = .init_
    case 18: self = .`inout`
    case 19: self = .`internal`
    case 20: self = .`let`
    case 21: self = .`operator`
    case 22: self = .`private`
    case 23: self = .`protocol`
    case 24: self = .`public`
    case 25: self = .`static`
    case 26: self = .`struct`
    case 27: self = .`subscript`
    case 28: self = .`typealias`
    case 29: self = .`var`
    case 30: self = .`break`
    case 31: self = .`case`
    case 32: self = .`continue`
    case 33: self = .`default`
    case 34: self = .`defer`
    case 35: self = .`do`
    case 36: self = .`else`
    case 37: self = .`fallthrough`
    case 38: self = .`for`
    case 39: self = .`guard`
    case 40: self = .`if`
    case 41: self = .`in`
    case 42: self = .`repeat`
    case 43: self = .`return`
    case 44: self = .`switch`
    case 45: self = .`where`
    case 46: self = .`while`
    case 47: self = .`as`
    case 48: self = .`catch`
    case 49: self = .dynamicType_
    case 50: self = .`false`
    case 51: self = .`is`
    case 52: self = .`nil`
    case 53: self = .`rethrows`
    case 54: self = .`super`
    case 55: self = .self_
    case 57: self = .`throw`
    case 58: self = .`throws`
    case 59: self = .`true`
    case 60: self = .`try`
    case 61: self = ._Column__
    case 62: self = ._File__
    case 63: self = ._Function__
    case 64: self = ._Line__
    case 65: self = .___
    case 66: self = .`associativity`
    case 67: self = .convenience
    case 68: self = .dynamic
    case 69: self = .didSet
    case 70: self = .final
    case 71: self = .get
    case 72: self = .infix
    case 73: self = .indirect
    case 74: self = .lazy
    case 75: self = .left
    case 76: self = .mutating
    case 77: self = .none
    case 78: self = .nonmutating
    case 79: self = .`optional`
    case 80: self = .override
    case 81: self = .postfix
    case 82: self = .precedence
    case 83: self = .prefix
    case 85: self = .`required`
    case 86: self = .right
    case 87: self = .set
    case 88: self = .type
    case 89: self = .unowned
    case 90: self = .weak
    case 91: self = .willSet
    case 92: self = .id
    case 93: self = .cmd
    case 96: self = .out
    case 98: self = .bycopy
    case 99: self = .byref
    case 100: self = .oneway
    case 102: self = .and
    case 103: self = .andEq
    case 104: self = .alignas
    case 105: self = .alignof
    case 106: self = .asm
    case 107: self = .auto
    case 108: self = .bitand
    case 109: self = .bitor
    case 110: self = .bool
    case 114: self = .char
    case 115: self = .char16T
    case 116: self = .char32T
    case 118: self = .compl
    case 119: self = .const
    case 120: self = .constexpr
    case 121: self = .constCast
    case 123: self = .decltype
    case 125: self = .delete
    case 127: self = .dynamicCast
    case 130: self = .explicit
    case 131: self = .export
    case 132: self = .extern
    case 136: self = .friend
    case 137: self = .goto
    case 139: self = .inline
    case 141: self = .long
    case 142: self = .mutable
    case 143: self = .namespace
    case 144: self = .new
    case 145: self = .noexcept
    case 146: self = .not
    case 147: self = .notEq
    case 148: self = .nullptr
    case 150: self = .or
    case 151: self = .orEq
    case 153: self = .protected
    case 155: self = .register
    case 156: self = .reinterpretCast
    case 158: self = .short
    case 159: self = .signed
    case 160: self = .sizeof
    case 162: self = .staticAssert
    case 163: self = .staticCast
    case 166: self = .template
    case 167: self = .this
    case 168: self = .threadLocal
    case 172: self = .typedef
    case 173: self = .typeid
    case 174: self = .typename
    case 175: self = .union
    case 176: self = .unsigned
    case 177: self = .using
    case 178: self = .virtual
    case 179: self = .void
    case 180: self = .volatile
    case 181: self = .wcharT
    case 183: self = .xor
    case 184: self = .xorEq
    case 185: self = .restrict
    case 186: self = .category
    case 187: self = .ivar
    case 188: self = .method
    case 192: self = .finalize
    case 193: self = .hash
    case 194: self = .dealloc
    case 197: self = .superclass
    case 198: self = .retain
    case 199: self = .release
    case 200: self = .autorelease
    case 201: self = .retainCount
    case 202: self = .zone
    case 203: self = .isProxy
    case 204: self = .copy
    case 205: self = .mutableCopy
    case 206: self = .classForCoder
    case 207: self = .clear
    case 208: self = .data
    case 209: self = .delimitedData
    case 210: self = .descriptor
    case 211: self = .extensionRegistry
    case 212: self = .extensionsCurrentlySet
    case 213: self = .isInitialized
    case 214: self = .serializedSize
    case 215: self = .sortedExtensionsInUse
    case 216: self = .unknownFields
    case 217: self = .fixed
    case 218: self = .fract
    case 219: self = .size
    case 220: self = .logicalAddress
    case 221: self = .physicalAddress
    case 222: self = .byteCount
    case 223: self = .byteOffset
    case 224: self = .duration
    case 225: self = .absoluteTime
    case 226: self = .optionBits
    case 227: self = .itemCount
    case 228: self = .pbversion
    case 229: self = .scriptCode
    case 230: self = .langCode
    case 231: self = .regionCode
    case 232: self = .ostype
    case 233: self = .processSerialNumber
    case 234: self = .point
    case 235: self = .rect
    case 236: self = .fixedPoint
    case 237: self = .fixedRect
    case 238: self = .style
    case 239: self = .styleParameter
    case 240: self = .styleField
    case 241: self = .timeScale
    case 242: self = .timeBase
    case 243: self = .timeRecord
    case 244: self = .extensions
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .a: return 0
    case .string: return 1
    case .int: return 2
    case .double: return 3
    case .float: return 4
    case .uint: return 5
    case .hashValue_: return 6
    case .description_: return 7
    case .debugDescription_: return 8
    case .swift: return 9
    case .unrecognized: return 10
    case .`class`: return 11
    case .`deinit`: return 12
    case .`enum`: return 13
    case .`extension`: return 14
    case .`func`: return 15
    case .`import`: return 16
    case .init_: return 17
    case .`inout`: return 18
    case .`internal`: return 19
    case .`let`: return 20
    case .`operator`: return 21
    case .`private`: return 22
    case .`protocol`: return 23
    case .`public`: return 24
    case .`static`: return 25
    case .`struct`: return 26
    case .`subscript`: return 27
    case .`typealias`: return 28
    case .`var`: return 29
    case .`break`: return 30
    case .`case`: return 31
    case .`continue`: return 32
    case .`default`: return 33
    case .`defer`: return 34
    case .`do`: return 35
    case .`else`: return 36
    case .`fallthrough`: return 37
    case .`for`: return 38
    case .`guard`: return 39
    case .`if`: return 40
    case .`in`: return 41
    case .`repeat`: return 42
    case .`return`: return 43
    case .`switch`: return 44
    case .`where`: return 45
    case .`while`: return 46
    case .`as`: return 47
    case .`catch`: return 48
    case .dynamicType_: return 49
    case .`false`: return 50
    case .`is`: return 51
    case .`nil`: return 52
    case .`rethrows`: return 53
    case .`super`: return 54
    case .self_: return 55
    case .`throw`: return 57
    case .`throws`: return 58
    case .`true`: return 59
    case .`try`: return 60
    case ._Column__: return 61
    case ._File__: return 62
    case ._Function__: return 63
    case ._Line__: return 64
    case .___: return 65
    case .`associativity`: return 66
    case .convenience: return 67
    case .dynamic: return 68
    case .didSet: return 69
    case .final: return 70
    case .get: return 71
    case .infix: return 72
    case .indirect: return 73
    case .lazy: return 74
    case .left: return 75
    case .mutating: return 76
    case .none: return 77
    case .nonmutating: return 78
    case .`optional`: return 79
    case .override: return 80
    case .postfix: return 81
    case .precedence: return 82
    case .prefix: return 83
    case .`required`: return 85
    case .right: return 86
    case .set: return 87
    case .type: return 88
    case .unowned: return 89
    case .weak: return 90
    case .willSet: return 91
    case .id: return 92
    case .cmd: return 93
    case .out: return 96
    case .bycopy: return 98
    case .byref: return 99
    case .oneway: return 100
    case .and: return 102
    case .andEq: return 103
    case .alignas: return 104
    case .alignof: return 105
    case .asm: return 106
    case .auto: return 107
    case .bitand: return 108
    case .bitor: return 109
    case .bool: return 110
    case .char: return 114
    case .char16T: return 115
    case .char32T: return 116
    case .compl: return 118
    case .const: return 119
    case .constexpr: return 120
    case .constCast: return 121
    case .decltype: return 123
    case .delete: return 125
    case .dynamicCast: return 127
    case .explicit: return 130
    case .export: return 131
    case .extern: return 132
    case .friend: return 136
    case .goto: return 137
    case .inline: return 139
    case .long: return 141
    case .mutable: return 142
    case .namespace: return 143
    case .new: return 144
    case .noexcept: return 145
    case .not: return 146
    case .notEq: return 147
    case .nullptr: return 148
    case .or: return 150
    case .orEq: return 151
    case .protected: return 153
    case .register: return 155
    case .reinterpretCast: return 156
    case .short: return 158
    case .signed: return 159
    case .sizeof: return 160
    case .staticAssert: return 162
    case .staticCast: return 163
    case .template: return 166
    case .this: return 167
    case .threadLocal: return 168
    case .typedef: return 172
    case .typeid: return 173
    case .typename: return 174
    case .union: return 175
    case .unsigned: return 176
    case .using: return 177
    case .virtual: return 178
    case .void: return 179
    case .volatile: return 180
    case .wcharT: return 181
    case .xor: return 183
    case .xorEq: return 184
    case .restrict: return 185
    case .category: return 186
    case .ivar: return 187
    case .method: return 188
    case .finalize: return 192
    case .hash: return 193
    case .dealloc: return 194
    case .superclass: return 197
    case .retain: return 198
    case .release: return 199
    case .autorelease: return 200
    case .retainCount: return 201
    case .zone: return 202
    case .isProxy: return 203
    case .copy: return 204
    case .mutableCopy: return 205
    case .classForCoder: return 206
    case .clear: return 207
    case .data: return 208
    case .delimitedData: return 209
    case .descriptor: return 210
    case .extensionRegistry: return 211
    case .extensionsCurrentlySet: return 212
    case .isInitialized: return 213
    case .serializedSize: return 214
    case .sortedExtensionsInUse: return 215
    case .unknownFields: return 216
    case .fixed: return 217
    case .fract: return 218
    case .size: return 219
    case .logicalAddress: return 220
    case .physicalAddress: return 221
    case .byteCount: return 222
    case .byteOffset: return 223
    case .duration: return 224
    case .absoluteTime: return 225
    case .optionBits: return 226
    case .itemCount: return 227
    case .pbversion: return 228
    case .scriptCode: return 229
    case .langCode: return 230
    case .regionCode: return 231
    case .ostype: return 232
    case .processSerialNumber: return 233
    case .point: return 234
    case .rect: return 235
    case .fixedPoint: return 236
    case .fixedRect: return 237
    case .style: return 238
    case .styleParameter: return 239
    case .styleField: return 240
    case .timeScale: return 241
    case .timeBase: return 242
    case .timeRecord: return 243
    case .extensions: return 244
    }
  }

}

enum SwiftUnittest_Names_EnumFieldNames2: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case aa // = 0

  /// protoc no longer allows enum naming that would differ only in underscores.
  /// Initial commit:
  ///   https://github.com/google/protobuf/commit/cc8ca5b6a5478b40546d4206392eb1471454460d
  /// Change keep proto3 as error, but proto2 to just a warning:
  ///   https://github.com/google/protobuf/pull/2204
  /// So this is in a second enum so it won't cause issues with the '_' one;
  /// but still ensure things generator correctly.
  case ____ // = 1065

  init() {
    self = .aa
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .aa
    case 1065: self = .____
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .aa: return 0
    case .____: return 1065
    }
  }

}

struct SwiftUnittest_Names_Foo: SwiftProtobuf.Message, SwiftProtobuf.ExtensibleMessage {
  static let protoMessageName: String = _protobuf_package + ".Foo"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      if (1 <= fieldNumber && fieldNumber < 5001) {
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: SwiftUnittest_Names_Foo.self, fieldNumber: fieldNumber)
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 5001)
    try unknownFields.traverse(visitor: &visitor)
  }

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

struct SwiftUnittest_Names_FieldNames: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".FieldNames"

  var string: Int32 {
    get {return _storage._string ?? 0}
    set {_uniqueStorage()._string = newValue}
  }
  var hasString: Bool {
    return _storage._string != nil
  }
  mutating func clearString() {
    _storage._string = nil
  }

  var int: Int32 {
    get {return _storage._int ?? 0}
    set {_uniqueStorage()._int = newValue}
  }
  var hasInt: Bool {
    return _storage._int != nil
  }
  mutating func clearInt() {
    _storage._int = nil
  }

  var double: Int32 {
    get {return _storage._double ?? 0}
    set {_uniqueStorage()._double = newValue}
  }
  var hasDouble: Bool {
    return _storage._double != nil
  }
  mutating func clearDouble() {
    _storage._double = nil
  }

  var float: Int32 {
    get {return _storage._float ?? 0}
    set {_uniqueStorage()._float = newValue}
  }
  var hasFloat: Bool {
    return _storage._float != nil
  }
  mutating func clearFloat() {
    _storage._float = nil
  }

  var uint: Int32 {
    get {return _storage._uint ?? 0}
    set {_uniqueStorage()._uint = newValue}
  }
  var hasUint: Bool {
    return _storage._uint != nil
  }
  mutating func clearUint() {
    _storage._uint = nil
  }

  var hashValue_p: Int32 {
    get {return _storage._hashValue_p ?? 0}
    set {_uniqueStorage()._hashValue_p = newValue}
  }
  var hasHashValue_p: Bool {
    return _storage._hashValue_p != nil
  }
  mutating func clearHashValue_p() {
    _storage._hashValue_p = nil
  }

  var description_p: Int32 {
    get {return _storage._description_p ?? 0}
    set {_uniqueStorage()._description_p = newValue}
  }
  var hasDescription_p: Bool {
    return _storage._description_p != nil
  }
  mutating func clearDescription_p() {
    _storage._description_p = nil
  }

  var debugDescription_p: Int32 {
    get {return _storage._debugDescription_p ?? 0}
    set {_uniqueStorage()._debugDescription_p = newValue}
  }
  var hasDebugDescription_p: Bool {
    return _storage._debugDescription_p != nil
  }
  mutating func clearDebugDescription_p() {
    _storage._debugDescription_p = nil
  }

  var swift: Int32 {
    get {return _storage._swift ?? 0}
    set {_uniqueStorage()._swift = newValue}
  }
  var hasSwift: Bool {
    return _storage._swift != nil
  }
  mutating func clearSwift() {
    _storage._swift = nil
  }

  var unrecognized: Int32 {
    get {return _storage._unrecognized ?? 0}
    set {_uniqueStorage()._unrecognized = newValue}
  }
  var hasUnrecognized: Bool {
    return _storage._unrecognized != nil
  }
  mutating func clearUnrecognized() {
    _storage._unrecognized = nil
  }

  var class_p: Int32 {
    get {return _storage._class_p ?? 0}
    set {_uniqueStorage()._class_p = newValue}
  }
  var hasClass_p: Bool {
    return _storage._class_p != nil
  }
  mutating func clearClass_p() {
    _storage._class_p = nil
  }

  var deinit_p: Int32 {
    get {return _storage._deinit_p ?? 0}
    set {_uniqueStorage()._deinit_p = newValue}
  }
  var hasDeinit_p: Bool {
    return _storage._deinit_p != nil
  }
  mutating func clearDeinit_p() {
    _storage._deinit_p = nil
  }

  var enum_p: Int32 {
    get {return _storage._enum_p ?? 0}
    set {_uniqueStorage()._enum_p = newValue}
  }
  var hasEnum_p: Bool {
    return _storage._enum_p != nil
  }
  mutating func clearEnum_p() {
    _storage._enum_p = nil
  }

  var func_p: Int32 {
    get {return _storage._func_p ?? 0}
    set {_uniqueStorage()._func_p = newValue}
  }
  var hasFunc_p: Bool {
    return _storage._func_p != nil
  }
  mutating func clearFunc_p() {
    _storage._func_p = nil
  }

  var import_p: Int32 {
    get {return _storage._import_p ?? 0}
    set {_uniqueStorage()._import_p = newValue}
  }
  var hasImport_p: Bool {
    return _storage._import_p != nil
  }
  mutating func clearImport_p() {
    _storage._import_p = nil
  }

  var init_p: Int32 {
    get {return _storage._init_p ?? 0}
    set {_uniqueStorage()._init_p = newValue}
  }
  var hasInit_p: Bool {
    return _storage._init_p != nil
  }
  mutating func clearInit_p() {
    _storage._init_p = nil
  }

  var inout_p: Int32 {
    get {return _storage._inout_p ?? 0}
    set {_uniqueStorage()._inout_p = newValue}
  }
  var hasInout_p: Bool {
    return _storage._inout_p != nil
  }
  mutating func clearInout_p() {
    _storage._inout_p = nil
  }

  var internal_p: Int32 {
    get {return _storage._internal_p ?? 0}
    set {_uniqueStorage()._internal_p = newValue}
  }
  var hasInternal_p: Bool {
    return _storage._internal_p != nil
  }
  mutating func clearInternal_p() {
    _storage._internal_p = nil
  }

  var let_p: Int32 {
    get {return _storage._let_p ?? 0}
    set {_uniqueStorage()._let_p = newValue}
  }
  var hasLet_p: Bool {
    return _storage._let_p != nil
  }
  mutating func clearLet_p() {
    _storage._let_p = nil
  }

  var operator_p: Int32 {
    get {return _storage._operator_p ?? 0}
    set {_uniqueStorage()._operator_p = newValue}
  }
  var hasOperator_p: Bool {
    return _storage._operator_p != nil
  }
  mutating func clearOperator_p() {
    _storage._operator_p = nil
  }

  var private_p: Int32 {
    get {return _storage._private_p ?? 0}
    set {_uniqueStorage()._private_p = newValue}
  }
  var hasPrivate_p: Bool {
    return _storage._private_p != nil
  }
  mutating func clearPrivate_p() {
    _storage._private_p = nil
  }

  var protocol_p: Int32 {
    get {return _storage._protocol_p ?? 0}
    set {_uniqueStorage()._protocol_p = newValue}
  }
  var hasProtocol_p: Bool {
    return _storage._protocol_p != nil
  }
  mutating func clearProtocol_p() {
    _storage._protocol_p = nil
  }

  var public_p: Int32 {
    get {return _storage._public_p ?? 0}
    set {_uniqueStorage()._public_p = newValue}
  }
  var hasPublic_p: Bool {
    return _storage._public_p != nil
  }
  mutating func clearPublic_p() {
    _storage._public_p = nil
  }

  var static_p: Int32 {
    get {return _storage._static_p ?? 0}
    set {_uniqueStorage()._static_p = newValue}
  }
  var hasStatic_p: Bool {
    return _storage._static_p != nil
  }
  mutating func clearStatic_p() {
    _storage._static_p = nil
  }

  var struct_p: Int32 {
    get {return _storage._struct_p ?? 0}
    set {_uniqueStorage()._struct_p = newValue}
  }
  var hasStruct_p: Bool {
    return _storage._struct_p != nil
  }
  mutating func clearStruct_p() {
    _storage._struct_p = nil
  }

  var subscript_p: Int32 {
    get {return _storage._subscript_p ?? 0}
    set {_uniqueStorage()._subscript_p = newValue}
  }
  var hasSubscript_p: Bool {
    return _storage._subscript_p != nil
  }
  mutating func clearSubscript_p() {
    _storage._subscript_p = nil
  }

  var typealias_p: Int32 {
    get {return _storage._typealias_p ?? 0}
    set {_uniqueStorage()._typealias_p = newValue}
  }
  var hasTypealias_p: Bool {
    return _storage._typealias_p != nil
  }
  mutating func clearTypealias_p() {
    _storage._typealias_p = nil
  }

  var var_p: Int32 {
    get {return _storage._var_p ?? 0}
    set {_uniqueStorage()._var_p = newValue}
  }
  var hasVar_p: Bool {
    return _storage._var_p != nil
  }
  mutating func clearVar_p() {
    _storage._var_p = nil
  }

  var break_p: Int32 {
    get {return _storage._break_p ?? 0}
    set {_uniqueStorage()._break_p = newValue}
  }
  var hasBreak_p: Bool {
    return _storage._break_p != nil
  }
  mutating func clearBreak_p() {
    _storage._break_p = nil
  }

  var case_p: Int32 {
    get {return _storage._case_p ?? 0}
    set {_uniqueStorage()._case_p = newValue}
  }
  var hasCase_p: Bool {
    return _storage._case_p != nil
  }
  mutating func clearCase_p() {
    _storage._case_p = nil
  }

  var continue_p: Int32 {
    get {return _storage._continue_p ?? 0}
    set {_uniqueStorage()._continue_p = newValue}
  }
  var hasContinue_p: Bool {
    return _storage._continue_p != nil
  }
  mutating func clearContinue_p() {
    _storage._continue_p = nil
  }

  var default_p: Int32 {
    get {return _storage._default_p ?? 0}
    set {_uniqueStorage()._default_p = newValue}
  }
  var hasDefault_p: Bool {
    return _storage._default_p != nil
  }
  mutating func clearDefault_p() {
    _storage._default_p = nil
  }

  var defer_p: Int32 {
    get {return _storage._defer_p ?? 0}
    set {_uniqueStorage()._defer_p = newValue}
  }
  var hasDefer_p: Bool {
    return _storage._defer_p != nil
  }
  mutating func clearDefer_p() {
    _storage._defer_p = nil
  }

  var do_p: Int32 {
    get {return _storage._do_p ?? 0}
    set {_uniqueStorage()._do_p = newValue}
  }
  var hasDo_p: Bool {
    return _storage._do_p != nil
  }
  mutating func clearDo_p() {
    _storage._do_p = nil
  }

  var else_p: Int32 {
    get {return _storage._else_p ?? 0}
    set {_uniqueStorage()._else_p = newValue}
  }
  var hasElse_p: Bool {
    return _storage._else_p != nil
  }
  mutating func clearElse_p() {
    _storage._else_p = nil
  }

  var fallthrough_p: Int32 {
    get {return _storage._fallthrough_p ?? 0}
    set {_uniqueStorage()._fallthrough_p = newValue}
  }
  var hasFallthrough_p: Bool {
    return _storage._fallthrough_p != nil
  }
  mutating func clearFallthrough_p() {
    _storage._fallthrough_p = nil
  }

  var for_p: Int32 {
    get {return _storage._for_p ?? 0}
    set {_uniqueStorage()._for_p = newValue}
  }
  var hasFor_p: Bool {
    return _storage._for_p != nil
  }
  mutating func clearFor_p() {
    _storage._for_p = nil
  }

  var guard_p: Int32 {
    get {return _storage._guard_p ?? 0}
    set {_uniqueStorage()._guard_p = newValue}
  }
  var hasGuard_p: Bool {
    return _storage._guard_p != nil
  }
  mutating func clearGuard_p() {
    _storage._guard_p = nil
  }

  var if_p: Int32 {
    get {return _storage._if_p ?? 0}
    set {_uniqueStorage()._if_p = newValue}
  }
  var hasIf_p: Bool {
    return _storage._if_p != nil
  }
  mutating func clearIf_p() {
    _storage._if_p = nil
  }

  var in_p: Int32 {
    get {return _storage._in_p ?? 0}
    set {_uniqueStorage()._in_p = newValue}
  }
  var hasIn_p: Bool {
    return _storage._in_p != nil
  }
  mutating func clearIn_p() {
    _storage._in_p = nil
  }

  var repeat_p: Int32 {
    get {return _storage._repeat_p ?? 0}
    set {_uniqueStorage()._repeat_p = newValue}
  }
  var hasRepeat_p: Bool {
    return _storage._repeat_p != nil
  }
  mutating func clearRepeat_p() {
    _storage._repeat_p = nil
  }

  var return_p: Int32 {
    get {return _storage._return_p ?? 0}
    set {_uniqueStorage()._return_p = newValue}
  }
  var hasReturn_p: Bool {
    return _storage._return_p != nil
  }
  mutating func clearReturn_p() {
    _storage._return_p = nil
  }

  var switch_p: Int32 {
    get {return _storage._switch_p ?? 0}
    set {_uniqueStorage()._switch_p = newValue}
  }
  var hasSwitch_p: Bool {
    return _storage._switch_p != nil
  }
  mutating func clearSwitch_p() {
    _storage._switch_p = nil
  }

  var where_p: Int32 {
    get {return _storage._where_p ?? 0}
    set {_uniqueStorage()._where_p = newValue}
  }
  var hasWhere_p: Bool {
    return _storage._where_p != nil
  }
  mutating func clearWhere_p() {
    _storage._where_p = nil
  }

  var while_p: Int32 {
    get {return _storage._while_p ?? 0}
    set {_uniqueStorage()._while_p = newValue}
  }
  var hasWhile_p: Bool {
    return _storage._while_p != nil
  }
  mutating func clearWhile_p() {
    _storage._while_p = nil
  }

  var as_p: Int32 {
    get {return _storage._as_p ?? 0}
    set {_uniqueStorage()._as_p = newValue}
  }
  var hasAs_p: Bool {
    return _storage._as_p != nil
  }
  mutating func clearAs_p() {
    _storage._as_p = nil
  }

  var catch_p: Int32 {
    get {return _storage._catch_p ?? 0}
    set {_uniqueStorage()._catch_p = newValue}
  }
  var hasCatch_p: Bool {
    return _storage._catch_p != nil
  }
  mutating func clearCatch_p() {
    _storage._catch_p = nil
  }

  var dynamicType_p: Int32 {
    get {return _storage._dynamicType_p ?? 0}
    set {_uniqueStorage()._dynamicType_p = newValue}
  }
  var hasDynamicType_p: Bool {
    return _storage._dynamicType_p != nil
  }
  mutating func clearDynamicType_p() {
    _storage._dynamicType_p = nil
  }

  var false_p: Int32 {
    get {return _storage._false_p ?? 0}
    set {_uniqueStorage()._false_p = newValue}
  }
  var hasFalse_p: Bool {
    return _storage._false_p != nil
  }
  mutating func clearFalse_p() {
    _storage._false_p = nil
  }

  var is_p: Int32 {
    get {return _storage._is_p ?? 0}
    set {_uniqueStorage()._is_p = newValue}
  }
  var hasIs_p: Bool {
    return _storage._is_p != nil
  }
  mutating func clearIs_p() {
    _storage._is_p = nil
  }

  var nil_p: Int32 {
    get {return _storage._nil_p ?? 0}
    set {_uniqueStorage()._nil_p = newValue}
  }
  var hasNil_p: Bool {
    return _storage._nil_p != nil
  }
  mutating func clearNil_p() {
    _storage._nil_p = nil
  }

  var rethrows_p: Int32 {
    get {return _storage._rethrows_p ?? 0}
    set {_uniqueStorage()._rethrows_p = newValue}
  }
  var hasRethrows_p: Bool {
    return _storage._rethrows_p != nil
  }
  mutating func clearRethrows_p() {
    _storage._rethrows_p = nil
  }

  var super_p: Int32 {
    get {return _storage._super_p ?? 0}
    set {_uniqueStorage()._super_p = newValue}
  }
  var hasSuper_p: Bool {
    return _storage._super_p != nil
  }
  mutating func clearSuper_p() {
    _storage._super_p = nil
  }

  var self_p: Int32 {
    get {return _storage._self_p ?? 0}
    set {_uniqueStorage()._self_p = newValue}
  }
  var hasSelf_p: Bool {
    return _storage._self_p != nil
  }
  mutating func clearSelf_p() {
    _storage._self_p = nil
  }

  var throw_p: Int32 {
    get {return _storage._throw_p ?? 0}
    set {_uniqueStorage()._throw_p = newValue}
  }
  var hasThrow_p: Bool {
    return _storage._throw_p != nil
  }
  mutating func clearThrow_p() {
    _storage._throw_p = nil
  }

  var throws_p: Int32 {
    get {return _storage._throws_p ?? 0}
    set {_uniqueStorage()._throws_p = newValue}
  }
  var hasThrows_p: Bool {
    return _storage._throws_p != nil
  }
  mutating func clearThrows_p() {
    _storage._throws_p = nil
  }

  var true_p: Int32 {
    get {return _storage._true_p ?? 0}
    set {_uniqueStorage()._true_p = newValue}
  }
  var hasTrue_p: Bool {
    return _storage._true_p != nil
  }
  mutating func clearTrue_p() {
    _storage._true_p = nil
  }

  var try_p: Int32 {
    get {return _storage._try_p ?? 0}
    set {_uniqueStorage()._try_p = newValue}
  }
  var hasTry_p: Bool {
    return _storage._try_p != nil
  }
  mutating func clearTry_p() {
    _storage._try_p = nil
  }

  var _Column__: Int32 {
    get {return _storage.__Column__ ?? 0}
    set {_uniqueStorage().__Column__ = newValue}
  }
  var has_Column__: Bool {
    return _storage.__Column__ != nil
  }
  mutating func clear_Column__() {
    _storage.__Column__ = nil
  }

  var _File__: Int32 {
    get {return _storage.__File__ ?? 0}
    set {_uniqueStorage().__File__ = newValue}
  }
  var has_File__: Bool {
    return _storage.__File__ != nil
  }
  mutating func clear_File__() {
    _storage.__File__ = nil
  }

  var _Function__: Int32 {
    get {return _storage.__Function__ ?? 0}
    set {_uniqueStorage().__Function__ = newValue}
  }
  var has_Function__: Bool {
    return _storage.__Function__ != nil
  }
  mutating func clear_Function__() {
    _storage.__Function__ = nil
  }

  var _Line__: Int32 {
    get {return _storage.__Line__ ?? 0}
    set {_uniqueStorage().__Line__ = newValue}
  }
  var has_Line__: Bool {
    return _storage.__Line__ != nil
  }
  mutating func clear_Line__() {
    _storage.__Line__ = nil
  }

  var ___: Int32 {
    get {return _storage.____ ?? 0}
    set {_uniqueStorage().____ = newValue}
  }
  var has___: Bool {
    return _storage.____ != nil
  }
  mutating func clear___() {
    _storage.____ = nil
  }

  var associativity: Int32 {
    get {return _storage._associativity ?? 0}
    set {_uniqueStorage()._associativity = newValue}
  }
  var hasAssociativity: Bool {
    return _storage._associativity != nil
  }
  mutating func clearAssociativity() {
    _storage._associativity = nil
  }

  var convenience: Int32 {
    get {return _storage._convenience ?? 0}
    set {_uniqueStorage()._convenience = newValue}
  }
  var hasConvenience: Bool {
    return _storage._convenience != nil
  }
  mutating func clearConvenience() {
    _storage._convenience = nil
  }

  var dynamic: Int32 {
    get {return _storage._dynamic ?? 0}
    set {_uniqueStorage()._dynamic = newValue}
  }
  var hasDynamic: Bool {
    return _storage._dynamic != nil
  }
  mutating func clearDynamic() {
    _storage._dynamic = nil
  }

  var didSet: Int32 {
    get {return _storage._didSet ?? 0}
    set {_uniqueStorage()._didSet = newValue}
  }
  var hasDidSet: Bool {
    return _storage._didSet != nil
  }
  mutating func clearDidSet() {
    _storage._didSet = nil
  }

  var final: Int32 {
    get {return _storage._final ?? 0}
    set {_uniqueStorage()._final = newValue}
  }
  var hasFinal: Bool {
    return _storage._final != nil
  }
  mutating func clearFinal() {
    _storage._final = nil
  }

  var get: Int32 {
    get {return _storage._get ?? 0}
    set {_uniqueStorage()._get = newValue}
  }
  var hasGet: Bool {
    return _storage._get != nil
  }
  mutating func clearGet() {
    _storage._get = nil
  }

  var infix: Int32 {
    get {return _storage._infix ?? 0}
    set {_uniqueStorage()._infix = newValue}
  }
  var hasInfix: Bool {
    return _storage._infix != nil
  }
  mutating func clearInfix() {
    _storage._infix = nil
  }

  var indirect: Int32 {
    get {return _storage._indirect ?? 0}
    set {_uniqueStorage()._indirect = newValue}
  }
  var hasIndirect: Bool {
    return _storage._indirect != nil
  }
  mutating func clearIndirect() {
    _storage._indirect = nil
  }

  var lazy: Int32 {
    get {return _storage._lazy ?? 0}
    set {_uniqueStorage()._lazy = newValue}
  }
  var hasLazy: Bool {
    return _storage._lazy != nil
  }
  mutating func clearLazy() {
    _storage._lazy = nil
  }

  var left: Int32 {
    get {return _storage._left ?? 0}
    set {_uniqueStorage()._left = newValue}
  }
  var hasLeft: Bool {
    return _storage._left != nil
  }
  mutating func clearLeft() {
    _storage._left = nil
  }

  var mutating: Int32 {
    get {return _storage._mutating ?? 0}
    set {_uniqueStorage()._mutating = newValue}
  }
  var hasMutating: Bool {
    return _storage._mutating != nil
  }
  mutating func clearMutating() {
    _storage._mutating = nil
  }

  var none: Int32 {
    get {return _storage._none ?? 0}
    set {_uniqueStorage()._none = newValue}
  }
  var hasNone: Bool {
    return _storage._none != nil
  }
  mutating func clearNone() {
    _storage._none = nil
  }

  var nonmutating: Int32 {
    get {return _storage._nonmutating ?? 0}
    set {_uniqueStorage()._nonmutating = newValue}
  }
  var hasNonmutating: Bool {
    return _storage._nonmutating != nil
  }
  mutating func clearNonmutating() {
    _storage._nonmutating = nil
  }

  var optional: Int32 {
    get {return _storage._optional ?? 0}
    set {_uniqueStorage()._optional = newValue}
  }
  var hasOptional: Bool {
    return _storage._optional != nil
  }
  mutating func clearOptional() {
    _storage._optional = nil
  }

  var override: Int32 {
    get {return _storage._override ?? 0}
    set {_uniqueStorage()._override = newValue}
  }
  var hasOverride: Bool {
    return _storage._override != nil
  }
  mutating func clearOverride() {
    _storage._override = nil
  }

  var postfix: Int32 {
    get {return _storage._postfix ?? 0}
    set {_uniqueStorage()._postfix = newValue}
  }
  var hasPostfix: Bool {
    return _storage._postfix != nil
  }
  mutating func clearPostfix() {
    _storage._postfix = nil
  }

  var precedence: Int32 {
    get {return _storage._precedence ?? 0}
    set {_uniqueStorage()._precedence = newValue}
  }
  var hasPrecedence: Bool {
    return _storage._precedence != nil
  }
  mutating func clearPrecedence() {
    _storage._precedence = nil
  }

  var prefix: Int32 {
    get {return _storage._prefix ?? 0}
    set {_uniqueStorage()._prefix = newValue}
  }
  var hasPrefix: Bool {
    return _storage._prefix != nil
  }
  mutating func clearPrefix() {
    _storage._prefix = nil
  }

  var required: Int32 {
    get {return _storage._required ?? 0}
    set {_uniqueStorage()._required = newValue}
  }
  var hasRequired: Bool {
    return _storage._required != nil
  }
  mutating func clearRequired() {
    _storage._required = nil
  }

  var right: Int32 {
    get {return _storage._right ?? 0}
    set {_uniqueStorage()._right = newValue}
  }
  var hasRight: Bool {
    return _storage._right != nil
  }
  mutating func clearRight() {
    _storage._right = nil
  }

  var set: Int32 {
    get {return _storage._set ?? 0}
    set {_uniqueStorage()._set = newValue}
  }
  var hasSet: Bool {
    return _storage._set != nil
  }
  mutating func clearSet() {
    _storage._set = nil
  }

  var type: Int32 {
    get {return _storage._type ?? 0}
    set {_uniqueStorage()._type = newValue}
  }
  var hasType: Bool {
    return _storage._type != nil
  }
  mutating func clearType() {
    _storage._type = nil
  }

  var unowned: Int32 {
    get {return _storage._unowned ?? 0}
    set {_uniqueStorage()._unowned = newValue}
  }
  var hasUnowned: Bool {
    return _storage._unowned != nil
  }
  mutating func clearUnowned() {
    _storage._unowned = nil
  }

  var weak: Int32 {
    get {return _storage._weak ?? 0}
    set {_uniqueStorage()._weak = newValue}
  }
  var hasWeak: Bool {
    return _storage._weak != nil
  }
  mutating func clearWeak() {
    _storage._weak = nil
  }

  var willSet: Int32 {
    get {return _storage._willSet ?? 0}
    set {_uniqueStorage()._willSet = newValue}
  }
  var hasWillSet: Bool {
    return _storage._willSet != nil
  }
  mutating func clearWillSet() {
    _storage._willSet = nil
  }

  var id: Int32 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  var hasId: Bool {
    return _storage._id != nil
  }
  mutating func clearId() {
    _storage._id = nil
  }

  var cmd: Int32 {
    get {return _storage._cmd ?? 0}
    set {_uniqueStorage()._cmd = newValue}
  }
  var hasCmd: Bool {
    return _storage._cmd != nil
  }
  mutating func clearCmd() {
    _storage._cmd = nil
  }

  var out: Int32 {
    get {return _storage._out ?? 0}
    set {_uniqueStorage()._out = newValue}
  }
  var hasOut: Bool {
    return _storage._out != nil
  }
  mutating func clearOut() {
    _storage._out = nil
  }

  var bycopy: Int32 {
    get {return _storage._bycopy ?? 0}
    set {_uniqueStorage()._bycopy = newValue}
  }
  var hasBycopy: Bool {
    return _storage._bycopy != nil
  }
  mutating func clearBycopy() {
    _storage._bycopy = nil
  }

  var byref: Int32 {
    get {return _storage._byref ?? 0}
    set {_uniqueStorage()._byref = newValue}
  }
  var hasByref: Bool {
    return _storage._byref != nil
  }
  mutating func clearByref() {
    _storage._byref = nil
  }

  var oneway: Int32 {
    get {return _storage._oneway ?? 0}
    set {_uniqueStorage()._oneway = newValue}
  }
  var hasOneway: Bool {
    return _storage._oneway != nil
  }
  mutating func clearOneway() {
    _storage._oneway = nil
  }

  var and: Int32 {
    get {return _storage._and ?? 0}
    set {_uniqueStorage()._and = newValue}
  }
  var hasAnd: Bool {
    return _storage._and != nil
  }
  mutating func clearAnd() {
    _storage._and = nil
  }

  var andEq: Int32 {
    get {return _storage._andEq ?? 0}
    set {_uniqueStorage()._andEq = newValue}
  }
  var hasAndEq: Bool {
    return _storage._andEq != nil
  }
  mutating func clearAndEq() {
    _storage._andEq = nil
  }

  var alignas: Int32 {
    get {return _storage._alignas ?? 0}
    set {_uniqueStorage()._alignas = newValue}
  }
  var hasAlignas: Bool {
    return _storage._alignas != nil
  }
  mutating func clearAlignas() {
    _storage._alignas = nil
  }

  var alignof: Int32 {
    get {return _storage._alignof ?? 0}
    set {_uniqueStorage()._alignof = newValue}
  }
  var hasAlignof: Bool {
    return _storage._alignof != nil
  }
  mutating func clearAlignof() {
    _storage._alignof = nil
  }

  var asm: Int32 {
    get {return _storage._asm ?? 0}
    set {_uniqueStorage()._asm = newValue}
  }
  var hasAsm: Bool {
    return _storage._asm != nil
  }
  mutating func clearAsm() {
    _storage._asm = nil
  }

  var auto: Int32 {
    get {return _storage._auto ?? 0}
    set {_uniqueStorage()._auto = newValue}
  }
  var hasAuto: Bool {
    return _storage._auto != nil
  }
  mutating func clearAuto() {
    _storage._auto = nil
  }

  var bitand: Int32 {
    get {return _storage._bitand ?? 0}
    set {_uniqueStorage()._bitand = newValue}
  }
  var hasBitand: Bool {
    return _storage._bitand != nil
  }
  mutating func clearBitand() {
    _storage._bitand = nil
  }

  var bitor: Int32 {
    get {return _storage._bitor ?? 0}
    set {_uniqueStorage()._bitor = newValue}
  }
  var hasBitor: Bool {
    return _storage._bitor != nil
  }
  mutating func clearBitor() {
    _storage._bitor = nil
  }

  var bool: Int32 {
    get {return _storage._bool ?? 0}
    set {_uniqueStorage()._bool = newValue}
  }
  var hasBool: Bool {
    return _storage._bool != nil
  }
  mutating func clearBool() {
    _storage._bool = nil
  }

  var char: Int32 {
    get {return _storage._char ?? 0}
    set {_uniqueStorage()._char = newValue}
  }
  var hasChar: Bool {
    return _storage._char != nil
  }
  mutating func clearChar() {
    _storage._char = nil
  }

  var char16T: Int32 {
    get {return _storage._char16T ?? 0}
    set {_uniqueStorage()._char16T = newValue}
  }
  var hasChar16T: Bool {
    return _storage._char16T != nil
  }
  mutating func clearChar16T() {
    _storage._char16T = nil
  }

  var char32T: Int32 {
    get {return _storage._char32T ?? 0}
    set {_uniqueStorage()._char32T = newValue}
  }
  var hasChar32T: Bool {
    return _storage._char32T != nil
  }
  mutating func clearChar32T() {
    _storage._char32T = nil
  }

  var compl: Int32 {
    get {return _storage._compl ?? 0}
    set {_uniqueStorage()._compl = newValue}
  }
  var hasCompl: Bool {
    return _storage._compl != nil
  }
  mutating func clearCompl() {
    _storage._compl = nil
  }

  var const: Int32 {
    get {return _storage._const ?? 0}
    set {_uniqueStorage()._const = newValue}
  }
  var hasConst: Bool {
    return _storage._const != nil
  }
  mutating func clearConst() {
    _storage._const = nil
  }

  var constexpr: Int32 {
    get {return _storage._constexpr ?? 0}
    set {_uniqueStorage()._constexpr = newValue}
  }
  var hasConstexpr: Bool {
    return _storage._constexpr != nil
  }
  mutating func clearConstexpr() {
    _storage._constexpr = nil
  }

  var constCast: Int32 {
    get {return _storage._constCast ?? 0}
    set {_uniqueStorage()._constCast = newValue}
  }
  var hasConstCast: Bool {
    return _storage._constCast != nil
  }
  mutating func clearConstCast() {
    _storage._constCast = nil
  }

  var decltype: Int32 {
    get {return _storage._decltype ?? 0}
    set {_uniqueStorage()._decltype = newValue}
  }
  var hasDecltype: Bool {
    return _storage._decltype != nil
  }
  mutating func clearDecltype() {
    _storage._decltype = nil
  }

  var delete: Int32 {
    get {return _storage._delete ?? 0}
    set {_uniqueStorage()._delete = newValue}
  }
  var hasDelete: Bool {
    return _storage._delete != nil
  }
  mutating func clearDelete() {
    _storage._delete = nil
  }

  var dynamicCast: Int32 {
    get {return _storage._dynamicCast ?? 0}
    set {_uniqueStorage()._dynamicCast = newValue}
  }
  var hasDynamicCast: Bool {
    return _storage._dynamicCast != nil
  }
  mutating func clearDynamicCast() {
    _storage._dynamicCast = nil
  }

  var explicit: Int32 {
    get {return _storage._explicit ?? 0}
    set {_uniqueStorage()._explicit = newValue}
  }
  var hasExplicit: Bool {
    return _storage._explicit != nil
  }
  mutating func clearExplicit() {
    _storage._explicit = nil
  }

  var export: Int32 {
    get {return _storage._export ?? 0}
    set {_uniqueStorage()._export = newValue}
  }
  var hasExport: Bool {
    return _storage._export != nil
  }
  mutating func clearExport() {
    _storage._export = nil
  }

  var extern: Int32 {
    get {return _storage._extern ?? 0}
    set {_uniqueStorage()._extern = newValue}
  }
  var hasExtern: Bool {
    return _storage._extern != nil
  }
  mutating func clearExtern() {
    _storage._extern = nil
  }

  var friend: Int32 {
    get {return _storage._friend ?? 0}
    set {_uniqueStorage()._friend = newValue}
  }
  var hasFriend: Bool {
    return _storage._friend != nil
  }
  mutating func clearFriend() {
    _storage._friend = nil
  }

  var goto: Int32 {
    get {return _storage._goto ?? 0}
    set {_uniqueStorage()._goto = newValue}
  }
  var hasGoto: Bool {
    return _storage._goto != nil
  }
  mutating func clearGoto() {
    _storage._goto = nil
  }

  var inline: Int32 {
    get {return _storage._inline ?? 0}
    set {_uniqueStorage()._inline = newValue}
  }
  var hasInline: Bool {
    return _storage._inline != nil
  }
  mutating func clearInline() {
    _storage._inline = nil
  }

  var long: Int32 {
    get {return _storage._long ?? 0}
    set {_uniqueStorage()._long = newValue}
  }
  var hasLong: Bool {
    return _storage._long != nil
  }
  mutating func clearLong() {
    _storage._long = nil
  }

  var mutable: Int32 {
    get {return _storage._mutable ?? 0}
    set {_uniqueStorage()._mutable = newValue}
  }
  var hasMutable: Bool {
    return _storage._mutable != nil
  }
  mutating func clearMutable() {
    _storage._mutable = nil
  }

  var namespace: Int32 {
    get {return _storage._namespace ?? 0}
    set {_uniqueStorage()._namespace = newValue}
  }
  var hasNamespace: Bool {
    return _storage._namespace != nil
  }
  mutating func clearNamespace() {
    _storage._namespace = nil
  }

  var new: Int32 {
    get {return _storage._new ?? 0}
    set {_uniqueStorage()._new = newValue}
  }
  var hasNew: Bool {
    return _storage._new != nil
  }
  mutating func clearNew() {
    _storage._new = nil
  }

  var noexcept: Int32 {
    get {return _storage._noexcept ?? 0}
    set {_uniqueStorage()._noexcept = newValue}
  }
  var hasNoexcept: Bool {
    return _storage._noexcept != nil
  }
  mutating func clearNoexcept() {
    _storage._noexcept = nil
  }

  var not: Int32 {
    get {return _storage._not ?? 0}
    set {_uniqueStorage()._not = newValue}
  }
  var hasNot: Bool {
    return _storage._not != nil
  }
  mutating func clearNot() {
    _storage._not = nil
  }

  var notEq: Int32 {
    get {return _storage._notEq ?? 0}
    set {_uniqueStorage()._notEq = newValue}
  }
  var hasNotEq: Bool {
    return _storage._notEq != nil
  }
  mutating func clearNotEq() {
    _storage._notEq = nil
  }

  var nullptr: Int32 {
    get {return _storage._nullptr ?? 0}
    set {_uniqueStorage()._nullptr = newValue}
  }
  var hasNullptr: Bool {
    return _storage._nullptr != nil
  }
  mutating func clearNullptr() {
    _storage._nullptr = nil
  }

  var or: Int32 {
    get {return _storage._or ?? 0}
    set {_uniqueStorage()._or = newValue}
  }
  var hasOr: Bool {
    return _storage._or != nil
  }
  mutating func clearOr() {
    _storage._or = nil
  }

  var orEq: Int32 {
    get {return _storage._orEq ?? 0}
    set {_uniqueStorage()._orEq = newValue}
  }
  var hasOrEq: Bool {
    return _storage._orEq != nil
  }
  mutating func clearOrEq() {
    _storage._orEq = nil
  }

  var protected: Int32 {
    get {return _storage._protected ?? 0}
    set {_uniqueStorage()._protected = newValue}
  }
  var hasProtected: Bool {
    return _storage._protected != nil
  }
  mutating func clearProtected() {
    _storage._protected = nil
  }

  var register: Int32 {
    get {return _storage._register ?? 0}
    set {_uniqueStorage()._register = newValue}
  }
  var hasRegister: Bool {
    return _storage._register != nil
  }
  mutating func clearRegister() {
    _storage._register = nil
  }

  var reinterpretCast: Int32 {
    get {return _storage._reinterpretCast ?? 0}
    set {_uniqueStorage()._reinterpretCast = newValue}
  }
  var hasReinterpretCast: Bool {
    return _storage._reinterpretCast != nil
  }
  mutating func clearReinterpretCast() {
    _storage._reinterpretCast = nil
  }

  var short: Int32 {
    get {return _storage._short ?? 0}
    set {_uniqueStorage()._short = newValue}
  }
  var hasShort: Bool {
    return _storage._short != nil
  }
  mutating func clearShort() {
    _storage._short = nil
  }

  var signed: Int32 {
    get {return _storage._signed ?? 0}
    set {_uniqueStorage()._signed = newValue}
  }
  var hasSigned: Bool {
    return _storage._signed != nil
  }
  mutating func clearSigned() {
    _storage._signed = nil
  }

  var sizeof: Int32 {
    get {return _storage._sizeof ?? 0}
    set {_uniqueStorage()._sizeof = newValue}
  }
  var hasSizeof: Bool {
    return _storage._sizeof != nil
  }
  mutating func clearSizeof() {
    _storage._sizeof = nil
  }

  var staticAssert: Int32 {
    get {return _storage._staticAssert ?? 0}
    set {_uniqueStorage()._staticAssert = newValue}
  }
  var hasStaticAssert: Bool {
    return _storage._staticAssert != nil
  }
  mutating func clearStaticAssert() {
    _storage._staticAssert = nil
  }

  var staticCast: Int32 {
    get {return _storage._staticCast ?? 0}
    set {_uniqueStorage()._staticCast = newValue}
  }
  var hasStaticCast: Bool {
    return _storage._staticCast != nil
  }
  mutating func clearStaticCast() {
    _storage._staticCast = nil
  }

  var template: Int32 {
    get {return _storage._template ?? 0}
    set {_uniqueStorage()._template = newValue}
  }
  var hasTemplate: Bool {
    return _storage._template != nil
  }
  mutating func clearTemplate() {
    _storage._template = nil
  }

  var this: Int32 {
    get {return _storage._this ?? 0}
    set {_uniqueStorage()._this = newValue}
  }
  var hasThis: Bool {
    return _storage._this != nil
  }
  mutating func clearThis() {
    _storage._this = nil
  }

  var threadLocal: Int32 {
    get {return _storage._threadLocal ?? 0}
    set {_uniqueStorage()._threadLocal = newValue}
  }
  var hasThreadLocal: Bool {
    return _storage._threadLocal != nil
  }
  mutating func clearThreadLocal() {
    _storage._threadLocal = nil
  }

  var typedef: Int32 {
    get {return _storage._typedef ?? 0}
    set {_uniqueStorage()._typedef = newValue}
  }
  var hasTypedef: Bool {
    return _storage._typedef != nil
  }
  mutating func clearTypedef() {
    _storage._typedef = nil
  }

  var typeid: Int32 {
    get {return _storage._typeid ?? 0}
    set {_uniqueStorage()._typeid = newValue}
  }
  var hasTypeid: Bool {
    return _storage._typeid != nil
  }
  mutating func clearTypeid() {
    _storage._typeid = nil
  }

  var typename: Int32 {
    get {return _storage._typename ?? 0}
    set {_uniqueStorage()._typename = newValue}
  }
  var hasTypename: Bool {
    return _storage._typename != nil
  }
  mutating func clearTypename() {
    _storage._typename = nil
  }

  var union: Int32 {
    get {return _storage._union ?? 0}
    set {_uniqueStorage()._union = newValue}
  }
  var hasUnion: Bool {
    return _storage._union != nil
  }
  mutating func clearUnion() {
    _storage._union = nil
  }

  var unsigned: Int32 {
    get {return _storage._unsigned ?? 0}
    set {_uniqueStorage()._unsigned = newValue}
  }
  var hasUnsigned: Bool {
    return _storage._unsigned != nil
  }
  mutating func clearUnsigned() {
    _storage._unsigned = nil
  }

  var using: Int32 {
    get {return _storage._using ?? 0}
    set {_uniqueStorage()._using = newValue}
  }
  var hasUsing: Bool {
    return _storage._using != nil
  }
  mutating func clearUsing() {
    _storage._using = nil
  }

  var virtual: Int32 {
    get {return _storage._virtual ?? 0}
    set {_uniqueStorage()._virtual = newValue}
  }
  var hasVirtual: Bool {
    return _storage._virtual != nil
  }
  mutating func clearVirtual() {
    _storage._virtual = nil
  }

  var void: Int32 {
    get {return _storage._void ?? 0}
    set {_uniqueStorage()._void = newValue}
  }
  var hasVoid: Bool {
    return _storage._void != nil
  }
  mutating func clearVoid() {
    _storage._void = nil
  }

  var volatile: Int32 {
    get {return _storage._volatile ?? 0}
    set {_uniqueStorage()._volatile = newValue}
  }
  var hasVolatile: Bool {
    return _storage._volatile != nil
  }
  mutating func clearVolatile() {
    _storage._volatile = nil
  }

  var wcharT: Int32 {
    get {return _storage._wcharT ?? 0}
    set {_uniqueStorage()._wcharT = newValue}
  }
  var hasWcharT: Bool {
    return _storage._wcharT != nil
  }
  mutating func clearWcharT() {
    _storage._wcharT = nil
  }

  var xor: Int32 {
    get {return _storage._xor ?? 0}
    set {_uniqueStorage()._xor = newValue}
  }
  var hasXor: Bool {
    return _storage._xor != nil
  }
  mutating func clearXor() {
    _storage._xor = nil
  }

  var xorEq: Int32 {
    get {return _storage._xorEq ?? 0}
    set {_uniqueStorage()._xorEq = newValue}
  }
  var hasXorEq: Bool {
    return _storage._xorEq != nil
  }
  mutating func clearXorEq() {
    _storage._xorEq = nil
  }

  var restrict: Int32 {
    get {return _storage._restrict ?? 0}
    set {_uniqueStorage()._restrict = newValue}
  }
  var hasRestrict: Bool {
    return _storage._restrict != nil
  }
  mutating func clearRestrict() {
    _storage._restrict = nil
  }

  var category: Int32 {
    get {return _storage._category ?? 0}
    set {_uniqueStorage()._category = newValue}
  }
  var hasCategory: Bool {
    return _storage._category != nil
  }
  mutating func clearCategory() {
    _storage._category = nil
  }

  var ivar: Int32 {
    get {return _storage._ivar ?? 0}
    set {_uniqueStorage()._ivar = newValue}
  }
  var hasIvar: Bool {
    return _storage._ivar != nil
  }
  mutating func clearIvar() {
    _storage._ivar = nil
  }

  var method: Int32 {
    get {return _storage._method ?? 0}
    set {_uniqueStorage()._method = newValue}
  }
  var hasMethod: Bool {
    return _storage._method != nil
  }
  mutating func clearMethod() {
    _storage._method = nil
  }

  var finalize: Int32 {
    get {return _storage._finalize ?? 0}
    set {_uniqueStorage()._finalize = newValue}
  }
  var hasFinalize: Bool {
    return _storage._finalize != nil
  }
  mutating func clearFinalize() {
    _storage._finalize = nil
  }

  var hash_p: Int32 {
    get {return _storage._hash_p ?? 0}
    set {_uniqueStorage()._hash_p = newValue}
  }
  var hasHash_p: Bool {
    return _storage._hash_p != nil
  }
  mutating func clearHash_p() {
    _storage._hash_p = nil
  }

  var dealloc: Int32 {
    get {return _storage._dealloc ?? 0}
    set {_uniqueStorage()._dealloc = newValue}
  }
  var hasDealloc: Bool {
    return _storage._dealloc != nil
  }
  mutating func clearDealloc() {
    _storage._dealloc = nil
  }

  var superclass: Int32 {
    get {return _storage._superclass ?? 0}
    set {_uniqueStorage()._superclass = newValue}
  }
  var hasSuperclass: Bool {
    return _storage._superclass != nil
  }
  mutating func clearSuperclass() {
    _storage._superclass = nil
  }

  var retain: Int32 {
    get {return _storage._retain ?? 0}
    set {_uniqueStorage()._retain = newValue}
  }
  var hasRetain: Bool {
    return _storage._retain != nil
  }
  mutating func clearRetain() {
    _storage._retain = nil
  }

  var release: Int32 {
    get {return _storage._release ?? 0}
    set {_uniqueStorage()._release = newValue}
  }
  var hasRelease: Bool {
    return _storage._release != nil
  }
  mutating func clearRelease() {
    _storage._release = nil
  }

  var autorelease: Int32 {
    get {return _storage._autorelease ?? 0}
    set {_uniqueStorage()._autorelease = newValue}
  }
  var hasAutorelease: Bool {
    return _storage._autorelease != nil
  }
  mutating func clearAutorelease() {
    _storage._autorelease = nil
  }

  var retainCount: Int32 {
    get {return _storage._retainCount ?? 0}
    set {_uniqueStorage()._retainCount = newValue}
  }
  var hasRetainCount: Bool {
    return _storage._retainCount != nil
  }
  mutating func clearRetainCount() {
    _storage._retainCount = nil
  }

  var zone: Int32 {
    get {return _storage._zone ?? 0}
    set {_uniqueStorage()._zone = newValue}
  }
  var hasZone: Bool {
    return _storage._zone != nil
  }
  mutating func clearZone() {
    _storage._zone = nil
  }

  var isProxy: Int32 {
    get {return _storage._isProxy ?? 0}
    set {_uniqueStorage()._isProxy = newValue}
  }
  var hasIsProxy: Bool {
    return _storage._isProxy != nil
  }
  mutating func clearIsProxy() {
    _storage._isProxy = nil
  }

  var copy: Int32 {
    get {return _storage._copy ?? 0}
    set {_uniqueStorage()._copy = newValue}
  }
  var hasCopy: Bool {
    return _storage._copy != nil
  }
  mutating func clearCopy() {
    _storage._copy = nil
  }

  var mutableCopy: Int32 {
    get {return _storage._mutableCopy ?? 0}
    set {_uniqueStorage()._mutableCopy = newValue}
  }
  var hasMutableCopy: Bool {
    return _storage._mutableCopy != nil
  }
  mutating func clearMutableCopy() {
    _storage._mutableCopy = nil
  }

  var classForCoder: Int32 {
    get {return _storage._classForCoder ?? 0}
    set {_uniqueStorage()._classForCoder = newValue}
  }
  var hasClassForCoder: Bool {
    return _storage._classForCoder != nil
  }
  mutating func clearClassForCoder() {
    _storage._classForCoder = nil
  }

  var clear_p: Int32 {
    get {return _storage._clear_p ?? 0}
    set {_uniqueStorage()._clear_p = newValue}
  }
  var hasClear_p: Bool {
    return _storage._clear_p != nil
  }
  mutating func clearClear_p() {
    _storage._clear_p = nil
  }

  var data: Int32 {
    get {return _storage._data ?? 0}
    set {_uniqueStorage()._data = newValue}
  }
  var hasData: Bool {
    return _storage._data != nil
  }
  mutating func clearData() {
    _storage._data = nil
  }

  var delimitedData: Int32 {
    get {return _storage._delimitedData ?? 0}
    set {_uniqueStorage()._delimitedData = newValue}
  }
  var hasDelimitedData: Bool {
    return _storage._delimitedData != nil
  }
  mutating func clearDelimitedData() {
    _storage._delimitedData = nil
  }

  var descriptor: Int32 {
    get {return _storage._descriptor ?? 0}
    set {_uniqueStorage()._descriptor = newValue}
  }
  var hasDescriptor: Bool {
    return _storage._descriptor != nil
  }
  mutating func clearDescriptor() {
    _storage._descriptor = nil
  }

  var extensionRegistry: Int32 {
    get {return _storage._extensionRegistry ?? 0}
    set {_uniqueStorage()._extensionRegistry = newValue}
  }
  var hasExtensionRegistry: Bool {
    return _storage._extensionRegistry != nil
  }
  mutating func clearExtensionRegistry() {
    _storage._extensionRegistry = nil
  }

  var extensionsCurrentlySet: Int32 {
    get {return _storage._extensionsCurrentlySet ?? 0}
    set {_uniqueStorage()._extensionsCurrentlySet = newValue}
  }
  var hasExtensionsCurrentlySet: Bool {
    return _storage._extensionsCurrentlySet != nil
  }
  mutating func clearExtensionsCurrentlySet() {
    _storage._extensionsCurrentlySet = nil
  }

  var isInitialized_p: Int32 {
    get {return _storage._isInitialized_p ?? 0}
    set {_uniqueStorage()._isInitialized_p = newValue}
  }
  var hasIsInitialized_p: Bool {
    return _storage._isInitialized_p != nil
  }
  mutating func clearIsInitialized_p() {
    _storage._isInitialized_p = nil
  }

  var serializedSize: Int32 {
    get {return _storage._serializedSize ?? 0}
    set {_uniqueStorage()._serializedSize = newValue}
  }
  var hasSerializedSize: Bool {
    return _storage._serializedSize != nil
  }
  mutating func clearSerializedSize() {
    _storage._serializedSize = nil
  }

  var sortedExtensionsInUse: Int32 {
    get {return _storage._sortedExtensionsInUse ?? 0}
    set {_uniqueStorage()._sortedExtensionsInUse = newValue}
  }
  var hasSortedExtensionsInUse: Bool {
    return _storage._sortedExtensionsInUse != nil
  }
  mutating func clearSortedExtensionsInUse() {
    _storage._sortedExtensionsInUse = nil
  }

  var unknownFields_p: Int32 {
    get {return _storage._unknownFields_p ?? 0}
    set {_uniqueStorage()._unknownFields_p = newValue}
  }
  var hasUnknownFields_p: Bool {
    return _storage._unknownFields_p != nil
  }
  mutating func clearUnknownFields_p() {
    _storage._unknownFields_p = nil
  }

  var fixed: Int32 {
    get {return _storage._fixed ?? 0}
    set {_uniqueStorage()._fixed = newValue}
  }
  var hasFixed: Bool {
    return _storage._fixed != nil
  }
  mutating func clearFixed() {
    _storage._fixed = nil
  }

  var fract: Int32 {
    get {return _storage._fract ?? 0}
    set {_uniqueStorage()._fract = newValue}
  }
  var hasFract: Bool {
    return _storage._fract != nil
  }
  mutating func clearFract() {
    _storage._fract = nil
  }

  var size: Int32 {
    get {return _storage._size ?? 0}
    set {_uniqueStorage()._size = newValue}
  }
  var hasSize: Bool {
    return _storage._size != nil
  }
  mutating func clearSize() {
    _storage._size = nil
  }

  var logicalAddress: Int32 {
    get {return _storage._logicalAddress ?? 0}
    set {_uniqueStorage()._logicalAddress = newValue}
  }
  var hasLogicalAddress: Bool {
    return _storage._logicalAddress != nil
  }
  mutating func clearLogicalAddress() {
    _storage._logicalAddress = nil
  }

  var physicalAddress: Int32 {
    get {return _storage._physicalAddress ?? 0}
    set {_uniqueStorage()._physicalAddress = newValue}
  }
  var hasPhysicalAddress: Bool {
    return _storage._physicalAddress != nil
  }
  mutating func clearPhysicalAddress() {
    _storage._physicalAddress = nil
  }

  var byteCount: Int32 {
    get {return _storage._byteCount ?? 0}
    set {_uniqueStorage()._byteCount = newValue}
  }
  var hasByteCount: Bool {
    return _storage._byteCount != nil
  }
  mutating func clearByteCount() {
    _storage._byteCount = nil
  }

  var byteOffset: Int32 {
    get {return _storage._byteOffset ?? 0}
    set {_uniqueStorage()._byteOffset = newValue}
  }
  var hasByteOffset: Bool {
    return _storage._byteOffset != nil
  }
  mutating func clearByteOffset() {
    _storage._byteOffset = nil
  }

  var duration: Int32 {
    get {return _storage._duration ?? 0}
    set {_uniqueStorage()._duration = newValue}
  }
  var hasDuration: Bool {
    return _storage._duration != nil
  }
  mutating func clearDuration() {
    _storage._duration = nil
  }

  var absoluteTime: Int32 {
    get {return _storage._absoluteTime ?? 0}
    set {_uniqueStorage()._absoluteTime = newValue}
  }
  var hasAbsoluteTime: Bool {
    return _storage._absoluteTime != nil
  }
  mutating func clearAbsoluteTime() {
    _storage._absoluteTime = nil
  }

  var optionBits: Int32 {
    get {return _storage._optionBits ?? 0}
    set {_uniqueStorage()._optionBits = newValue}
  }
  var hasOptionBits: Bool {
    return _storage._optionBits != nil
  }
  mutating func clearOptionBits() {
    _storage._optionBits = nil
  }

  var itemCount: Int32 {
    get {return _storage._itemCount ?? 0}
    set {_uniqueStorage()._itemCount = newValue}
  }
  var hasItemCount: Bool {
    return _storage._itemCount != nil
  }
  mutating func clearItemCount() {
    _storage._itemCount = nil
  }

  var pbversion: Int32 {
    get {return _storage._pbversion ?? 0}
    set {_uniqueStorage()._pbversion = newValue}
  }
  var hasPbversion: Bool {
    return _storage._pbversion != nil
  }
  mutating func clearPbversion() {
    _storage._pbversion = nil
  }

  var scriptCode: Int32 {
    get {return _storage._scriptCode ?? 0}
    set {_uniqueStorage()._scriptCode = newValue}
  }
  var hasScriptCode: Bool {
    return _storage._scriptCode != nil
  }
  mutating func clearScriptCode() {
    _storage._scriptCode = nil
  }

  var langCode: Int32 {
    get {return _storage._langCode ?? 0}
    set {_uniqueStorage()._langCode = newValue}
  }
  var hasLangCode: Bool {
    return _storage._langCode != nil
  }
  mutating func clearLangCode() {
    _storage._langCode = nil
  }

  var regionCode: Int32 {
    get {return _storage._regionCode ?? 0}
    set {_uniqueStorage()._regionCode = newValue}
  }
  var hasRegionCode: Bool {
    return _storage._regionCode != nil
  }
  mutating func clearRegionCode() {
    _storage._regionCode = nil
  }

  var ostype: Int32 {
    get {return _storage._ostype ?? 0}
    set {_uniqueStorage()._ostype = newValue}
  }
  var hasOstype: Bool {
    return _storage._ostype != nil
  }
  mutating func clearOstype() {
    _storage._ostype = nil
  }

  var processSerialNumber: Int32 {
    get {return _storage._processSerialNumber ?? 0}
    set {_uniqueStorage()._processSerialNumber = newValue}
  }
  var hasProcessSerialNumber: Bool {
    return _storage._processSerialNumber != nil
  }
  mutating func clearProcessSerialNumber() {
    _storage._processSerialNumber = nil
  }

  var point: Int32 {
    get {return _storage._point ?? 0}
    set {_uniqueStorage()._point = newValue}
  }
  var hasPoint: Bool {
    return _storage._point != nil
  }
  mutating func clearPoint() {
    _storage._point = nil
  }

  var rect: Int32 {
    get {return _storage._rect ?? 0}
    set {_uniqueStorage()._rect = newValue}
  }
  var hasRect: Bool {
    return _storage._rect != nil
  }
  mutating func clearRect() {
    _storage._rect = nil
  }

  var fixedPoint: Int32 {
    get {return _storage._fixedPoint ?? 0}
    set {_uniqueStorage()._fixedPoint = newValue}
  }
  var hasFixedPoint: Bool {
    return _storage._fixedPoint != nil
  }
  mutating func clearFixedPoint() {
    _storage._fixedPoint = nil
  }

  var fixedRect: Int32 {
    get {return _storage._fixedRect ?? 0}
    set {_uniqueStorage()._fixedRect = newValue}
  }
  var hasFixedRect: Bool {
    return _storage._fixedRect != nil
  }
  mutating func clearFixedRect() {
    _storage._fixedRect = nil
  }

  var style: Int32 {
    get {return _storage._style ?? 0}
    set {_uniqueStorage()._style = newValue}
  }
  var hasStyle: Bool {
    return _storage._style != nil
  }
  mutating func clearStyle() {
    _storage._style = nil
  }

  var styleParameter: Int32 {
    get {return _storage._styleParameter ?? 0}
    set {_uniqueStorage()._styleParameter = newValue}
  }
  var hasStyleParameter: Bool {
    return _storage._styleParameter != nil
  }
  mutating func clearStyleParameter() {
    _storage._styleParameter = nil
  }

  var styleField: Int32 {
    get {return _storage._styleField ?? 0}
    set {_uniqueStorage()._styleField = newValue}
  }
  var hasStyleField: Bool {
    return _storage._styleField != nil
  }
  mutating func clearStyleField() {
    _storage._styleField = nil
  }

  var timeScale: Int32 {
    get {return _storage._timeScale ?? 0}
    set {_uniqueStorage()._timeScale = newValue}
  }
  var hasTimeScale: Bool {
    return _storage._timeScale != nil
  }
  mutating func clearTimeScale() {
    _storage._timeScale = nil
  }

  var timeBase: Int32 {
    get {return _storage._timeBase ?? 0}
    set {_uniqueStorage()._timeBase = newValue}
  }
  var hasTimeBase: Bool {
    return _storage._timeBase != nil
  }
  mutating func clearTimeBase() {
    _storage._timeBase = nil
  }

  var timeRecord: Int32 {
    get {return _storage._timeRecord ?? 0}
    set {_uniqueStorage()._timeRecord = newValue}
  }
  var hasTimeRecord: Bool {
    return _storage._timeRecord != nil
  }
  mutating func clearTimeRecord() {
    _storage._timeRecord = nil
  }

  var jsonShouldBeOverriden: Int32 {
    get {return _storage._jsonShouldBeOverriden ?? 0}
    set {_uniqueStorage()._jsonShouldBeOverriden = newValue}
  }
  var hasJsonShouldBeOverriden: Bool {
    return _storage._jsonShouldBeOverriden != nil
  }
  mutating func clearJsonShouldBeOverriden() {
    _storage._jsonShouldBeOverriden = nil
  }

  var any: Int32 {
    get {return _storage._any ?? 0}
    set {_uniqueStorage()._any = newValue}
  }
  var hasAny: Bool {
    return _storage._any != nil
  }
  mutating func clearAny() {
    _storage._any = nil
  }

  var int32: Int32 {
    get {return _storage._int32 ?? 0}
    set {_uniqueStorage()._int32 = newValue}
  }
  var hasInt32: Bool {
    return _storage._int32 != nil
  }
  mutating func clearInt32() {
    _storage._int32 = nil
  }

  var int64: Int32 {
    get {return _storage._int64 ?? 0}
    set {_uniqueStorage()._int64 = newValue}
  }
  var hasInt64: Bool {
    return _storage._int64 != nil
  }
  mutating func clearInt64() {
    _storage._int64 = nil
  }

  var uint32: Int32 {
    get {return _storage._uint32 ?? 0}
    set {_uniqueStorage()._uint32 = newValue}
  }
  var hasUint32: Bool {
    return _storage._uint32 != nil
  }
  mutating func clearUint32() {
    _storage._uint32 = nil
  }

  var uint64: Int32 {
    get {return _storage._uint64 ?? 0}
    set {_uniqueStorage()._uint64 = newValue}
  }
  var hasUint64: Bool {
    return _storage._uint64 != nil
  }
  mutating func clearUint64() {
    _storage._uint64 = nil
  }

  var associatedtype_p: Int32 {
    get {return _storage._associatedtype_p ?? 0}
    set {_uniqueStorage()._associatedtype_p = newValue}
  }
  var hasAssociatedtype_p: Bool {
    return _storage._associatedtype_p != nil
  }
  mutating func clearAssociatedtype_p() {
    _storage._associatedtype_p = nil
  }

  var fileprivate_p: Int32 {
    get {return _storage._fileprivate_p ?? 0}
    set {_uniqueStorage()._fileprivate_p = newValue}
  }
  var hasFileprivate_p: Bool {
    return _storage._fileprivate_p != nil
  }
  mutating func clearFileprivate_p() {
    _storage._fileprivate_p = nil
  }

  var open_p: Int32 {
    get {return _storage._open_p ?? 0}
    set {_uniqueStorage()._open_p = newValue}
  }
  var hasOpen_p: Bool {
    return _storage._open_p != nil
  }
  mutating func clearOpen_p() {
    _storage._open_p = nil
  }

  var serializedData: Int32 {
    get {return _storage._serializedData ?? 0}
    set {_uniqueStorage()._serializedData = newValue}
  }
  var hasSerializedData: Bool {
    return _storage._serializedData != nil
  }
  mutating func clearSerializedData() {
    _storage._serializedData = nil
  }

  var hasSerializedData_p: Int32 {
    get {return _storage._hasSerializedData_p ?? 0}
    set {_uniqueStorage()._hasSerializedData_p = newValue}
  }
  var hasHasSerializedData_p: Bool {
    return _storage._hasSerializedData_p != nil
  }
  mutating func clearHasSerializedData_p() {
    _storage._hasSerializedData_p = nil
  }

  var clearSerializedData_p: Int32 {
    get {return _storage._clearSerializedData_p ?? 0}
    set {_uniqueStorage()._clearSerializedData_p = newValue}
  }
  var hasClearSerializedData_p: Bool {
    return _storage._clearSerializedData_p != nil
  }
  mutating func clearClearSerializedData_p() {
    _storage._clearSerializedData_p = nil
  }

  var jsonUtf8Data: Int32 {
    get {return _storage._jsonUtf8Data ?? 0}
    set {_uniqueStorage()._jsonUtf8Data = newValue}
  }
  var hasJsonUtf8Data: Bool {
    return _storage._jsonUtf8Data != nil
  }
  mutating func clearJsonUtf8Data() {
    _storage._jsonUtf8Data = nil
  }

  var jsonString: Int32 {
    get {return _storage._jsonString ?? 0}
    set {_uniqueStorage()._jsonString = newValue}
  }
  var hasJsonString: Bool {
    return _storage._jsonString != nil
  }
  mutating func clearJsonString() {
    _storage._jsonString = nil
  }

  var extension_p: Int32 {
    get {return _storage._extension_p ?? 0}
    set {_uniqueStorage()._extension_p = newValue}
  }
  var hasExtension_p: Bool {
    return _storage._extension_p != nil
  }
  mutating func clearExtension_p() {
    _storage._extension_p = nil
  }

  var extensions: Int32 {
    get {return _storage._extensions ?? 0}
    set {_uniqueStorage()._extensions = newValue}
  }
  var hasExtensions: Bool {
    return _storage._extensions != nil
  }
  mutating func clearExtensions() {
    _storage._extensions = nil
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._string)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._int)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._double)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._float)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._uint)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._hashValue_p)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._description_p)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._debugDescription_p)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._swift)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._unrecognized)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._class_p)
        case 12: try decoder.decodeSingularInt32Field(value: &_storage._deinit_p)
        case 13: try decoder.decodeSingularInt32Field(value: &_storage._enum_p)
        case 15: try decoder.decodeSingularInt32Field(value: &_storage._func_p)
        case 16: try decoder.decodeSingularInt32Field(value: &_storage._import_p)
        case 17: try decoder.decodeSingularInt32Field(value: &_storage._init_p)
        case 18: try decoder.decodeSingularInt32Field(value: &_storage._inout_p)
        case 19: try decoder.decodeSingularInt32Field(value: &_storage._internal_p)
        case 20: try decoder.decodeSingularInt32Field(value: &_storage._let_p)
        case 21: try decoder.decodeSingularInt32Field(value: &_storage._operator_p)
        case 22: try decoder.decodeSingularInt32Field(value: &_storage._private_p)
        case 23: try decoder.decodeSingularInt32Field(value: &_storage._protocol_p)
        case 24: try decoder.decodeSingularInt32Field(value: &_storage._public_p)
        case 25: try decoder.decodeSingularInt32Field(value: &_storage._static_p)
        case 26: try decoder.decodeSingularInt32Field(value: &_storage._struct_p)
        case 27: try decoder.decodeSingularInt32Field(value: &_storage._subscript_p)
        case 28: try decoder.decodeSingularInt32Field(value: &_storage._typealias_p)
        case 29: try decoder.decodeSingularInt32Field(value: &_storage._var_p)
        case 30: try decoder.decodeSingularInt32Field(value: &_storage._break_p)
        case 31: try decoder.decodeSingularInt32Field(value: &_storage._case_p)
        case 32: try decoder.decodeSingularInt32Field(value: &_storage._continue_p)
        case 33: try decoder.decodeSingularInt32Field(value: &_storage._default_p)
        case 34: try decoder.decodeSingularInt32Field(value: &_storage._defer_p)
        case 35: try decoder.decodeSingularInt32Field(value: &_storage._do_p)
        case 36: try decoder.decodeSingularInt32Field(value: &_storage._else_p)
        case 37: try decoder.decodeSingularInt32Field(value: &_storage._fallthrough_p)
        case 38: try decoder.decodeSingularInt32Field(value: &_storage._for_p)
        case 39: try decoder.decodeSingularInt32Field(value: &_storage._guard_p)
        case 40: try decoder.decodeSingularInt32Field(value: &_storage._if_p)
        case 41: try decoder.decodeSingularInt32Field(value: &_storage._in_p)
        case 42: try decoder.decodeSingularInt32Field(value: &_storage._repeat_p)
        case 43: try decoder.decodeSingularInt32Field(value: &_storage._return_p)
        case 44: try decoder.decodeSingularInt32Field(value: &_storage._switch_p)
        case 45: try decoder.decodeSingularInt32Field(value: &_storage._where_p)
        case 46: try decoder.decodeSingularInt32Field(value: &_storage._while_p)
        case 47: try decoder.decodeSingularInt32Field(value: &_storage._as_p)
        case 48: try decoder.decodeSingularInt32Field(value: &_storage._catch_p)
        case 49: try decoder.decodeSingularInt32Field(value: &_storage._dynamicType_p)
        case 50: try decoder.decodeSingularInt32Field(value: &_storage._false_p)
        case 51: try decoder.decodeSingularInt32Field(value: &_storage._is_p)
        case 52: try decoder.decodeSingularInt32Field(value: &_storage._nil_p)
        case 53: try decoder.decodeSingularInt32Field(value: &_storage._rethrows_p)
        case 54: try decoder.decodeSingularInt32Field(value: &_storage._super_p)
        case 55: try decoder.decodeSingularInt32Field(value: &_storage._self_p)
        case 57: try decoder.decodeSingularInt32Field(value: &_storage._throw_p)
        case 58: try decoder.decodeSingularInt32Field(value: &_storage._throws_p)
        case 59: try decoder.decodeSingularInt32Field(value: &_storage._true_p)
        case 60: try decoder.decodeSingularInt32Field(value: &_storage._try_p)
        case 61: try decoder.decodeSingularInt32Field(value: &_storage.__Column__)
        case 62: try decoder.decodeSingularInt32Field(value: &_storage.__File__)
        case 63: try decoder.decodeSingularInt32Field(value: &_storage.__Function__)
        case 64: try decoder.decodeSingularInt32Field(value: &_storage.__Line__)
        case 65: try decoder.decodeSingularInt32Field(value: &_storage.____)
        case 66: try decoder.decodeSingularInt32Field(value: &_storage._associativity)
        case 67: try decoder.decodeSingularInt32Field(value: &_storage._convenience)
        case 68: try decoder.decodeSingularInt32Field(value: &_storage._dynamic)
        case 69: try decoder.decodeSingularInt32Field(value: &_storage._didSet)
        case 70: try decoder.decodeSingularInt32Field(value: &_storage._final)
        case 71: try decoder.decodeSingularInt32Field(value: &_storage._get)
        case 72: try decoder.decodeSingularInt32Field(value: &_storage._infix)
        case 73: try decoder.decodeSingularInt32Field(value: &_storage._indirect)
        case 74: try decoder.decodeSingularInt32Field(value: &_storage._lazy)
        case 75: try decoder.decodeSingularInt32Field(value: &_storage._left)
        case 76: try decoder.decodeSingularInt32Field(value: &_storage._mutating)
        case 77: try decoder.decodeSingularInt32Field(value: &_storage._none)
        case 78: try decoder.decodeSingularInt32Field(value: &_storage._nonmutating)
        case 79: try decoder.decodeSingularInt32Field(value: &_storage._optional)
        case 80: try decoder.decodeSingularInt32Field(value: &_storage._override)
        case 81: try decoder.decodeSingularInt32Field(value: &_storage._postfix)
        case 82: try decoder.decodeSingularInt32Field(value: &_storage._precedence)
        case 83: try decoder.decodeSingularInt32Field(value: &_storage._prefix)
        case 85: try decoder.decodeSingularInt32Field(value: &_storage._required)
        case 86: try decoder.decodeSingularInt32Field(value: &_storage._right)
        case 87: try decoder.decodeSingularInt32Field(value: &_storage._set)
        case 88: try decoder.decodeSingularInt32Field(value: &_storage._type)
        case 89: try decoder.decodeSingularInt32Field(value: &_storage._unowned)
        case 90: try decoder.decodeSingularInt32Field(value: &_storage._weak)
        case 91: try decoder.decodeSingularInt32Field(value: &_storage._willSet)
        case 92: try decoder.decodeSingularInt32Field(value: &_storage._id)
        case 93: try decoder.decodeSingularInt32Field(value: &_storage._cmd)
        case 96: try decoder.decodeSingularInt32Field(value: &_storage._out)
        case 98: try decoder.decodeSingularInt32Field(value: &_storage._bycopy)
        case 99: try decoder.decodeSingularInt32Field(value: &_storage._byref)
        case 100: try decoder.decodeSingularInt32Field(value: &_storage._oneway)
        case 102: try decoder.decodeSingularInt32Field(value: &_storage._and)
        case 103: try decoder.decodeSingularInt32Field(value: &_storage._andEq)
        case 104: try decoder.decodeSingularInt32Field(value: &_storage._alignas)
        case 105: try decoder.decodeSingularInt32Field(value: &_storage._alignof)
        case 106: try decoder.decodeSingularInt32Field(value: &_storage._asm)
        case 107: try decoder.decodeSingularInt32Field(value: &_storage._auto)
        case 108: try decoder.decodeSingularInt32Field(value: &_storage._bitand)
        case 109: try decoder.decodeSingularInt32Field(value: &_storage._bitor)
        case 110: try decoder.decodeSingularInt32Field(value: &_storage._bool)
        case 114: try decoder.decodeSingularInt32Field(value: &_storage._char)
        case 115: try decoder.decodeSingularInt32Field(value: &_storage._char16T)
        case 116: try decoder.decodeSingularInt32Field(value: &_storage._char32T)
        case 118: try decoder.decodeSingularInt32Field(value: &_storage._compl)
        case 119: try decoder.decodeSingularInt32Field(value: &_storage._const)
        case 120: try decoder.decodeSingularInt32Field(value: &_storage._constexpr)
        case 121: try decoder.decodeSingularInt32Field(value: &_storage._constCast)
        case 123: try decoder.decodeSingularInt32Field(value: &_storage._decltype)
        case 125: try decoder.decodeSingularInt32Field(value: &_storage._delete)
        case 127: try decoder.decodeSingularInt32Field(value: &_storage._dynamicCast)
        case 130: try decoder.decodeSingularInt32Field(value: &_storage._explicit)
        case 131: try decoder.decodeSingularInt32Field(value: &_storage._export)
        case 132: try decoder.decodeSingularInt32Field(value: &_storage._extern)
        case 136: try decoder.decodeSingularInt32Field(value: &_storage._friend)
        case 137: try decoder.decodeSingularInt32Field(value: &_storage._goto)
        case 139: try decoder.decodeSingularInt32Field(value: &_storage._inline)
        case 141: try decoder.decodeSingularInt32Field(value: &_storage._long)
        case 142: try decoder.decodeSingularInt32Field(value: &_storage._mutable)
        case 143: try decoder.decodeSingularInt32Field(value: &_storage._namespace)
        case 144: try decoder.decodeSingularInt32Field(value: &_storage._new)
        case 145: try decoder.decodeSingularInt32Field(value: &_storage._noexcept)
        case 146: try decoder.decodeSingularInt32Field(value: &_storage._not)
        case 147: try decoder.decodeSingularInt32Field(value: &_storage._notEq)
        case 148: try decoder.decodeSingularInt32Field(value: &_storage._nullptr)
        case 150: try decoder.decodeSingularInt32Field(value: &_storage._or)
        case 151: try decoder.decodeSingularInt32Field(value: &_storage._orEq)
        case 153: try decoder.decodeSingularInt32Field(value: &_storage._protected)
        case 155: try decoder.decodeSingularInt32Field(value: &_storage._register)
        case 156: try decoder.decodeSingularInt32Field(value: &_storage._reinterpretCast)
        case 158: try decoder.decodeSingularInt32Field(value: &_storage._short)
        case 159: try decoder.decodeSingularInt32Field(value: &_storage._signed)
        case 160: try decoder.decodeSingularInt32Field(value: &_storage._sizeof)
        case 162: try decoder.decodeSingularInt32Field(value: &_storage._staticAssert)
        case 163: try decoder.decodeSingularInt32Field(value: &_storage._staticCast)
        case 166: try decoder.decodeSingularInt32Field(value: &_storage._template)
        case 167: try decoder.decodeSingularInt32Field(value: &_storage._this)
        case 168: try decoder.decodeSingularInt32Field(value: &_storage._threadLocal)
        case 172: try decoder.decodeSingularInt32Field(value: &_storage._typedef)
        case 173: try decoder.decodeSingularInt32Field(value: &_storage._typeid)
        case 174: try decoder.decodeSingularInt32Field(value: &_storage._typename)
        case 175: try decoder.decodeSingularInt32Field(value: &_storage._union)
        case 176: try decoder.decodeSingularInt32Field(value: &_storage._unsigned)
        case 177: try decoder.decodeSingularInt32Field(value: &_storage._using)
        case 178: try decoder.decodeSingularInt32Field(value: &_storage._virtual)
        case 179: try decoder.decodeSingularInt32Field(value: &_storage._void)
        case 180: try decoder.decodeSingularInt32Field(value: &_storage._volatile)
        case 181: try decoder.decodeSingularInt32Field(value: &_storage._wcharT)
        case 183: try decoder.decodeSingularInt32Field(value: &_storage._xor)
        case 184: try decoder.decodeSingularInt32Field(value: &_storage._xorEq)
        case 185: try decoder.decodeSingularInt32Field(value: &_storage._restrict)
        case 186: try decoder.decodeSingularInt32Field(value: &_storage._category)
        case 187: try decoder.decodeSingularInt32Field(value: &_storage._ivar)
        case 188: try decoder.decodeSingularInt32Field(value: &_storage._method)
        case 192: try decoder.decodeSingularInt32Field(value: &_storage._finalize)
        case 193: try decoder.decodeSingularInt32Field(value: &_storage._hash_p)
        case 194: try decoder.decodeSingularInt32Field(value: &_storage._dealloc)
        case 197: try decoder.decodeSingularInt32Field(value: &_storage._superclass)
        case 198: try decoder.decodeSingularInt32Field(value: &_storage._retain)
        case 199: try decoder.decodeSingularInt32Field(value: &_storage._release)
        case 200: try decoder.decodeSingularInt32Field(value: &_storage._autorelease)
        case 201: try decoder.decodeSingularInt32Field(value: &_storage._retainCount)
        case 202: try decoder.decodeSingularInt32Field(value: &_storage._zone)
        case 203: try decoder.decodeSingularInt32Field(value: &_storage._isProxy)
        case 204: try decoder.decodeSingularInt32Field(value: &_storage._copy)
        case 205: try decoder.decodeSingularInt32Field(value: &_storage._mutableCopy)
        case 206: try decoder.decodeSingularInt32Field(value: &_storage._classForCoder)
        case 207: try decoder.decodeSingularInt32Field(value: &_storage._clear_p)
        case 208: try decoder.decodeSingularInt32Field(value: &_storage._data)
        case 209: try decoder.decodeSingularInt32Field(value: &_storage._delimitedData)
        case 210: try decoder.decodeSingularInt32Field(value: &_storage._descriptor)
        case 211: try decoder.decodeSingularInt32Field(value: &_storage._extensionRegistry)
        case 212: try decoder.decodeSingularInt32Field(value: &_storage._extensionsCurrentlySet)
        case 213: try decoder.decodeSingularInt32Field(value: &_storage._isInitialized_p)
        case 214: try decoder.decodeSingularInt32Field(value: &_storage._serializedSize)
        case 215: try decoder.decodeSingularInt32Field(value: &_storage._sortedExtensionsInUse)
        case 216: try decoder.decodeSingularInt32Field(value: &_storage._unknownFields_p)
        case 217: try decoder.decodeSingularInt32Field(value: &_storage._fixed)
        case 218: try decoder.decodeSingularInt32Field(value: &_storage._fract)
        case 219: try decoder.decodeSingularInt32Field(value: &_storage._size)
        case 220: try decoder.decodeSingularInt32Field(value: &_storage._logicalAddress)
        case 221: try decoder.decodeSingularInt32Field(value: &_storage._physicalAddress)
        case 222: try decoder.decodeSingularInt32Field(value: &_storage._byteCount)
        case 223: try decoder.decodeSingularInt32Field(value: &_storage._byteOffset)
        case 224: try decoder.decodeSingularInt32Field(value: &_storage._duration)
        case 225: try decoder.decodeSingularInt32Field(value: &_storage._absoluteTime)
        case 226: try decoder.decodeSingularInt32Field(value: &_storage._optionBits)
        case 227: try decoder.decodeSingularInt32Field(value: &_storage._itemCount)
        case 228: try decoder.decodeSingularInt32Field(value: &_storage._pbversion)
        case 229: try decoder.decodeSingularInt32Field(value: &_storage._scriptCode)
        case 230: try decoder.decodeSingularInt32Field(value: &_storage._langCode)
        case 231: try decoder.decodeSingularInt32Field(value: &_storage._regionCode)
        case 232: try decoder.decodeSingularInt32Field(value: &_storage._ostype)
        case 233: try decoder.decodeSingularInt32Field(value: &_storage._processSerialNumber)
        case 234: try decoder.decodeSingularInt32Field(value: &_storage._point)
        case 235: try decoder.decodeSingularInt32Field(value: &_storage._rect)
        case 236: try decoder.decodeSingularInt32Field(value: &_storage._fixedPoint)
        case 237: try decoder.decodeSingularInt32Field(value: &_storage._fixedRect)
        case 238: try decoder.decodeSingularInt32Field(value: &_storage._style)
        case 239: try decoder.decodeSingularInt32Field(value: &_storage._styleParameter)
        case 240: try decoder.decodeSingularInt32Field(value: &_storage._styleField)
        case 241: try decoder.decodeSingularInt32Field(value: &_storage._timeScale)
        case 242: try decoder.decodeSingularInt32Field(value: &_storage._timeBase)
        case 243: try decoder.decodeSingularInt32Field(value: &_storage._timeRecord)
        case 244: try decoder.decodeSingularInt32Field(value: &_storage._jsonShouldBeOverriden)
        case 245: try decoder.decodeSingularInt32Field(value: &_storage._any)
        case 246: try decoder.decodeSingularInt32Field(value: &_storage._int32)
        case 247: try decoder.decodeSingularInt32Field(value: &_storage._int64)
        case 250: try decoder.decodeSingularInt32Field(value: &_storage._uint32)
        case 251: try decoder.decodeSingularInt32Field(value: &_storage._uint64)
        case 252: try decoder.decodeSingularInt32Field(value: &_storage._associatedtype_p)
        case 253: try decoder.decodeSingularInt32Field(value: &_storage._fileprivate_p)
        case 254: try decoder.decodeSingularInt32Field(value: &_storage._open_p)
        case 255: try decoder.decodeSingularInt32Field(value: &_storage._serializedData)
        case 256: try decoder.decodeSingularInt32Field(value: &_storage._hasSerializedData_p)
        case 257: try decoder.decodeSingularInt32Field(value: &_storage._clearSerializedData_p)
        case 258: try decoder.decodeSingularInt32Field(value: &_storage._jsonUtf8Data)
        case 259: try decoder.decodeSingularInt32Field(value: &_storage._jsonString)
        case 260: try decoder.decodeSingularInt32Field(value: &_storage._extension_p)
        case 261: try decoder.decodeSingularInt32Field(value: &_storage._extensions)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._string {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._int {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._double {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._float {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._uint {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._hashValue_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._description_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._debugDescription_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._swift {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._unrecognized {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._class_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
      }
      if let v = _storage._deinit_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
      }
      if let v = _storage._enum_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      }
      if let v = _storage._func_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 15)
      }
      if let v = _storage._import_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 16)
      }
      if let v = _storage._init_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
      }
      if let v = _storage._inout_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 18)
      }
      if let v = _storage._internal_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 19)
      }
      if let v = _storage._let_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 20)
      }
      if let v = _storage._operator_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
      }
      if let v = _storage._private_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 22)
      }
      if let v = _storage._protocol_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 23)
      }
      if let v = _storage._public_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 24)
      }
      if let v = _storage._static_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 25)
      }
      if let v = _storage._struct_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 26)
      }
      if let v = _storage._subscript_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 27)
      }
      if let v = _storage._typealias_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 28)
      }
      if let v = _storage._var_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 29)
      }
      if let v = _storage._break_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 30)
      }
      if let v = _storage._case_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 31)
      }
      if let v = _storage._continue_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 32)
      }
      if let v = _storage._default_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 33)
      }
      if let v = _storage._defer_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 34)
      }
      if let v = _storage._do_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 35)
      }
      if let v = _storage._else_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 36)
      }
      if let v = _storage._fallthrough_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 37)
      }
      if let v = _storage._for_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 38)
      }
      if let v = _storage._guard_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 39)
      }
      if let v = _storage._if_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 40)
      }
      if let v = _storage._in_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 41)
      }
      if let v = _storage._repeat_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 42)
      }
      if let v = _storage._return_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 43)
      }
      if let v = _storage._switch_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 44)
      }
      if let v = _storage._where_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 45)
      }
      if let v = _storage._while_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 46)
      }
      if let v = _storage._as_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 47)
      }
      if let v = _storage._catch_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 48)
      }
      if let v = _storage._dynamicType_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 49)
      }
      if let v = _storage._false_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 50)
      }
      if let v = _storage._is_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 51)
      }
      if let v = _storage._nil_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 52)
      }
      if let v = _storage._rethrows_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 53)
      }
      if let v = _storage._super_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 54)
      }
      if let v = _storage._self_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 55)
      }
      if let v = _storage._throw_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 57)
      }
      if let v = _storage._throws_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 58)
      }
      if let v = _storage._true_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 59)
      }
      if let v = _storage._try_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 60)
      }
      if let v = _storage.__Column__ {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 61)
      }
      if let v = _storage.__File__ {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 62)
      }
      if let v = _storage.__Function__ {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 63)
      }
      if let v = _storage.__Line__ {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 64)
      }
      if let v = _storage.____ {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 65)
      }
      if let v = _storage._associativity {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 66)
      }
      if let v = _storage._convenience {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 67)
      }
      if let v = _storage._dynamic {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 68)
      }
      if let v = _storage._didSet {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 69)
      }
      if let v = _storage._final {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 70)
      }
      if let v = _storage._get {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 71)
      }
      if let v = _storage._infix {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 72)
      }
      if let v = _storage._indirect {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 73)
      }
      if let v = _storage._lazy {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 74)
      }
      if let v = _storage._left {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 75)
      }
      if let v = _storage._mutating {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 76)
      }
      if let v = _storage._none {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 77)
      }
      if let v = _storage._nonmutating {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 78)
      }
      if let v = _storage._optional {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 79)
      }
      if let v = _storage._override {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 80)
      }
      if let v = _storage._postfix {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 81)
      }
      if let v = _storage._precedence {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 82)
      }
      if let v = _storage._prefix {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 83)
      }
      if let v = _storage._required {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 85)
      }
      if let v = _storage._right {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 86)
      }
      if let v = _storage._set {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 87)
      }
      if let v = _storage._type {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 88)
      }
      if let v = _storage._unowned {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 89)
      }
      if let v = _storage._weak {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 90)
      }
      if let v = _storage._willSet {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 91)
      }
      if let v = _storage._id {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 92)
      }
      if let v = _storage._cmd {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 93)
      }
      if let v = _storage._out {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 96)
      }
      if let v = _storage._bycopy {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 98)
      }
      if let v = _storage._byref {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 99)
      }
      if let v = _storage._oneway {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 100)
      }
      if let v = _storage._and {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 102)
      }
      if let v = _storage._andEq {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 103)
      }
      if let v = _storage._alignas {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 104)
      }
      if let v = _storage._alignof {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 105)
      }
      if let v = _storage._asm {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 106)
      }
      if let v = _storage._auto {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 107)
      }
      if let v = _storage._bitand {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 108)
      }
      if let v = _storage._bitor {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 109)
      }
      if let v = _storage._bool {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 110)
      }
      if let v = _storage._char {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 114)
      }
      if let v = _storage._char16T {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 115)
      }
      if let v = _storage._char32T {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 116)
      }
      if let v = _storage._compl {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 118)
      }
      if let v = _storage._const {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 119)
      }
      if let v = _storage._constexpr {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 120)
      }
      if let v = _storage._constCast {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 121)
      }
      if let v = _storage._decltype {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 123)
      }
      if let v = _storage._delete {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 125)
      }
      if let v = _storage._dynamicCast {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 127)
      }
      if let v = _storage._explicit {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 130)
      }
      if let v = _storage._export {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 131)
      }
      if let v = _storage._extern {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 132)
      }
      if let v = _storage._friend {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 136)
      }
      if let v = _storage._goto {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 137)
      }
      if let v = _storage._inline {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 139)
      }
      if let v = _storage._long {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 141)
      }
      if let v = _storage._mutable {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 142)
      }
      if let v = _storage._namespace {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 143)
      }
      if let v = _storage._new {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 144)
      }
      if let v = _storage._noexcept {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 145)
      }
      if let v = _storage._not {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 146)
      }
      if let v = _storage._notEq {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 147)
      }
      if let v = _storage._nullptr {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 148)
      }
      if let v = _storage._or {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 150)
      }
      if let v = _storage._orEq {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 151)
      }
      if let v = _storage._protected {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 153)
      }
      if let v = _storage._register {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 155)
      }
      if let v = _storage._reinterpretCast {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 156)
      }
      if let v = _storage._short {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 158)
      }
      if let v = _storage._signed {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 159)
      }
      if let v = _storage._sizeof {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 160)
      }
      if let v = _storage._staticAssert {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 162)
      }
      if let v = _storage._staticCast {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 163)
      }
      if let v = _storage._template {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 166)
      }
      if let v = _storage._this {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 167)
      }
      if let v = _storage._threadLocal {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 168)
      }
      if let v = _storage._typedef {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 172)
      }
      if let v = _storage._typeid {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 173)
      }
      if let v = _storage._typename {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 174)
      }
      if let v = _storage._union {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 175)
      }
      if let v = _storage._unsigned {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 176)
      }
      if let v = _storage._using {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 177)
      }
      if let v = _storage._virtual {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 178)
      }
      if let v = _storage._void {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 179)
      }
      if let v = _storage._volatile {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 180)
      }
      if let v = _storage._wcharT {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 181)
      }
      if let v = _storage._xor {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 183)
      }
      if let v = _storage._xorEq {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 184)
      }
      if let v = _storage._restrict {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 185)
      }
      if let v = _storage._category {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 186)
      }
      if let v = _storage._ivar {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 187)
      }
      if let v = _storage._method {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 188)
      }
      if let v = _storage._finalize {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 192)
      }
      if let v = _storage._hash_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 193)
      }
      if let v = _storage._dealloc {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 194)
      }
      if let v = _storage._superclass {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 197)
      }
      if let v = _storage._retain {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 198)
      }
      if let v = _storage._release {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 199)
      }
      if let v = _storage._autorelease {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 200)
      }
      if let v = _storage._retainCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 201)
      }
      if let v = _storage._zone {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 202)
      }
      if let v = _storage._isProxy {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 203)
      }
      if let v = _storage._copy {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 204)
      }
      if let v = _storage._mutableCopy {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 205)
      }
      if let v = _storage._classForCoder {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 206)
      }
      if let v = _storage._clear_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 207)
      }
      if let v = _storage._data {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 208)
      }
      if let v = _storage._delimitedData {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 209)
      }
      if let v = _storage._descriptor {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 210)
      }
      if let v = _storage._extensionRegistry {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 211)
      }
      if let v = _storage._extensionsCurrentlySet {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 212)
      }
      if let v = _storage._isInitialized_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 213)
      }
      if let v = _storage._serializedSize {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 214)
      }
      if let v = _storage._sortedExtensionsInUse {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 215)
      }
      if let v = _storage._unknownFields_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 216)
      }
      if let v = _storage._fixed {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 217)
      }
      if let v = _storage._fract {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 218)
      }
      if let v = _storage._size {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 219)
      }
      if let v = _storage._logicalAddress {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 220)
      }
      if let v = _storage._physicalAddress {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 221)
      }
      if let v = _storage._byteCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 222)
      }
      if let v = _storage._byteOffset {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 223)
      }
      if let v = _storage._duration {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 224)
      }
      if let v = _storage._absoluteTime {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 225)
      }
      if let v = _storage._optionBits {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 226)
      }
      if let v = _storage._itemCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 227)
      }
      if let v = _storage._pbversion {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 228)
      }
      if let v = _storage._scriptCode {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 229)
      }
      if let v = _storage._langCode {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 230)
      }
      if let v = _storage._regionCode {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 231)
      }
      if let v = _storage._ostype {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 232)
      }
      if let v = _storage._processSerialNumber {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 233)
      }
      if let v = _storage._point {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 234)
      }
      if let v = _storage._rect {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 235)
      }
      if let v = _storage._fixedPoint {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 236)
      }
      if let v = _storage._fixedRect {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 237)
      }
      if let v = _storage._style {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 238)
      }
      if let v = _storage._styleParameter {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 239)
      }
      if let v = _storage._styleField {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 240)
      }
      if let v = _storage._timeScale {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 241)
      }
      if let v = _storage._timeBase {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 242)
      }
      if let v = _storage._timeRecord {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 243)
      }
      if let v = _storage._jsonShouldBeOverriden {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 244)
      }
      if let v = _storage._any {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 245)
      }
      if let v = _storage._int32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 246)
      }
      if let v = _storage._int64 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 247)
      }
      if let v = _storage._uint32 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 250)
      }
      if let v = _storage._uint64 {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 251)
      }
      if let v = _storage._associatedtype_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 252)
      }
      if let v = _storage._fileprivate_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 253)
      }
      if let v = _storage._open_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 254)
      }
      if let v = _storage._serializedData {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 255)
      }
      if let v = _storage._hasSerializedData_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 256)
      }
      if let v = _storage._clearSerializedData_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 257)
      }
      if let v = _storage._jsonUtf8Data {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 258)
      }
      if let v = _storage._jsonString {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 259)
      }
      if let v = _storage._extension_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 260)
      }
      if let v = _storage._extensions {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 261)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct SwiftUnittest_Names_MessageNames: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".MessageNames"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct StringMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".String"

    fileprivate var _string: Int32? = nil
    var string: Int32 {
      get {return _string ?? 0}
      set {_string = newValue}
    }
    var hasString: Bool {
      return self._string != nil
    }
    mutating func clearString() {
      self._string = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._string)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._string {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ProtocolMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Protocol"

    fileprivate var _protocol_p: Int32? = nil
    var protocol_p: Int32 {
      get {return _protocol_p ?? 0}
      set {_protocol_p = newValue}
    }
    var hasProtocol_p: Bool {
      return self._protocol_p != nil
    }
    mutating func clearProtocol_p() {
      self._protocol_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._protocol_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._protocol_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct IntMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Int"

    fileprivate var _int: Int32? = nil
    var int: Int32 {
      get {return _int ?? 0}
      set {_int = newValue}
    }
    var hasInt: Bool {
      return self._int != nil
    }
    mutating func clearInt() {
      self._int = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._int)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._int {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct DoubleMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Double"

    fileprivate var _double: Int32? = nil
    var double: Int32 {
      get {return _double ?? 0}
      set {_double = newValue}
    }
    var hasDouble: Bool {
      return self._double != nil
    }
    mutating func clearDouble() {
      self._double = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._double)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._double {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct FloatMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Float"

    fileprivate var _float: Int32? = nil
    var float: Int32 {
      get {return _float ?? 0}
      set {_float = newValue}
    }
    var hasFloat: Bool {
      return self._float != nil
    }
    mutating func clearFloat() {
      self._float = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._float)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._float {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct UIntMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".UInt"

    fileprivate var _uint: Int32? = nil
    var uint: Int32 {
      get {return _uint ?? 0}
      set {_uint = newValue}
    }
    var hasUint: Bool {
      return self._uint != nil
    }
    mutating func clearUint() {
      self._uint = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._uint)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._uint {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct hashValueMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".hashValue"

    fileprivate var _hashValue_p: Int32? = nil
    var hashValue_p: Int32 {
      get {return _hashValue_p ?? 0}
      set {_hashValue_p = newValue}
    }
    var hasHashValue_p: Bool {
      return self._hashValue_p != nil
    }
    mutating func clearHashValue_p() {
      self._hashValue_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._hashValue_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._hashValue_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct descriptionMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".description"

    fileprivate var _description_p: Int32? = nil
    var description_p: Int32 {
      get {return _description_p ?? 0}
      set {_description_p = newValue}
    }
    var hasDescription_p: Bool {
      return self._description_p != nil
    }
    mutating func clearDescription_p() {
      self._description_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._description_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._description_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct debugDescriptionMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".debugDescription"

    fileprivate var _debugDescription_p: Int32? = nil
    var debugDescription_p: Int32 {
      get {return _debugDescription_p ?? 0}
      set {_debugDescription_p = newValue}
    }
    var hasDebugDescription_p: Bool {
      return self._debugDescription_p != nil
    }
    mutating func clearDebugDescription_p() {
      self._debugDescription_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._debugDescription_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._debugDescription_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Swift: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Swift"

    fileprivate var _swift: Int32? = nil
    var swift: Int32 {
      get {return _swift ?? 0}
      set {_swift = newValue}
    }
    var hasSwift: Bool {
      return self._swift != nil
    }
    mutating func clearSwift() {
      self._swift = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._swift)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._swift {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct UNRECOGNIZED: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".UNRECOGNIZED"

    fileprivate var _unrecognized: Int32? = nil
    var unrecognized: Int32 {
      get {return _unrecognized ?? 0}
      set {_unrecognized = newValue}
    }
    var hasUnrecognized: Bool {
      return self._unrecognized != nil
    }
    mutating func clearUnrecognized() {
      self._unrecognized = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._unrecognized)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._unrecognized {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct classMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".class"

    fileprivate var _class_p: Int32? = nil
    var class_p: Int32 {
      get {return _class_p ?? 0}
      set {_class_p = newValue}
    }
    var hasClass_p: Bool {
      return self._class_p != nil
    }
    mutating func clearClass_p() {
      self._class_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._class_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._class_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct deinitMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".deinit"

    fileprivate var _deinit_p: Int32? = nil
    var deinit_p: Int32 {
      get {return _deinit_p ?? 0}
      set {_deinit_p = newValue}
    }
    var hasDeinit_p: Bool {
      return self._deinit_p != nil
    }
    mutating func clearDeinit_p() {
      self._deinit_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._deinit_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._deinit_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct enumMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".enum"

    fileprivate var _enum_p: Int32? = nil
    var enum_p: Int32 {
      get {return _enum_p ?? 0}
      set {_enum_p = newValue}
    }
    var hasEnum_p: Bool {
      return self._enum_p != nil
    }
    mutating func clearEnum_p() {
      self._enum_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._enum_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._enum_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct extensionMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".extension"

    fileprivate var _extension_p: Int32? = nil
    var extension_p: Int32 {
      get {return _extension_p ?? 0}
      set {_extension_p = newValue}
    }
    var hasExtension_p: Bool {
      return self._extension_p != nil
    }
    mutating func clearExtension_p() {
      self._extension_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._extension_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._extension_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct funcMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".func"

    fileprivate var _func_p: Int32? = nil
    var func_p: Int32 {
      get {return _func_p ?? 0}
      set {_func_p = newValue}
    }
    var hasFunc_p: Bool {
      return self._func_p != nil
    }
    mutating func clearFunc_p() {
      self._func_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._func_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._func_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct importMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".import"

    fileprivate var _import_p: Int32? = nil
    var import_p: Int32 {
      get {return _import_p ?? 0}
      set {_import_p = newValue}
    }
    var hasImport_p: Bool {
      return self._import_p != nil
    }
    mutating func clearImport_p() {
      self._import_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._import_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._import_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct initMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".init"

    fileprivate var _init_p: Int32? = nil
    var init_p: Int32 {
      get {return _init_p ?? 0}
      set {_init_p = newValue}
    }
    var hasInit_p: Bool {
      return self._init_p != nil
    }
    mutating func clearInit_p() {
      self._init_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._init_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._init_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct inoutMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".inout"

    fileprivate var _inout_p: Int32? = nil
    var inout_p: Int32 {
      get {return _inout_p ?? 0}
      set {_inout_p = newValue}
    }
    var hasInout_p: Bool {
      return self._inout_p != nil
    }
    mutating func clearInout_p() {
      self._inout_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._inout_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._inout_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct internalMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".internal"

    fileprivate var _internal_p: Int32? = nil
    var internal_p: Int32 {
      get {return _internal_p ?? 0}
      set {_internal_p = newValue}
    }
    var hasInternal_p: Bool {
      return self._internal_p != nil
    }
    mutating func clearInternal_p() {
      self._internal_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._internal_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._internal_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct letMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".let"

    fileprivate var _let_p: Int32? = nil
    var let_p: Int32 {
      get {return _let_p ?? 0}
      set {_let_p = newValue}
    }
    var hasLet_p: Bool {
      return self._let_p != nil
    }
    mutating func clearLet_p() {
      self._let_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._let_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._let_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct operatorMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".operator"

    fileprivate var _operator_p: Int32? = nil
    var operator_p: Int32 {
      get {return _operator_p ?? 0}
      set {_operator_p = newValue}
    }
    var hasOperator_p: Bool {
      return self._operator_p != nil
    }
    mutating func clearOperator_p() {
      self._operator_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._operator_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._operator_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct privateMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".private"

    fileprivate var _private_p: Int32? = nil
    var private_p: Int32 {
      get {return _private_p ?? 0}
      set {_private_p = newValue}
    }
    var hasPrivate_p: Bool {
      return self._private_p != nil
    }
    mutating func clearPrivate_p() {
      self._private_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._private_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._private_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct protocolMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".protocol"

    fileprivate var _protocol_p: Int32? = nil
    var protocol_p: Int32 {
      get {return _protocol_p ?? 0}
      set {_protocol_p = newValue}
    }
    var hasProtocol_p: Bool {
      return self._protocol_p != nil
    }
    mutating func clearProtocol_p() {
      self._protocol_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._protocol_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._protocol_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct publicMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".public"

    fileprivate var _public_p: Int32? = nil
    var public_p: Int32 {
      get {return _public_p ?? 0}
      set {_public_p = newValue}
    }
    var hasPublic_p: Bool {
      return self._public_p != nil
    }
    mutating func clearPublic_p() {
      self._public_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._public_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._public_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct staticMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".static"

    fileprivate var _static_p: Int32? = nil
    var static_p: Int32 {
      get {return _static_p ?? 0}
      set {_static_p = newValue}
    }
    var hasStatic_p: Bool {
      return self._static_p != nil
    }
    mutating func clearStatic_p() {
      self._static_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._static_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._static_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct structMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".struct"

    fileprivate var _struct_p: Int32? = nil
    var struct_p: Int32 {
      get {return _struct_p ?? 0}
      set {_struct_p = newValue}
    }
    var hasStruct_p: Bool {
      return self._struct_p != nil
    }
    mutating func clearStruct_p() {
      self._struct_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._struct_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._struct_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct subscriptMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".subscript"

    fileprivate var _subscript_p: Int32? = nil
    var subscript_p: Int32 {
      get {return _subscript_p ?? 0}
      set {_subscript_p = newValue}
    }
    var hasSubscript_p: Bool {
      return self._subscript_p != nil
    }
    mutating func clearSubscript_p() {
      self._subscript_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._subscript_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._subscript_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct typealiasMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".typealias"

    fileprivate var _typealias_p: Int32? = nil
    var typealias_p: Int32 {
      get {return _typealias_p ?? 0}
      set {_typealias_p = newValue}
    }
    var hasTypealias_p: Bool {
      return self._typealias_p != nil
    }
    mutating func clearTypealias_p() {
      self._typealias_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._typealias_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._typealias_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct varMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".var"

    fileprivate var _var_p: Int32? = nil
    var var_p: Int32 {
      get {return _var_p ?? 0}
      set {_var_p = newValue}
    }
    var hasVar_p: Bool {
      return self._var_p != nil
    }
    mutating func clearVar_p() {
      self._var_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._var_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._var_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct breakMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".break"

    fileprivate var _break_p: Int32? = nil
    var break_p: Int32 {
      get {return _break_p ?? 0}
      set {_break_p = newValue}
    }
    var hasBreak_p: Bool {
      return self._break_p != nil
    }
    mutating func clearBreak_p() {
      self._break_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._break_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._break_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct caseMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".case"

    fileprivate var _case_p: Int32? = nil
    var case_p: Int32 {
      get {return _case_p ?? 0}
      set {_case_p = newValue}
    }
    var hasCase_p: Bool {
      return self._case_p != nil
    }
    mutating func clearCase_p() {
      self._case_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._case_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._case_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct continueMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".continue"

    fileprivate var _continue_p: Int32? = nil
    var continue_p: Int32 {
      get {return _continue_p ?? 0}
      set {_continue_p = newValue}
    }
    var hasContinue_p: Bool {
      return self._continue_p != nil
    }
    mutating func clearContinue_p() {
      self._continue_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._continue_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._continue_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct defaultMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".default"

    fileprivate var _default_p: Int32? = nil
    var default_p: Int32 {
      get {return _default_p ?? 0}
      set {_default_p = newValue}
    }
    var hasDefault_p: Bool {
      return self._default_p != nil
    }
    mutating func clearDefault_p() {
      self._default_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._default_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._default_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct deferMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".defer"

    fileprivate var _defer_p: Int32? = nil
    var defer_p: Int32 {
      get {return _defer_p ?? 0}
      set {_defer_p = newValue}
    }
    var hasDefer_p: Bool {
      return self._defer_p != nil
    }
    mutating func clearDefer_p() {
      self._defer_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._defer_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._defer_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct doMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".do"

    fileprivate var _do_p: Int32? = nil
    var do_p: Int32 {
      get {return _do_p ?? 0}
      set {_do_p = newValue}
    }
    var hasDo_p: Bool {
      return self._do_p != nil
    }
    mutating func clearDo_p() {
      self._do_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._do_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._do_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct elseMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".else"

    fileprivate var _else_p: Int32? = nil
    var else_p: Int32 {
      get {return _else_p ?? 0}
      set {_else_p = newValue}
    }
    var hasElse_p: Bool {
      return self._else_p != nil
    }
    mutating func clearElse_p() {
      self._else_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._else_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._else_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct fallthroughMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".fallthrough"

    fileprivate var _fallthrough_p: Int32? = nil
    var fallthrough_p: Int32 {
      get {return _fallthrough_p ?? 0}
      set {_fallthrough_p = newValue}
    }
    var hasFallthrough_p: Bool {
      return self._fallthrough_p != nil
    }
    mutating func clearFallthrough_p() {
      self._fallthrough_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._fallthrough_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._fallthrough_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct forMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".for"

    fileprivate var _for_p: Int32? = nil
    var for_p: Int32 {
      get {return _for_p ?? 0}
      set {_for_p = newValue}
    }
    var hasFor_p: Bool {
      return self._for_p != nil
    }
    mutating func clearFor_p() {
      self._for_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._for_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._for_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct guardMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".guard"

    fileprivate var _guard_p: Int32? = nil
    var guard_p: Int32 {
      get {return _guard_p ?? 0}
      set {_guard_p = newValue}
    }
    var hasGuard_p: Bool {
      return self._guard_p != nil
    }
    mutating func clearGuard_p() {
      self._guard_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._guard_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._guard_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ifMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".if"

    fileprivate var _if_p: Int32? = nil
    var if_p: Int32 {
      get {return _if_p ?? 0}
      set {_if_p = newValue}
    }
    var hasIf_p: Bool {
      return self._if_p != nil
    }
    mutating func clearIf_p() {
      self._if_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._if_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._if_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct inMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".in"

    fileprivate var _in_p: Int32? = nil
    var in_p: Int32 {
      get {return _in_p ?? 0}
      set {_in_p = newValue}
    }
    var hasIn_p: Bool {
      return self._in_p != nil
    }
    mutating func clearIn_p() {
      self._in_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._in_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._in_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct repeatMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".repeat"

    fileprivate var _repeat_p: Int32? = nil
    var repeat_p: Int32 {
      get {return _repeat_p ?? 0}
      set {_repeat_p = newValue}
    }
    var hasRepeat_p: Bool {
      return self._repeat_p != nil
    }
    mutating func clearRepeat_p() {
      self._repeat_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._repeat_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._repeat_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct returnMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".return"

    fileprivate var _return_p: Int32? = nil
    var return_p: Int32 {
      get {return _return_p ?? 0}
      set {_return_p = newValue}
    }
    var hasReturn_p: Bool {
      return self._return_p != nil
    }
    mutating func clearReturn_p() {
      self._return_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._return_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._return_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct switchMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".switch"

    fileprivate var _switch_p: Int32? = nil
    var switch_p: Int32 {
      get {return _switch_p ?? 0}
      set {_switch_p = newValue}
    }
    var hasSwitch_p: Bool {
      return self._switch_p != nil
    }
    mutating func clearSwitch_p() {
      self._switch_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._switch_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._switch_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct whereMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".where"

    fileprivate var _where_p: Int32? = nil
    var where_p: Int32 {
      get {return _where_p ?? 0}
      set {_where_p = newValue}
    }
    var hasWhere_p: Bool {
      return self._where_p != nil
    }
    mutating func clearWhere_p() {
      self._where_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._where_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._where_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct whileMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".while"

    fileprivate var _while_p: Int32? = nil
    var while_p: Int32 {
      get {return _while_p ?? 0}
      set {_while_p = newValue}
    }
    var hasWhile_p: Bool {
      return self._while_p != nil
    }
    mutating func clearWhile_p() {
      self._while_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._while_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._while_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct asMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".as"

    fileprivate var _as_p: Int32? = nil
    var as_p: Int32 {
      get {return _as_p ?? 0}
      set {_as_p = newValue}
    }
    var hasAs_p: Bool {
      return self._as_p != nil
    }
    mutating func clearAs_p() {
      self._as_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._as_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._as_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct catchMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".catch"

    fileprivate var _catch_p: Int32? = nil
    var catch_p: Int32 {
      get {return _catch_p ?? 0}
      set {_catch_p = newValue}
    }
    var hasCatch_p: Bool {
      return self._catch_p != nil
    }
    mutating func clearCatch_p() {
      self._catch_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._catch_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._catch_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct dynamicTypeMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".dynamicType"

    fileprivate var _dynamicType_p: Int32? = nil
    var dynamicType_p: Int32 {
      get {return _dynamicType_p ?? 0}
      set {_dynamicType_p = newValue}
    }
    var hasDynamicType_p: Bool {
      return self._dynamicType_p != nil
    }
    mutating func clearDynamicType_p() {
      self._dynamicType_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._dynamicType_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._dynamicType_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct falseMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".false"

    fileprivate var _false_p: Int32? = nil
    var false_p: Int32 {
      get {return _false_p ?? 0}
      set {_false_p = newValue}
    }
    var hasFalse_p: Bool {
      return self._false_p != nil
    }
    mutating func clearFalse_p() {
      self._false_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._false_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._false_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct isMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".is"

    fileprivate var _is_p: Int32? = nil
    var is_p: Int32 {
      get {return _is_p ?? 0}
      set {_is_p = newValue}
    }
    var hasIs_p: Bool {
      return self._is_p != nil
    }
    mutating func clearIs_p() {
      self._is_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._is_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._is_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct nilMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".nil"

    fileprivate var _nil_p: Int32? = nil
    var nil_p: Int32 {
      get {return _nil_p ?? 0}
      set {_nil_p = newValue}
    }
    var hasNil_p: Bool {
      return self._nil_p != nil
    }
    mutating func clearNil_p() {
      self._nil_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._nil_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._nil_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct rethrowsMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".rethrows"

    fileprivate var _rethrows_p: Int32? = nil
    var rethrows_p: Int32 {
      get {return _rethrows_p ?? 0}
      set {_rethrows_p = newValue}
    }
    var hasRethrows_p: Bool {
      return self._rethrows_p != nil
    }
    mutating func clearRethrows_p() {
      self._rethrows_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._rethrows_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._rethrows_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct superMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".super"

    fileprivate var _super_p: Int32? = nil
    var super_p: Int32 {
      get {return _super_p ?? 0}
      set {_super_p = newValue}
    }
    var hasSuper_p: Bool {
      return self._super_p != nil
    }
    mutating func clearSuper_p() {
      self._super_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._super_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._super_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct selfMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".self"

    fileprivate var _self_p: Int32? = nil
    var self_p: Int32 {
      get {return _self_p ?? 0}
      set {_self_p = newValue}
    }
    var hasSelf_p: Bool {
      return self._self_p != nil
    }
    mutating func clearSelf_p() {
      self._self_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._self_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._self_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct throwMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".throw"

    fileprivate var _throw_p: Int32? = nil
    var throw_p: Int32 {
      get {return _throw_p ?? 0}
      set {_throw_p = newValue}
    }
    var hasThrow_p: Bool {
      return self._throw_p != nil
    }
    mutating func clearThrow_p() {
      self._throw_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._throw_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._throw_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct throwsMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".throws"

    fileprivate var _throws_p: Int32? = nil
    var throws_p: Int32 {
      get {return _throws_p ?? 0}
      set {_throws_p = newValue}
    }
    var hasThrows_p: Bool {
      return self._throws_p != nil
    }
    mutating func clearThrows_p() {
      self._throws_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._throws_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._throws_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct trueMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".true"

    fileprivate var _true_p: Int32? = nil
    var true_p: Int32 {
      get {return _true_p ?? 0}
      set {_true_p = newValue}
    }
    var hasTrue_p: Bool {
      return self._true_p != nil
    }
    mutating func clearTrue_p() {
      self._true_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._true_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._true_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct tryMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".try"

    fileprivate var _try_p: Int32? = nil
    var try_p: Int32 {
      get {return _try_p ?? 0}
      set {_try_p = newValue}
    }
    var hasTry_p: Bool {
      return self._try_p != nil
    }
    mutating func clearTry_p() {
      self._try_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._try_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._try_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct __COLUMN__Message: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".__COLUMN__"

    fileprivate var __Column__: Int32? = nil
    var _Column__: Int32 {
      get {return __Column__ ?? 0}
      set {__Column__ = newValue}
    }
    var has_Column__: Bool {
      return self.__Column__ != nil
    }
    mutating func clear_Column__() {
      self.__Column__ = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self.__Column__)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self.__Column__ {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct __FILE__Message: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".__FILE__"

    fileprivate var __File__: Int32? = nil
    var _File__: Int32 {
      get {return __File__ ?? 0}
      set {__File__ = newValue}
    }
    var has_File__: Bool {
      return self.__File__ != nil
    }
    mutating func clear_File__() {
      self.__File__ = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self.__File__)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self.__File__ {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct __FUNCTION__Message: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".__FUNCTION__"

    fileprivate var __Function__: Int32? = nil
    var _Function__: Int32 {
      get {return __Function__ ?? 0}
      set {__Function__ = newValue}
    }
    var has_Function__: Bool {
      return self.__Function__ != nil
    }
    mutating func clear_Function__() {
      self.__Function__ = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self.__Function__)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self.__Function__ {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct __LINE__Message: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".__LINE__"

    fileprivate var __Line__: Int32? = nil
    var _Line__: Int32 {
      get {return __Line__ ?? 0}
      set {__Line__ = newValue}
    }
    var has_Line__: Bool {
      return self.__Line__ != nil
    }
    mutating func clear_Line__() {
      self.__Line__ = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self.__Line__)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self.__Line__ {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct _Message: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + "._"

    fileprivate var ____: Int32? = nil
    var ___: Int32 {
      get {return ____ ?? 0}
      set {____ = newValue}
    }
    var has___: Bool {
      return self.____ != nil
    }
    mutating func clear___() {
      self.____ = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self.____)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self.____ {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct __Message: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".__"

    fileprivate var _____: Int32? = nil
    var ____: Int32 {
      get {return _____ ?? 0}
      set {_____ = newValue}
    }
    var has____: Bool {
      return self._____ != nil
    }
    mutating func clear____() {
      self._____ = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._____)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._____ {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct associativity: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".associativity"

    fileprivate var _associativity: Int32? = nil
    var associativity: Int32 {
      get {return _associativity ?? 0}
      set {_associativity = newValue}
    }
    var hasAssociativity: Bool {
      return self._associativity != nil
    }
    mutating func clearAssociativity() {
      self._associativity = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._associativity)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._associativity {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct convenience: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".convenience"

    fileprivate var _convenience: Int32? = nil
    var convenience: Int32 {
      get {return _convenience ?? 0}
      set {_convenience = newValue}
    }
    var hasConvenience: Bool {
      return self._convenience != nil
    }
    mutating func clearConvenience() {
      self._convenience = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._convenience)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._convenience {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct dynamic: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".dynamic"

    fileprivate var _dynamic: Int32? = nil
    var dynamic: Int32 {
      get {return _dynamic ?? 0}
      set {_dynamic = newValue}
    }
    var hasDynamic: Bool {
      return self._dynamic != nil
    }
    mutating func clearDynamic() {
      self._dynamic = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._dynamic)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._dynamic {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct didSet: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".didSet"

    fileprivate var _didSet: Int32? = nil
    var didSet: Int32 {
      get {return _didSet ?? 0}
      set {_didSet = newValue}
    }
    var hasDidSet: Bool {
      return self._didSet != nil
    }
    mutating func clearDidSet() {
      self._didSet = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._didSet)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._didSet {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct final: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".final"

    fileprivate var _final: Int32? = nil
    var final: Int32 {
      get {return _final ?? 0}
      set {_final = newValue}
    }
    var hasFinal: Bool {
      return self._final != nil
    }
    mutating func clearFinal() {
      self._final = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._final)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._final {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct get: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".get"

    fileprivate var _get: Int32? = nil
    var get: Int32 {
      get {return _get ?? 0}
      set {_get = newValue}
    }
    var hasGet: Bool {
      return self._get != nil
    }
    mutating func clearGet() {
      self._get = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._get)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._get {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct infix: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".infix"

    fileprivate var _infix: Int32? = nil
    var infix: Int32 {
      get {return _infix ?? 0}
      set {_infix = newValue}
    }
    var hasInfix: Bool {
      return self._infix != nil
    }
    mutating func clearInfix() {
      self._infix = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._infix)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._infix {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct indirect: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".indirect"

    fileprivate var _indirect: Int32? = nil
    var indirect: Int32 {
      get {return _indirect ?? 0}
      set {_indirect = newValue}
    }
    var hasIndirect: Bool {
      return self._indirect != nil
    }
    mutating func clearIndirect() {
      self._indirect = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._indirect)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._indirect {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct lazy: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".lazy"

    fileprivate var _lazy: Int32? = nil
    var lazy: Int32 {
      get {return _lazy ?? 0}
      set {_lazy = newValue}
    }
    var hasLazy: Bool {
      return self._lazy != nil
    }
    mutating func clearLazy() {
      self._lazy = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._lazy)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._lazy {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct left: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".left"

    fileprivate var _left: Int32? = nil
    var left: Int32 {
      get {return _left ?? 0}
      set {_left = newValue}
    }
    var hasLeft: Bool {
      return self._left != nil
    }
    mutating func clearLeft() {
      self._left = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._left)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._left {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct mutating: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".mutating"

    fileprivate var _mutating: Int32? = nil
    var mutating: Int32 {
      get {return _mutating ?? 0}
      set {_mutating = newValue}
    }
    var hasMutating: Bool {
      return self._mutating != nil
    }
    mutating func clearMutating() {
      self._mutating = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._mutating)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._mutating {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct none: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".none"

    fileprivate var _none: Int32? = nil
    var none: Int32 {
      get {return _none ?? 0}
      set {_none = newValue}
    }
    var hasNone: Bool {
      return self._none != nil
    }
    mutating func clearNone() {
      self._none = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._none)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._none {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct nonmutating: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".nonmutating"

    fileprivate var _nonmutating: Int32? = nil
    var nonmutating: Int32 {
      get {return _nonmutating ?? 0}
      set {_nonmutating = newValue}
    }
    var hasNonmutating: Bool {
      return self._nonmutating != nil
    }
    mutating func clearNonmutating() {
      self._nonmutating = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._nonmutating)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._nonmutating {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct optional: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".optional"

    fileprivate var _optional: Int32? = nil
    var optional: Int32 {
      get {return _optional ?? 0}
      set {_optional = newValue}
    }
    var hasOptional: Bool {
      return self._optional != nil
    }
    mutating func clearOptional() {
      self._optional = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._optional)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._optional {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct override: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".override"

    fileprivate var _override: Int32? = nil
    var override: Int32 {
      get {return _override ?? 0}
      set {_override = newValue}
    }
    var hasOverride: Bool {
      return self._override != nil
    }
    mutating func clearOverride() {
      self._override = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._override)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._override {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct postfix: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".postfix"

    fileprivate var _postfix: Int32? = nil
    var postfix: Int32 {
      get {return _postfix ?? 0}
      set {_postfix = newValue}
    }
    var hasPostfix: Bool {
      return self._postfix != nil
    }
    mutating func clearPostfix() {
      self._postfix = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._postfix)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._postfix {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct precedence: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".precedence"

    fileprivate var _precedence: Int32? = nil
    var precedence: Int32 {
      get {return _precedence ?? 0}
      set {_precedence = newValue}
    }
    var hasPrecedence: Bool {
      return self._precedence != nil
    }
    mutating func clearPrecedence() {
      self._precedence = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._precedence)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._precedence {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct prefix: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".prefix"

    fileprivate var _prefix: Int32? = nil
    var prefix: Int32 {
      get {return _prefix ?? 0}
      set {_prefix = newValue}
    }
    var hasPrefix: Bool {
      return self._prefix != nil
    }
    mutating func clearPrefix() {
      self._prefix = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._prefix)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._prefix {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct required: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".required"

    fileprivate var _required: Int32? = nil
    var required: Int32 {
      get {return _required ?? 0}
      set {_required = newValue}
    }
    var hasRequired: Bool {
      return self._required != nil
    }
    mutating func clearRequired() {
      self._required = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._required)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._required {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct right: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".right"

    fileprivate var _right: Int32? = nil
    var right: Int32 {
      get {return _right ?? 0}
      set {_right = newValue}
    }
    var hasRight: Bool {
      return self._right != nil
    }
    mutating func clearRight() {
      self._right = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._right)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._right {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct set: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".set"

    fileprivate var _set: Int32? = nil
    var set: Int32 {
      get {return _set ?? 0}
      set {_set = newValue}
    }
    var hasSet: Bool {
      return self._set != nil
    }
    mutating func clearSet() {
      self._set = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._set)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._set {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct TypeMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Type"

    fileprivate var _type: Int32? = nil
    var type: Int32 {
      get {return _type ?? 0}
      set {_type = newValue}
    }
    var hasType: Bool {
      return self._type != nil
    }
    mutating func clearType() {
      self._type = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._type)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._type {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct unowned: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".unowned"

    fileprivate var _unowned: Int32? = nil
    var unowned: Int32 {
      get {return _unowned ?? 0}
      set {_unowned = newValue}
    }
    var hasUnowned: Bool {
      return self._unowned != nil
    }
    mutating func clearUnowned() {
      self._unowned = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._unowned)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._unowned {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct weak: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".weak"

    fileprivate var _weak: Int32? = nil
    var weak: Int32 {
      get {return _weak ?? 0}
      set {_weak = newValue}
    }
    var hasWeak: Bool {
      return self._weak != nil
    }
    mutating func clearWeak() {
      self._weak = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._weak)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._weak {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct willSet: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".willSet"

    fileprivate var _willSet: Int32? = nil
    var willSet: Int32 {
      get {return _willSet ?? 0}
      set {_willSet = newValue}
    }
    var hasWillSet: Bool {
      return self._willSet != nil
    }
    mutating func clearWillSet() {
      self._willSet = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._willSet)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._willSet {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct id: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".id"

    fileprivate var _id: Int32? = nil
    var id: Int32 {
      get {return _id ?? 0}
      set {_id = newValue}
    }
    var hasId: Bool {
      return self._id != nil
    }
    mutating func clearId() {
      self._id = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._id)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._id {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct _cmd: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + "._cmd"

    fileprivate var _cmd: Int32? = nil
    var cmd: Int32 {
      get {return _cmd ?? 0}
      set {_cmd = newValue}
    }
    var hasCmd: Bool {
      return self._cmd != nil
    }
    mutating func clearCmd() {
      self._cmd = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._cmd)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._cmd {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct out: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".out"

    fileprivate var _out: Int32? = nil
    var out: Int32 {
      get {return _out ?? 0}
      set {_out = newValue}
    }
    var hasOut: Bool {
      return self._out != nil
    }
    mutating func clearOut() {
      self._out = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._out)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._out {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct bycopy: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".bycopy"

    fileprivate var _bycopy: Int32? = nil
    var bycopy: Int32 {
      get {return _bycopy ?? 0}
      set {_bycopy = newValue}
    }
    var hasBycopy: Bool {
      return self._bycopy != nil
    }
    mutating func clearBycopy() {
      self._bycopy = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._bycopy)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._bycopy {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct byref: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".byref"

    fileprivate var _byref: Int32? = nil
    var byref: Int32 {
      get {return _byref ?? 0}
      set {_byref = newValue}
    }
    var hasByref: Bool {
      return self._byref != nil
    }
    mutating func clearByref() {
      self._byref = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._byref)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._byref {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct oneway: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".oneway"

    fileprivate var _oneway: Int32? = nil
    var oneway: Int32 {
      get {return _oneway ?? 0}
      set {_oneway = newValue}
    }
    var hasOneway: Bool {
      return self._oneway != nil
    }
    mutating func clearOneway() {
      self._oneway = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._oneway)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._oneway {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct and: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".and"

    fileprivate var _and: Int32? = nil
    var and: Int32 {
      get {return _and ?? 0}
      set {_and = newValue}
    }
    var hasAnd: Bool {
      return self._and != nil
    }
    mutating func clearAnd() {
      self._and = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._and)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._and {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct and_eq: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".and_eq"

    fileprivate var _andEq: Int32? = nil
    var andEq: Int32 {
      get {return _andEq ?? 0}
      set {_andEq = newValue}
    }
    var hasAndEq: Bool {
      return self._andEq != nil
    }
    mutating func clearAndEq() {
      self._andEq = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._andEq)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._andEq {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct alignas: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".alignas"

    fileprivate var _alignas: Int32? = nil
    var alignas: Int32 {
      get {return _alignas ?? 0}
      set {_alignas = newValue}
    }
    var hasAlignas: Bool {
      return self._alignas != nil
    }
    mutating func clearAlignas() {
      self._alignas = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._alignas)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._alignas {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct alignof: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".alignof"

    fileprivate var _alignof: Int32? = nil
    var alignof: Int32 {
      get {return _alignof ?? 0}
      set {_alignof = newValue}
    }
    var hasAlignof: Bool {
      return self._alignof != nil
    }
    mutating func clearAlignof() {
      self._alignof = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._alignof)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._alignof {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct asm: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".asm"

    fileprivate var _asm: Int32? = nil
    var asm: Int32 {
      get {return _asm ?? 0}
      set {_asm = newValue}
    }
    var hasAsm: Bool {
      return self._asm != nil
    }
    mutating func clearAsm() {
      self._asm = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._asm)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._asm {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct auto: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".auto"

    fileprivate var _auto: Int32? = nil
    var auto: Int32 {
      get {return _auto ?? 0}
      set {_auto = newValue}
    }
    var hasAuto: Bool {
      return self._auto != nil
    }
    mutating func clearAuto() {
      self._auto = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._auto)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._auto {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct bitand: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".bitand"

    fileprivate var _bitand: Int32? = nil
    var bitand: Int32 {
      get {return _bitand ?? 0}
      set {_bitand = newValue}
    }
    var hasBitand: Bool {
      return self._bitand != nil
    }
    mutating func clearBitand() {
      self._bitand = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._bitand)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._bitand {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct bitor: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".bitor"

    fileprivate var _bitor: Int32? = nil
    var bitor: Int32 {
      get {return _bitor ?? 0}
      set {_bitor = newValue}
    }
    var hasBitor: Bool {
      return self._bitor != nil
    }
    mutating func clearBitor() {
      self._bitor = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._bitor)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._bitor {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct bool: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".bool"

    fileprivate var _bool: Int32? = nil
    var bool: Int32 {
      get {return _bool ?? 0}
      set {_bool = newValue}
    }
    var hasBool: Bool {
      return self._bool != nil
    }
    mutating func clearBool() {
      self._bool = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._bool)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._bool {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct char: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".char"

    fileprivate var _char: Int32? = nil
    var char: Int32 {
      get {return _char ?? 0}
      set {_char = newValue}
    }
    var hasChar: Bool {
      return self._char != nil
    }
    mutating func clearChar() {
      self._char = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._char)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._char {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct char16_t: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".char16_t"

    fileprivate var _char16T: Int32? = nil
    var char16T: Int32 {
      get {return _char16T ?? 0}
      set {_char16T = newValue}
    }
    var hasChar16T: Bool {
      return self._char16T != nil
    }
    mutating func clearChar16T() {
      self._char16T = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._char16T)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._char16T {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct char32_t: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".char32_t"

    fileprivate var _char32T: Int32? = nil
    var char32T: Int32 {
      get {return _char32T ?? 0}
      set {_char32T = newValue}
    }
    var hasChar32T: Bool {
      return self._char32T != nil
    }
    mutating func clearChar32T() {
      self._char32T = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._char32T)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._char32T {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct compl: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".compl"

    fileprivate var _compl: Int32? = nil
    var compl: Int32 {
      get {return _compl ?? 0}
      set {_compl = newValue}
    }
    var hasCompl: Bool {
      return self._compl != nil
    }
    mutating func clearCompl() {
      self._compl = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._compl)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._compl {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct const: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".const"

    fileprivate var _const: Int32? = nil
    var const: Int32 {
      get {return _const ?? 0}
      set {_const = newValue}
    }
    var hasConst: Bool {
      return self._const != nil
    }
    mutating func clearConst() {
      self._const = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._const)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._const {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct constexpr: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".constexpr"

    fileprivate var _constexpr: Int32? = nil
    var constexpr: Int32 {
      get {return _constexpr ?? 0}
      set {_constexpr = newValue}
    }
    var hasConstexpr: Bool {
      return self._constexpr != nil
    }
    mutating func clearConstexpr() {
      self._constexpr = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._constexpr)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._constexpr {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct const_cast: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".const_cast"

    fileprivate var _constCast: Int32? = nil
    var constCast: Int32 {
      get {return _constCast ?? 0}
      set {_constCast = newValue}
    }
    var hasConstCast: Bool {
      return self._constCast != nil
    }
    mutating func clearConstCast() {
      self._constCast = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._constCast)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._constCast {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct decltype: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".decltype"

    fileprivate var _decltype: Int32? = nil
    var decltype: Int32 {
      get {return _decltype ?? 0}
      set {_decltype = newValue}
    }
    var hasDecltype: Bool {
      return self._decltype != nil
    }
    mutating func clearDecltype() {
      self._decltype = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._decltype)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._decltype {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct delete: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".delete"

    fileprivate var _delete: Int32? = nil
    var delete: Int32 {
      get {return _delete ?? 0}
      set {_delete = newValue}
    }
    var hasDelete: Bool {
      return self._delete != nil
    }
    mutating func clearDelete() {
      self._delete = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._delete)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._delete {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct dynamic_cast: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".dynamic_cast"

    fileprivate var _dynamicCast: Int32? = nil
    var dynamicCast: Int32 {
      get {return _dynamicCast ?? 0}
      set {_dynamicCast = newValue}
    }
    var hasDynamicCast: Bool {
      return self._dynamicCast != nil
    }
    mutating func clearDynamicCast() {
      self._dynamicCast = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._dynamicCast)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._dynamicCast {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct explicit: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".explicit"

    fileprivate var _explicit: Int32? = nil
    var explicit: Int32 {
      get {return _explicit ?? 0}
      set {_explicit = newValue}
    }
    var hasExplicit: Bool {
      return self._explicit != nil
    }
    mutating func clearExplicit() {
      self._explicit = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._explicit)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._explicit {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct export: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".export"

    fileprivate var _export: Int32? = nil
    var export: Int32 {
      get {return _export ?? 0}
      set {_export = newValue}
    }
    var hasExport: Bool {
      return self._export != nil
    }
    mutating func clearExport() {
      self._export = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._export)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._export {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct extern: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".extern"

    fileprivate var _extern: Int32? = nil
    var extern: Int32 {
      get {return _extern ?? 0}
      set {_extern = newValue}
    }
    var hasExtern: Bool {
      return self._extern != nil
    }
    mutating func clearExtern() {
      self._extern = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._extern)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._extern {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct friend: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".friend"

    fileprivate var _friend: Int32? = nil
    var friend: Int32 {
      get {return _friend ?? 0}
      set {_friend = newValue}
    }
    var hasFriend: Bool {
      return self._friend != nil
    }
    mutating func clearFriend() {
      self._friend = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._friend)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._friend {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct goto: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".goto"

    fileprivate var _goto: Int32? = nil
    var goto: Int32 {
      get {return _goto ?? 0}
      set {_goto = newValue}
    }
    var hasGoto: Bool {
      return self._goto != nil
    }
    mutating func clearGoto() {
      self._goto = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._goto)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._goto {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct inline: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".inline"

    fileprivate var _inline: Int32? = nil
    var inline: Int32 {
      get {return _inline ?? 0}
      set {_inline = newValue}
    }
    var hasInline: Bool {
      return self._inline != nil
    }
    mutating func clearInline() {
      self._inline = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._inline)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._inline {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct long: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".long"

    fileprivate var _long: Int32? = nil
    var long: Int32 {
      get {return _long ?? 0}
      set {_long = newValue}
    }
    var hasLong: Bool {
      return self._long != nil
    }
    mutating func clearLong() {
      self._long = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._long)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._long {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct mutable: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".mutable"

    fileprivate var _mutable: Int32? = nil
    var mutable: Int32 {
      get {return _mutable ?? 0}
      set {_mutable = newValue}
    }
    var hasMutable: Bool {
      return self._mutable != nil
    }
    mutating func clearMutable() {
      self._mutable = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._mutable)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._mutable {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct namespace: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".namespace"

    fileprivate var _namespace: Int32? = nil
    var namespace: Int32 {
      get {return _namespace ?? 0}
      set {_namespace = newValue}
    }
    var hasNamespace: Bool {
      return self._namespace != nil
    }
    mutating func clearNamespace() {
      self._namespace = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._namespace)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._namespace {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct new: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".new"

    fileprivate var _new: Int32? = nil
    var new: Int32 {
      get {return _new ?? 0}
      set {_new = newValue}
    }
    var hasNew: Bool {
      return self._new != nil
    }
    mutating func clearNew() {
      self._new = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._new)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._new {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct noexcept: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".noexcept"

    fileprivate var _noexcept: Int32? = nil
    var noexcept: Int32 {
      get {return _noexcept ?? 0}
      set {_noexcept = newValue}
    }
    var hasNoexcept: Bool {
      return self._noexcept != nil
    }
    mutating func clearNoexcept() {
      self._noexcept = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._noexcept)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._noexcept {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct not: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".not"

    fileprivate var _not: Int32? = nil
    var not: Int32 {
      get {return _not ?? 0}
      set {_not = newValue}
    }
    var hasNot: Bool {
      return self._not != nil
    }
    mutating func clearNot() {
      self._not = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._not)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._not {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct not_eq: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".not_eq"

    fileprivate var _notEq: Int32? = nil
    var notEq: Int32 {
      get {return _notEq ?? 0}
      set {_notEq = newValue}
    }
    var hasNotEq: Bool {
      return self._notEq != nil
    }
    mutating func clearNotEq() {
      self._notEq = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._notEq)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._notEq {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct nullptr: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".nullptr"

    fileprivate var _nullptr: Int32? = nil
    var nullptr: Int32 {
      get {return _nullptr ?? 0}
      set {_nullptr = newValue}
    }
    var hasNullptr: Bool {
      return self._nullptr != nil
    }
    mutating func clearNullptr() {
      self._nullptr = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._nullptr)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._nullptr {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct or: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".or"

    fileprivate var _or: Int32? = nil
    var or: Int32 {
      get {return _or ?? 0}
      set {_or = newValue}
    }
    var hasOr: Bool {
      return self._or != nil
    }
    mutating func clearOr() {
      self._or = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._or)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._or {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct or_eq: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".or_eq"

    fileprivate var _orEq: Int32? = nil
    var orEq: Int32 {
      get {return _orEq ?? 0}
      set {_orEq = newValue}
    }
    var hasOrEq: Bool {
      return self._orEq != nil
    }
    mutating func clearOrEq() {
      self._orEq = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._orEq)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._orEq {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct protected: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".protected"

    fileprivate var _protected: Int32? = nil
    var protected: Int32 {
      get {return _protected ?? 0}
      set {_protected = newValue}
    }
    var hasProtected: Bool {
      return self._protected != nil
    }
    mutating func clearProtected() {
      self._protected = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._protected)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._protected {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct register: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".register"

    fileprivate var _register: Int32? = nil
    var register: Int32 {
      get {return _register ?? 0}
      set {_register = newValue}
    }
    var hasRegister: Bool {
      return self._register != nil
    }
    mutating func clearRegister() {
      self._register = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._register)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._register {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct reinterpret_cast: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".reinterpret_cast"

    fileprivate var _reinterpretCast: Int32? = nil
    var reinterpretCast: Int32 {
      get {return _reinterpretCast ?? 0}
      set {_reinterpretCast = newValue}
    }
    var hasReinterpretCast: Bool {
      return self._reinterpretCast != nil
    }
    mutating func clearReinterpretCast() {
      self._reinterpretCast = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._reinterpretCast)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._reinterpretCast {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct short: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".short"

    fileprivate var _short: Int32? = nil
    var short: Int32 {
      get {return _short ?? 0}
      set {_short = newValue}
    }
    var hasShort: Bool {
      return self._short != nil
    }
    mutating func clearShort() {
      self._short = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._short)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._short {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct signed: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".signed"

    fileprivate var _signed: Int32? = nil
    var signed: Int32 {
      get {return _signed ?? 0}
      set {_signed = newValue}
    }
    var hasSigned: Bool {
      return self._signed != nil
    }
    mutating func clearSigned() {
      self._signed = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._signed)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._signed {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct sizeof: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".sizeof"

    fileprivate var _sizeof: Int32? = nil
    var sizeof: Int32 {
      get {return _sizeof ?? 0}
      set {_sizeof = newValue}
    }
    var hasSizeof: Bool {
      return self._sizeof != nil
    }
    mutating func clearSizeof() {
      self._sizeof = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._sizeof)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._sizeof {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct static_assert: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".static_assert"

    fileprivate var _staticAssert: Int32? = nil
    var staticAssert: Int32 {
      get {return _staticAssert ?? 0}
      set {_staticAssert = newValue}
    }
    var hasStaticAssert: Bool {
      return self._staticAssert != nil
    }
    mutating func clearStaticAssert() {
      self._staticAssert = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._staticAssert)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._staticAssert {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct static_cast: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".static_cast"

    fileprivate var _staticCast: Int32? = nil
    var staticCast: Int32 {
      get {return _staticCast ?? 0}
      set {_staticCast = newValue}
    }
    var hasStaticCast: Bool {
      return self._staticCast != nil
    }
    mutating func clearStaticCast() {
      self._staticCast = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._staticCast)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._staticCast {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct template: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".template"

    fileprivate var _template: Int32? = nil
    var template: Int32 {
      get {return _template ?? 0}
      set {_template = newValue}
    }
    var hasTemplate: Bool {
      return self._template != nil
    }
    mutating func clearTemplate() {
      self._template = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._template)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._template {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct this: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".this"

    fileprivate var _this: Int32? = nil
    var this: Int32 {
      get {return _this ?? 0}
      set {_this = newValue}
    }
    var hasThis: Bool {
      return self._this != nil
    }
    mutating func clearThis() {
      self._this = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._this)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._this {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct thread_local: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".thread_local"

    fileprivate var _threadLocal: Int32? = nil
    var threadLocal: Int32 {
      get {return _threadLocal ?? 0}
      set {_threadLocal = newValue}
    }
    var hasThreadLocal: Bool {
      return self._threadLocal != nil
    }
    mutating func clearThreadLocal() {
      self._threadLocal = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._threadLocal)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._threadLocal {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct typedef: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".typedef"

    fileprivate var _typedef: Int32? = nil
    var typedef: Int32 {
      get {return _typedef ?? 0}
      set {_typedef = newValue}
    }
    var hasTypedef: Bool {
      return self._typedef != nil
    }
    mutating func clearTypedef() {
      self._typedef = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._typedef)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._typedef {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct typeid: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".typeid"

    fileprivate var _typeid: Int32? = nil
    var typeid: Int32 {
      get {return _typeid ?? 0}
      set {_typeid = newValue}
    }
    var hasTypeid: Bool {
      return self._typeid != nil
    }
    mutating func clearTypeid() {
      self._typeid = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._typeid)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._typeid {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct typename: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".typename"

    fileprivate var _typename: Int32? = nil
    var typename: Int32 {
      get {return _typename ?? 0}
      set {_typename = newValue}
    }
    var hasTypename: Bool {
      return self._typename != nil
    }
    mutating func clearTypename() {
      self._typename = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._typename)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._typename {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct union: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".union"

    fileprivate var _union: Int32? = nil
    var union: Int32 {
      get {return _union ?? 0}
      set {_union = newValue}
    }
    var hasUnion: Bool {
      return self._union != nil
    }
    mutating func clearUnion() {
      self._union = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._union)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._union {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct unsigned: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".unsigned"

    fileprivate var _unsigned: Int32? = nil
    var unsigned: Int32 {
      get {return _unsigned ?? 0}
      set {_unsigned = newValue}
    }
    var hasUnsigned: Bool {
      return self._unsigned != nil
    }
    mutating func clearUnsigned() {
      self._unsigned = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._unsigned)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._unsigned {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct using: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".using"

    fileprivate var _using: Int32? = nil
    var using: Int32 {
      get {return _using ?? 0}
      set {_using = newValue}
    }
    var hasUsing: Bool {
      return self._using != nil
    }
    mutating func clearUsing() {
      self._using = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._using)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._using {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct virtual: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".virtual"

    fileprivate var _virtual: Int32? = nil
    var virtual: Int32 {
      get {return _virtual ?? 0}
      set {_virtual = newValue}
    }
    var hasVirtual: Bool {
      return self._virtual != nil
    }
    mutating func clearVirtual() {
      self._virtual = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._virtual)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._virtual {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct void: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".void"

    fileprivate var _void: Int32? = nil
    var void: Int32 {
      get {return _void ?? 0}
      set {_void = newValue}
    }
    var hasVoid: Bool {
      return self._void != nil
    }
    mutating func clearVoid() {
      self._void = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._void)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._void {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct volatile: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".volatile"

    fileprivate var _volatile: Int32? = nil
    var volatile: Int32 {
      get {return _volatile ?? 0}
      set {_volatile = newValue}
    }
    var hasVolatile: Bool {
      return self._volatile != nil
    }
    mutating func clearVolatile() {
      self._volatile = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._volatile)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._volatile {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct wchar_t: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".wchar_t"

    fileprivate var _wcharT: Int32? = nil
    var wcharT: Int32 {
      get {return _wcharT ?? 0}
      set {_wcharT = newValue}
    }
    var hasWcharT: Bool {
      return self._wcharT != nil
    }
    mutating func clearWcharT() {
      self._wcharT = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._wcharT)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._wcharT {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct xor: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".xor"

    fileprivate var _xor: Int32? = nil
    var xor: Int32 {
      get {return _xor ?? 0}
      set {_xor = newValue}
    }
    var hasXor: Bool {
      return self._xor != nil
    }
    mutating func clearXor() {
      self._xor = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._xor)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._xor {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct xor_eq: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".xor_eq"

    fileprivate var _xorEq: Int32? = nil
    var xorEq: Int32 {
      get {return _xorEq ?? 0}
      set {_xorEq = newValue}
    }
    var hasXorEq: Bool {
      return self._xorEq != nil
    }
    mutating func clearXorEq() {
      self._xorEq = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._xorEq)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._xorEq {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct restrict: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".restrict"

    fileprivate var _restrict: Int32? = nil
    var restrict: Int32 {
      get {return _restrict ?? 0}
      set {_restrict = newValue}
    }
    var hasRestrict: Bool {
      return self._restrict != nil
    }
    mutating func clearRestrict() {
      self._restrict = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._restrict)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._restrict {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Category: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Category"

    fileprivate var _category: Int32? = nil
    var category: Int32 {
      get {return _category ?? 0}
      set {_category = newValue}
    }
    var hasCategory: Bool {
      return self._category != nil
    }
    mutating func clearCategory() {
      self._category = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._category)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._category {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Ivar: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Ivar"

    fileprivate var _ivar: Int32? = nil
    var ivar: Int32 {
      get {return _ivar ?? 0}
      set {_ivar = newValue}
    }
    var hasIvar: Bool {
      return self._ivar != nil
    }
    mutating func clearIvar() {
      self._ivar = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._ivar)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._ivar {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Method: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Method"

    fileprivate var _method: Int32? = nil
    var method: Int32 {
      get {return _method ?? 0}
      set {_method = newValue}
    }
    var hasMethod: Bool {
      return self._method != nil
    }
    mutating func clearMethod() {
      self._method = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._method)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._method {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct finalize: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".finalize"

    fileprivate var _finalize: Int32? = nil
    var finalize: Int32 {
      get {return _finalize ?? 0}
      set {_finalize = newValue}
    }
    var hasFinalize: Bool {
      return self._finalize != nil
    }
    mutating func clearFinalize() {
      self._finalize = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._finalize)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._finalize {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct hash: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".hash"

    fileprivate var _hash_p: Int32? = nil
    var hash_p: Int32 {
      get {return _hash_p ?? 0}
      set {_hash_p = newValue}
    }
    var hasHash_p: Bool {
      return self._hash_p != nil
    }
    mutating func clearHash_p() {
      self._hash_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._hash_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._hash_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct dealloc: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".dealloc"

    fileprivate var _dealloc: Int32? = nil
    var dealloc: Int32 {
      get {return _dealloc ?? 0}
      set {_dealloc = newValue}
    }
    var hasDealloc: Bool {
      return self._dealloc != nil
    }
    mutating func clearDealloc() {
      self._dealloc = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._dealloc)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._dealloc {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct superclass: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".superclass"

    fileprivate var _superclass: Int32? = nil
    var superclass: Int32 {
      get {return _superclass ?? 0}
      set {_superclass = newValue}
    }
    var hasSuperclass: Bool {
      return self._superclass != nil
    }
    mutating func clearSuperclass() {
      self._superclass = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._superclass)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._superclass {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct retain: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".retain"

    fileprivate var _retain: Int32? = nil
    var retain: Int32 {
      get {return _retain ?? 0}
      set {_retain = newValue}
    }
    var hasRetain: Bool {
      return self._retain != nil
    }
    mutating func clearRetain() {
      self._retain = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._retain)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._retain {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct release: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".release"

    fileprivate var _release: Int32? = nil
    var release: Int32 {
      get {return _release ?? 0}
      set {_release = newValue}
    }
    var hasRelease: Bool {
      return self._release != nil
    }
    mutating func clearRelease() {
      self._release = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._release)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._release {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct autorelease: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".autorelease"

    fileprivate var _autorelease: Int32? = nil
    var autorelease: Int32 {
      get {return _autorelease ?? 0}
      set {_autorelease = newValue}
    }
    var hasAutorelease: Bool {
      return self._autorelease != nil
    }
    mutating func clearAutorelease() {
      self._autorelease = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._autorelease)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._autorelease {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct retainCount: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".retainCount"

    fileprivate var _retainCount: Int32? = nil
    var retainCount: Int32 {
      get {return _retainCount ?? 0}
      set {_retainCount = newValue}
    }
    var hasRetainCount: Bool {
      return self._retainCount != nil
    }
    mutating func clearRetainCount() {
      self._retainCount = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._retainCount)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._retainCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct zone: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".zone"

    fileprivate var _zone: Int32? = nil
    var zone: Int32 {
      get {return _zone ?? 0}
      set {_zone = newValue}
    }
    var hasZone: Bool {
      return self._zone != nil
    }
    mutating func clearZone() {
      self._zone = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._zone)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._zone {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct isProxy: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".isProxy"

    fileprivate var _isProxy: Int32? = nil
    var isProxy: Int32 {
      get {return _isProxy ?? 0}
      set {_isProxy = newValue}
    }
    var hasIsProxy: Bool {
      return self._isProxy != nil
    }
    mutating func clearIsProxy() {
      self._isProxy = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._isProxy)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._isProxy {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct copy: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".copy"

    fileprivate var _copy: Int32? = nil
    var copy: Int32 {
      get {return _copy ?? 0}
      set {_copy = newValue}
    }
    var hasCopy: Bool {
      return self._copy != nil
    }
    mutating func clearCopy() {
      self._copy = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._copy)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._copy {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct mutableCopy: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".mutableCopy"

    fileprivate var _mutableCopy: Int32? = nil
    var mutableCopy: Int32 {
      get {return _mutableCopy ?? 0}
      set {_mutableCopy = newValue}
    }
    var hasMutableCopy: Bool {
      return self._mutableCopy != nil
    }
    mutating func clearMutableCopy() {
      self._mutableCopy = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._mutableCopy)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._mutableCopy {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct classForCoder: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".classForCoder"

    fileprivate var _classForCoder: Int32? = nil
    var classForCoder: Int32 {
      get {return _classForCoder ?? 0}
      set {_classForCoder = newValue}
    }
    var hasClassForCoder: Bool {
      return self._classForCoder != nil
    }
    mutating func clearClassForCoder() {
      self._classForCoder = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._classForCoder)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._classForCoder {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct clear: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".clear"

    fileprivate var _clear_p: Int32? = nil
    var clear_p: Int32 {
      get {return _clear_p ?? 0}
      set {_clear_p = newValue}
    }
    var hasClear_p: Bool {
      return self._clear_p != nil
    }
    mutating func clearClear_p() {
      self._clear_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._clear_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._clear_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct data: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".data"

    fileprivate var _data: Int32? = nil
    var data: Int32 {
      get {return _data ?? 0}
      set {_data = newValue}
    }
    var hasData: Bool {
      return self._data != nil
    }
    mutating func clearData() {
      self._data = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._data)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._data {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct delimitedData: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".delimitedData"

    fileprivate var _delimitedData: Int32? = nil
    var delimitedData: Int32 {
      get {return _delimitedData ?? 0}
      set {_delimitedData = newValue}
    }
    var hasDelimitedData: Bool {
      return self._delimitedData != nil
    }
    mutating func clearDelimitedData() {
      self._delimitedData = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._delimitedData)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._delimitedData {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct descriptor: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".descriptor"

    fileprivate var _descriptor: Int32? = nil
    var descriptor: Int32 {
      get {return _descriptor ?? 0}
      set {_descriptor = newValue}
    }
    var hasDescriptor: Bool {
      return self._descriptor != nil
    }
    mutating func clearDescriptor() {
      self._descriptor = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._descriptor)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._descriptor {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct extensionRegistry: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".extensionRegistry"

    fileprivate var _extensionRegistry: Int32? = nil
    var extensionRegistry: Int32 {
      get {return _extensionRegistry ?? 0}
      set {_extensionRegistry = newValue}
    }
    var hasExtensionRegistry: Bool {
      return self._extensionRegistry != nil
    }
    mutating func clearExtensionRegistry() {
      self._extensionRegistry = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._extensionRegistry)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._extensionRegistry {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct extensionsCurrentlySet: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".extensionsCurrentlySet"

    fileprivate var _extensionsCurrentlySet: Int32? = nil
    var extensionsCurrentlySet: Int32 {
      get {return _extensionsCurrentlySet ?? 0}
      set {_extensionsCurrentlySet = newValue}
    }
    var hasExtensionsCurrentlySet: Bool {
      return self._extensionsCurrentlySet != nil
    }
    mutating func clearExtensionsCurrentlySet() {
      self._extensionsCurrentlySet = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._extensionsCurrentlySet)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._extensionsCurrentlySet {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct isInitializedMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".isInitialized"

    fileprivate var _isInitialized_p: Int32? = nil
    var isInitialized_p: Int32 {
      get {return _isInitialized_p ?? 0}
      set {_isInitialized_p = newValue}
    }
    var hasIsInitialized_p: Bool {
      return self._isInitialized_p != nil
    }
    mutating func clearIsInitialized_p() {
      self._isInitialized_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._isInitialized_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._isInitialized_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct serializedSize: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".serializedSize"

    fileprivate var _serializedSize: Int32? = nil
    var serializedSize: Int32 {
      get {return _serializedSize ?? 0}
      set {_serializedSize = newValue}
    }
    var hasSerializedSize: Bool {
      return self._serializedSize != nil
    }
    mutating func clearSerializedSize() {
      self._serializedSize = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._serializedSize)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._serializedSize {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct sortedExtensionsInUse: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".sortedExtensionsInUse"

    fileprivate var _sortedExtensionsInUse: Int32? = nil
    var sortedExtensionsInUse: Int32 {
      get {return _sortedExtensionsInUse ?? 0}
      set {_sortedExtensionsInUse = newValue}
    }
    var hasSortedExtensionsInUse: Bool {
      return self._sortedExtensionsInUse != nil
    }
    mutating func clearSortedExtensionsInUse() {
      self._sortedExtensionsInUse = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._sortedExtensionsInUse)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._sortedExtensionsInUse {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct unknownFieldsMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".unknownFields"

    fileprivate var _unknownFields_p: Int32? = nil
    var unknownFields_p: Int32 {
      get {return _unknownFields_p ?? 0}
      set {_unknownFields_p = newValue}
    }
    var hasUnknownFields_p: Bool {
      return self._unknownFields_p != nil
    }
    mutating func clearUnknownFields_p() {
      self._unknownFields_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._unknownFields_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._unknownFields_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Fixed: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Fixed"

    fileprivate var _fixed: Int32? = nil
    var fixed: Int32 {
      get {return _fixed ?? 0}
      set {_fixed = newValue}
    }
    var hasFixed: Bool {
      return self._fixed != nil
    }
    mutating func clearFixed() {
      self._fixed = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._fixed)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._fixed {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Fract: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Fract"

    fileprivate var _fract: Int32? = nil
    var fract: Int32 {
      get {return _fract ?? 0}
      set {_fract = newValue}
    }
    var hasFract: Bool {
      return self._fract != nil
    }
    mutating func clearFract() {
      self._fract = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._fract)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._fract {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Size: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Size"

    fileprivate var _size: Int32? = nil
    var size: Int32 {
      get {return _size ?? 0}
      set {_size = newValue}
    }
    var hasSize: Bool {
      return self._size != nil
    }
    mutating func clearSize() {
      self._size = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._size)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._size {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct LogicalAddress: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".LogicalAddress"

    fileprivate var _logicalAddress: Int32? = nil
    var logicalAddress: Int32 {
      get {return _logicalAddress ?? 0}
      set {_logicalAddress = newValue}
    }
    var hasLogicalAddress: Bool {
      return self._logicalAddress != nil
    }
    mutating func clearLogicalAddress() {
      self._logicalAddress = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._logicalAddress)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._logicalAddress {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct PhysicalAddress: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".PhysicalAddress"

    fileprivate var _physicalAddress: Int32? = nil
    var physicalAddress: Int32 {
      get {return _physicalAddress ?? 0}
      set {_physicalAddress = newValue}
    }
    var hasPhysicalAddress: Bool {
      return self._physicalAddress != nil
    }
    mutating func clearPhysicalAddress() {
      self._physicalAddress = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._physicalAddress)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._physicalAddress {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ByteCount: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".ByteCount"

    fileprivate var _byteCount: Int32? = nil
    var byteCount: Int32 {
      get {return _byteCount ?? 0}
      set {_byteCount = newValue}
    }
    var hasByteCount: Bool {
      return self._byteCount != nil
    }
    mutating func clearByteCount() {
      self._byteCount = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._byteCount)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._byteCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ByteOffset: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".ByteOffset"

    fileprivate var _byteOffset: Int32? = nil
    var byteOffset: Int32 {
      get {return _byteOffset ?? 0}
      set {_byteOffset = newValue}
    }
    var hasByteOffset: Bool {
      return self._byteOffset != nil
    }
    mutating func clearByteOffset() {
      self._byteOffset = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._byteOffset)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._byteOffset {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Duration: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Duration"

    fileprivate var _duration: Int32? = nil
    var duration: Int32 {
      get {return _duration ?? 0}
      set {_duration = newValue}
    }
    var hasDuration: Bool {
      return self._duration != nil
    }
    mutating func clearDuration() {
      self._duration = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._duration)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._duration {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct AbsoluteTime: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".AbsoluteTime"

    fileprivate var _absoluteTime: Int32? = nil
    var absoluteTime: Int32 {
      get {return _absoluteTime ?? 0}
      set {_absoluteTime = newValue}
    }
    var hasAbsoluteTime: Bool {
      return self._absoluteTime != nil
    }
    mutating func clearAbsoluteTime() {
      self._absoluteTime = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._absoluteTime)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._absoluteTime {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct OptionBits: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".OptionBits"

    fileprivate var _optionBits: Int32? = nil
    var optionBits: Int32 {
      get {return _optionBits ?? 0}
      set {_optionBits = newValue}
    }
    var hasOptionBits: Bool {
      return self._optionBits != nil
    }
    mutating func clearOptionBits() {
      self._optionBits = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._optionBits)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._optionBits {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ItemCount: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".ItemCount"

    fileprivate var _itemCount: Int32? = nil
    var itemCount: Int32 {
      get {return _itemCount ?? 0}
      set {_itemCount = newValue}
    }
    var hasItemCount: Bool {
      return self._itemCount != nil
    }
    mutating func clearItemCount() {
      self._itemCount = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._itemCount)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._itemCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct PBVersion: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".PBVersion"

    fileprivate var _pbversion: Int32? = nil
    var pbversion: Int32 {
      get {return _pbversion ?? 0}
      set {_pbversion = newValue}
    }
    var hasPbversion: Bool {
      return self._pbversion != nil
    }
    mutating func clearPbversion() {
      self._pbversion = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._pbversion)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._pbversion {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ScriptCode: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".ScriptCode"

    fileprivate var _scriptCode: Int32? = nil
    var scriptCode: Int32 {
      get {return _scriptCode ?? 0}
      set {_scriptCode = newValue}
    }
    var hasScriptCode: Bool {
      return self._scriptCode != nil
    }
    mutating func clearScriptCode() {
      self._scriptCode = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._scriptCode)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._scriptCode {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct LangCode: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".LangCode"

    fileprivate var _langCode: Int32? = nil
    var langCode: Int32 {
      get {return _langCode ?? 0}
      set {_langCode = newValue}
    }
    var hasLangCode: Bool {
      return self._langCode != nil
    }
    mutating func clearLangCode() {
      self._langCode = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._langCode)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._langCode {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct RegionCode: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".RegionCode"

    fileprivate var _regionCode: Int32? = nil
    var regionCode: Int32 {
      get {return _regionCode ?? 0}
      set {_regionCode = newValue}
    }
    var hasRegionCode: Bool {
      return self._regionCode != nil
    }
    mutating func clearRegionCode() {
      self._regionCode = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._regionCode)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._regionCode {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct OSType: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".OSType"

    fileprivate var _ostype: Int32? = nil
    var ostype: Int32 {
      get {return _ostype ?? 0}
      set {_ostype = newValue}
    }
    var hasOstype: Bool {
      return self._ostype != nil
    }
    mutating func clearOstype() {
      self._ostype = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._ostype)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._ostype {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ProcessSerialNumber: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".ProcessSerialNumber"

    fileprivate var _processSerialNumber: Int32? = nil
    var processSerialNumber: Int32 {
      get {return _processSerialNumber ?? 0}
      set {_processSerialNumber = newValue}
    }
    var hasProcessSerialNumber: Bool {
      return self._processSerialNumber != nil
    }
    mutating func clearProcessSerialNumber() {
      self._processSerialNumber = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._processSerialNumber)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._processSerialNumber {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Point: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Point"

    fileprivate var _point: Int32? = nil
    var point: Int32 {
      get {return _point ?? 0}
      set {_point = newValue}
    }
    var hasPoint: Bool {
      return self._point != nil
    }
    mutating func clearPoint() {
      self._point = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._point)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._point {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Rect: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Rect"

    fileprivate var _rect: Int32? = nil
    var rect: Int32 {
      get {return _rect ?? 0}
      set {_rect = newValue}
    }
    var hasRect: Bool {
      return self._rect != nil
    }
    mutating func clearRect() {
      self._rect = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._rect)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._rect {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct FixedPoint: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".FixedPoint"

    fileprivate var _fixedPoint: Int32? = nil
    var fixedPoint: Int32 {
      get {return _fixedPoint ?? 0}
      set {_fixedPoint = newValue}
    }
    var hasFixedPoint: Bool {
      return self._fixedPoint != nil
    }
    mutating func clearFixedPoint() {
      self._fixedPoint = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._fixedPoint)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._fixedPoint {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct FixedRect: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".FixedRect"

    fileprivate var _fixedRect: Int32? = nil
    var fixedRect: Int32 {
      get {return _fixedRect ?? 0}
      set {_fixedRect = newValue}
    }
    var hasFixedRect: Bool {
      return self._fixedRect != nil
    }
    mutating func clearFixedRect() {
      self._fixedRect = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._fixedRect)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._fixedRect {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Style: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Style"

    fileprivate var _style: Int32? = nil
    var style: Int32 {
      get {return _style ?? 0}
      set {_style = newValue}
    }
    var hasStyle: Bool {
      return self._style != nil
    }
    mutating func clearStyle() {
      self._style = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._style)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._style {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct StyleParameter: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".StyleParameter"

    fileprivate var _styleParameter: Int32? = nil
    var styleParameter: Int32 {
      get {return _styleParameter ?? 0}
      set {_styleParameter = newValue}
    }
    var hasStyleParameter: Bool {
      return self._styleParameter != nil
    }
    mutating func clearStyleParameter() {
      self._styleParameter = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._styleParameter)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._styleParameter {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct StyleField: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".StyleField"

    fileprivate var _styleField: Int32? = nil
    var styleField: Int32 {
      get {return _styleField ?? 0}
      set {_styleField = newValue}
    }
    var hasStyleField: Bool {
      return self._styleField != nil
    }
    mutating func clearStyleField() {
      self._styleField = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._styleField)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._styleField {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct TimeScale: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".TimeScale"

    fileprivate var _timeScale: Int32? = nil
    var timeScale: Int32 {
      get {return _timeScale ?? 0}
      set {_timeScale = newValue}
    }
    var hasTimeScale: Bool {
      return self._timeScale != nil
    }
    mutating func clearTimeScale() {
      self._timeScale = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._timeScale)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._timeScale {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct TimeBase: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".TimeBase"

    fileprivate var _timeBase: Int32? = nil
    var timeBase: Int32 {
      get {return _timeBase ?? 0}
      set {_timeBase = newValue}
    }
    var hasTimeBase: Bool {
      return self._timeBase != nil
    }
    mutating func clearTimeBase() {
      self._timeBase = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._timeBase)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._timeBase {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct TimeRecord: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".TimeRecord"

    fileprivate var _timeRecord: Int32? = nil
    var timeRecord: Int32 {
      get {return _timeRecord ?? 0}
      set {_timeRecord = newValue}
    }
    var hasTimeRecord: Bool {
      return self._timeRecord != nil
    }
    mutating func clearTimeRecord() {
      self._timeRecord = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._timeRecord)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._timeRecord {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct serializedData: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".serializedData"

    fileprivate var _serializedData: Int32? = nil
    var serializedData: Int32 {
      get {return _serializedData ?? 0}
      set {_serializedData = newValue}
    }
    var hasSerializedData: Bool {
      return self._serializedData != nil
    }
    mutating func clearSerializedData() {
      self._serializedData = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._serializedData)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._serializedData {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct jsonUTF8Data: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".jsonUTF8Data"

    fileprivate var _jsonUtf8Data: Int32? = nil
    var jsonUtf8Data: Int32 {
      get {return _jsonUtf8Data ?? 0}
      set {_jsonUtf8Data = newValue}
    }
    var hasJsonUtf8Data: Bool {
      return self._jsonUtf8Data != nil
    }
    mutating func clearJsonUtf8Data() {
      self._jsonUtf8Data = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._jsonUtf8Data)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._jsonUtf8Data {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct jsonString: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".jsonString"

    fileprivate var _jsonString: Int32? = nil
    var jsonString: Int32 {
      get {return _jsonString ?? 0}
      set {_jsonString = newValue}
    }
    var hasJsonString: Bool {
      return self._jsonString != nil
    }
    mutating func clearJsonString() {
      self._jsonString = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._jsonString)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._jsonString {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Extension: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Extension"

    fileprivate var _extension_p: Int32? = nil
    var extension_p: Int32 {
      get {return _extension_p ?? 0}
      set {_extension_p = newValue}
    }
    var hasExtension_p: Bool {
      return self._extension_p != nil
    }
    mutating func clearExtension_p() {
      self._extension_p = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._extension_p)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._extension_p {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct ExtensionsMessage: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_MessageNames.protoMessageName + ".Extensions"

    fileprivate var _extensions: Int32? = nil
    var extensions: Int32 {
      get {return _extensions ?? 0}
      set {_extensions = newValue}
    }
    var hasExtensions: Bool {
      return self._extensions != nil
    }
    mutating func clearExtensions() {
      self._extensions = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._extensions)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._extensions {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct SwiftUnittest_Names_EnumNames: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".EnumNames"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum StringEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aString // = 0

    init() {
      self = .aString
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aString
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aString: return 0
      }
    }

  }

  enum ProtocolEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aProtocol // = 0

    init() {
      self = .aProtocol
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aProtocol
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aProtocol: return 0
      }
    }

  }

  enum IntEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aInt // = 0

    init() {
      self = .aInt
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aInt
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aInt: return 0
      }
    }

  }

  enum DoubleEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aDouble // = 0

    init() {
      self = .aDouble
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aDouble
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aDouble: return 0
      }
    }

  }

  enum FloatEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aFloat // = 0

    init() {
      self = .aFloat
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aFloat
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aFloat: return 0
      }
    }

  }

  enum UIntEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aUint // = 0

    init() {
      self = .aUint
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aUint
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aUint: return 0
      }
    }

  }

  enum hashValueEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ahashValue // = 0

    init() {
      self = .ahashValue
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ahashValue
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ahashValue: return 0
      }
    }

  }

  enum descriptionEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case adescription // = 0

    init() {
      self = .adescription
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adescription
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .adescription: return 0
      }
    }

  }

  enum debugDescriptionEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case adebugDescription // = 0

    init() {
      self = .adebugDescription
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adebugDescription
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .adebugDescription: return 0
      }
    }

  }

  enum Swift: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aSwift // = 0

    init() {
      self = .aSwift
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aSwift
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aSwift: return 0
      }
    }

  }

  enum UNRECOGNIZED: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aUnrecognized // = 0

    init() {
      self = .aUnrecognized
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aUnrecognized
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aUnrecognized: return 0
      }
    }

  }

  enum classEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aclass // = 0

    init() {
      self = .aclass
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aclass
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aclass: return 0
      }
    }

  }

  enum deinitEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case adeinit // = 0

    init() {
      self = .adeinit
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adeinit
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .adeinit: return 0
      }
    }

  }

  enum enumEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aenum // = 0

    init() {
      self = .aenum
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aenum
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aenum: return 0
      }
    }

  }

  enum extensionEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aextension // = 0

    init() {
      self = .aextension
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aextension
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aextension: return 0
      }
    }

  }

  enum funcEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case afunc // = 0

    init() {
      self = .afunc
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .afunc
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .afunc: return 0
      }
    }

  }

  enum importEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aimport // = 0

    init() {
      self = .aimport
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aimport
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aimport: return 0
      }
    }

  }

  enum initEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ainit // = 0

    init() {
      self = .ainit
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ainit
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ainit: return 0
      }
    }

  }

  enum inoutEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ainout // = 0

    init() {
      self = .ainout
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ainout
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ainout: return 0
      }
    }

  }

  enum internalEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ainternal // = 0

    init() {
      self = .ainternal
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ainternal
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ainternal: return 0
      }
    }

  }

  enum letEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case alet // = 0

    init() {
      self = .alet
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .alet
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .alet: return 0
      }
    }

  }

  enum operatorEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aoperator // = 0

    init() {
      self = .aoperator
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aoperator
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aoperator: return 0
      }
    }

  }

  enum privateEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aprivate // = 0

    init() {
      self = .aprivate
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aprivate
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aprivate: return 0
      }
    }

  }

  enum protocolEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aprotocol // = 0

    init() {
      self = .aprotocol
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aprotocol
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aprotocol: return 0
      }
    }

  }

  enum publicEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case apublic // = 0

    init() {
      self = .apublic
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .apublic
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .apublic: return 0
      }
    }

  }

  enum staticEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case astatic // = 0

    init() {
      self = .astatic
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .astatic
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .astatic: return 0
      }
    }

  }

  enum structEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case astruct // = 0

    init() {
      self = .astruct
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .astruct
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .astruct: return 0
      }
    }

  }

  enum subscriptEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case asubscript // = 0

    init() {
      self = .asubscript
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .asubscript
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .asubscript: return 0
      }
    }

  }

  enum typealiasEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case atypealias // = 0

    init() {
      self = .atypealias
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .atypealias
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .atypealias: return 0
      }
    }

  }

  enum varEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case avar // = 0

    init() {
      self = .avar
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .avar
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .avar: return 0
      }
    }

  }

  enum breakEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case abreak // = 0

    init() {
      self = .abreak
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .abreak
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .abreak: return 0
      }
    }

  }

  enum caseEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case acase // = 0

    init() {
      self = .acase
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .acase
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .acase: return 0
      }
    }

  }

  enum continueEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case acontinue // = 0

    init() {
      self = .acontinue
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .acontinue
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .acontinue: return 0
      }
    }

  }

  enum defaultEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case adefault // = 0

    init() {
      self = .adefault
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adefault
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .adefault: return 0
      }
    }

  }

  enum deferEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case adefer // = 0

    init() {
      self = .adefer
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adefer
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .adefer: return 0
      }
    }

  }

  enum doEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ado // = 0

    init() {
      self = .ado
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ado
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ado: return 0
      }
    }

  }

  enum elseEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aelse // = 0

    init() {
      self = .aelse
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aelse
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aelse: return 0
      }
    }

  }

  enum fallthroughEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case afallthrough // = 0

    init() {
      self = .afallthrough
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .afallthrough
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .afallthrough: return 0
      }
    }

  }

  enum forEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case afor // = 0

    init() {
      self = .afor
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .afor
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .afor: return 0
      }
    }

  }

  enum guardEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aguard // = 0

    init() {
      self = .aguard
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aguard
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aguard: return 0
      }
    }

  }

  enum ifEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aif // = 0

    init() {
      self = .aif
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aif
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aif: return 0
      }
    }

  }

  enum inEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ain // = 0

    init() {
      self = .ain
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ain
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ain: return 0
      }
    }

  }

  enum repeatEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case arepeat // = 0

    init() {
      self = .arepeat
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .arepeat
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .arepeat: return 0
      }
    }

  }

  enum returnEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case areturn // = 0

    init() {
      self = .areturn
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .areturn
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .areturn: return 0
      }
    }

  }

  enum switchEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aswitch // = 0

    init() {
      self = .aswitch
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aswitch
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aswitch: return 0
      }
    }

  }

  enum whereEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case awhere // = 0

    init() {
      self = .awhere
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .awhere
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .awhere: return 0
      }
    }

  }

  enum whileEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case awhile // = 0

    init() {
      self = .awhile
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .awhile
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .awhile: return 0
      }
    }

  }

  enum asEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aas // = 0

    init() {
      self = .aas
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aas
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aas: return 0
      }
    }

  }

  enum catchEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case acatch // = 0

    init() {
      self = .acatch
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .acatch
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .acatch: return 0
      }
    }

  }

  enum dynamicTypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case adynamicType // = 0

    init() {
      self = .adynamicType
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adynamicType
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .adynamicType: return 0
      }
    }

  }

  enum falseEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case afalse // = 0

    init() {
      self = .afalse
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .afalse
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .afalse: return 0
      }
    }

  }

  enum isEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ais // = 0

    init() {
      self = .ais
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ais
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ais: return 0
      }
    }

  }

  enum nilEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case anil // = 0

    init() {
      self = .anil
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anil
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .anil: return 0
      }
    }

  }

  enum rethrowsEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case arethrows // = 0

    init() {
      self = .arethrows
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .arethrows
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .arethrows: return 0
      }
    }

  }

  enum superEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case asuper // = 0

    init() {
      self = .asuper
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .asuper
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .asuper: return 0
      }
    }

  }

  enum selfEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aself // = 0

    init() {
      self = .aself
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aself
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aself: return 0
      }
    }

  }

  enum throwEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case athrow // = 0

    init() {
      self = .athrow
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .athrow
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .athrow: return 0
      }
    }

  }

  enum throwsEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case athrows // = 0

    init() {
      self = .athrows
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .athrows
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .athrows: return 0
      }
    }

  }

  enum trueEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case atrue // = 0

    init() {
      self = .atrue
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .atrue
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .atrue: return 0
      }
    }

  }

  enum tryEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case atry // = 0

    init() {
      self = .atry
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .atry
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .atry: return 0
      }
    }

  }

  enum __COLUMN__Enum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case a_Column__ // = 0

    init() {
      self = .a_Column__
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .a_Column__
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .a_Column__: return 0
      }
    }

  }

  enum __FILE__Enum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case a_File__ // = 0

    init() {
      self = .a_File__
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .a_File__
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .a_File__: return 0
      }
    }

  }

  enum __FUNCTION__Enum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case a_Function__ // = 0

    init() {
      self = .a_Function__
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .a_Function__
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .a_Function__: return 0
      }
    }

  }

  enum __LINE__Enum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case a_Line__ // = 0

    init() {
      self = .a_Line__
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .a_Line__
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .a_Line__: return 0
      }
    }

  }

  enum _Enum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case a_ // = 0

    init() {
      self = .a_
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .a_
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .a_: return 0
      }
    }

  }

  enum __Enum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case a__ // = 0

    init() {
      self = .a__
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .a__
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .a__: return 0
      }
    }

  }

  enum associativity: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aassociativity // = 0

    init() {
      self = .aassociativity
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aassociativity
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aassociativity: return 0
      }
    }

  }

  enum convenience: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aconvenience // = 0

    init() {
      self = .aconvenience
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aconvenience
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aconvenience: return 0
      }
    }

  }

  enum dynamic: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case adynamic // = 0

    init() {
      self = .adynamic
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adynamic
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .adynamic: return 0
      }
    }

  }

  enum didSet: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case adidSet // = 0

    init() {
      self = .adidSet
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adidSet
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .adidSet: return 0
      }
    }

  }

  enum final: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case afinal // = 0

    init() {
      self = .afinal
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .afinal
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .afinal: return 0
      }
    }

  }

  enum get: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aget // = 0

    init() {
      self = .aget
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aget
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aget: return 0
      }
    }

  }

  enum infix: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ainfix // = 0

    init() {
      self = .ainfix
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ainfix
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ainfix: return 0
      }
    }

  }

  enum indirect: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aindirect // = 0

    init() {
      self = .aindirect
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aindirect
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aindirect: return 0
      }
    }

  }

  enum lazy: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case alazy // = 0

    init() {
      self = .alazy
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .alazy
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .alazy: return 0
      }
    }

  }

  enum left: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aleft // = 0

    init() {
      self = .aleft
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aleft
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aleft: return 0
      }
    }

  }

  enum mutating: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case amutating // = 0

    init() {
      self = .amutating
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .amutating
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .amutating: return 0
      }
    }

  }

  enum none: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case anone // = 0

    init() {
      self = .anone
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anone
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .anone: return 0
      }
    }

  }

  enum nonmutating: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case anonmutating // = 0

    init() {
      self = .anonmutating
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anonmutating
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .anonmutating: return 0
      }
    }

  }

  enum optional: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aoptional // = 0

    init() {
      self = .aoptional
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aoptional
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aoptional: return 0
      }
    }

  }

  enum override: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aoverride // = 0

    init() {
      self = .aoverride
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aoverride
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aoverride: return 0
      }
    }

  }

  enum postfix: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case apostfix // = 0

    init() {
      self = .apostfix
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .apostfix
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .apostfix: return 0
      }
    }

  }

  enum precedence: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aprecedence // = 0

    init() {
      self = .aprecedence
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aprecedence
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aprecedence: return 0
      }
    }

  }

  enum prefix: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aprefix // = 0

    init() {
      self = .aprefix
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aprefix
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aprefix: return 0
      }
    }

  }

  enum required: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case arequired // = 0

    init() {
      self = .arequired
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .arequired
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .arequired: return 0
      }
    }

  }

  enum right: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aright // = 0

    init() {
      self = .aright
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aright
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aright: return 0
      }
    }

  }

  enum set: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aset // = 0

    init() {
      self = .aset
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aset
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aset: return 0
      }
    }

  }

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aType // = 0

    init() {
      self = .aType
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aType
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aType: return 0
      }
    }

  }

  enum unowned: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aunowned // = 0

    init() {
      self = .aunowned
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aunowned
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aunowned: return 0
      }
    }

  }

  enum weak: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aweak // = 0

    init() {
      self = .aweak
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aweak
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aweak: return 0
      }
    }

  }

  enum willSet: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case awillSet // = 0

    init() {
      self = .awillSet
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .awillSet
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .awillSet: return 0
      }
    }

  }

  enum id: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aid // = 0

    init() {
      self = .aid
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aid
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aid: return 0
      }
    }

  }

  enum _cmd: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aCmd // = 0

    init() {
      self = .aCmd
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aCmd
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aCmd: return 0
      }
    }

  }

  enum out: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aout // = 0

    init() {
      self = .aout
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aout
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aout: return 0
      }
    }

  }

  enum bycopy: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case abycopy // = 0

    init() {
      self = .abycopy
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .abycopy
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .abycopy: return 0
      }
    }

  }

  enum byref: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case abyref // = 0

    init() {
      self = .abyref
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .abyref
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .abyref: return 0
      }
    }

  }

  enum oneway: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aoneway // = 0

    init() {
      self = .aoneway
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aoneway
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aoneway: return 0
      }
    }

  }

  enum and: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aand // = 0

    init() {
      self = .aand
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aand
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aand: return 0
      }
    }

  }

  enum and_eq: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aandEq // = 0

    init() {
      self = .aandEq
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aandEq
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aandEq: return 0
      }
    }

  }

  enum alignas: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aalignas // = 0

    init() {
      self = .aalignas
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aalignas
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aalignas: return 0
      }
    }

  }

  enum alignof: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aalignof // = 0

    init() {
      self = .aalignof
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aalignof
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aalignof: return 0
      }
    }

  }

  enum asm: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aasm // = 0

    init() {
      self = .aasm
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aasm
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aasm: return 0
      }
    }

  }

  enum auto: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aauto // = 0

    init() {
      self = .aauto
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aauto
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aauto: return 0
      }
    }

  }

  enum bitand: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case abitand // = 0

    init() {
      self = .abitand
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .abitand
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .abitand: return 0
      }
    }

  }

  enum bitor: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case abitor // = 0

    init() {
      self = .abitor
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .abitor
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .abitor: return 0
      }
    }

  }

  enum bool: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case abool // = 0

    init() {
      self = .abool
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .abool
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .abool: return 0
      }
    }

  }

  enum char: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case achar // = 0

    init() {
      self = .achar
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .achar
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .achar: return 0
      }
    }

  }

  enum char16_t: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case achar16T // = 0

    init() {
      self = .achar16T
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .achar16T
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .achar16T: return 0
      }
    }

  }

  enum char32_t: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case achar32T // = 0

    init() {
      self = .achar32T
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .achar32T
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .achar32T: return 0
      }
    }

  }

  enum compl: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case acompl // = 0

    init() {
      self = .acompl
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .acompl
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .acompl: return 0
      }
    }

  }

  enum const: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aconst // = 0

    init() {
      self = .aconst
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aconst
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aconst: return 0
      }
    }

  }

  enum constexpr: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aconstexpr // = 0

    init() {
      self = .aconstexpr
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aconstexpr
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aconstexpr: return 0
      }
    }

  }

  enum const_cast: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aconstCast // = 0

    init() {
      self = .aconstCast
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aconstCast
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aconstCast: return 0
      }
    }

  }

  enum decltype: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case adecltype // = 0

    init() {
      self = .adecltype
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adecltype
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .adecltype: return 0
      }
    }

  }

  enum delete: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case adelete // = 0

    init() {
      self = .adelete
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adelete
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .adelete: return 0
      }
    }

  }

  enum dynamic_cast: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case adynamicCast // = 0

    init() {
      self = .adynamicCast
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adynamicCast
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .adynamicCast: return 0
      }
    }

  }

  enum explicit: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aexplicit // = 0

    init() {
      self = .aexplicit
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aexplicit
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aexplicit: return 0
      }
    }

  }

  enum export: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aexport // = 0

    init() {
      self = .aexport
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aexport
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aexport: return 0
      }
    }

  }

  enum extern: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aextern // = 0

    init() {
      self = .aextern
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aextern
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aextern: return 0
      }
    }

  }

  enum friend: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case afriend // = 0

    init() {
      self = .afriend
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .afriend
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .afriend: return 0
      }
    }

  }

  enum goto: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case agoto // = 0

    init() {
      self = .agoto
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .agoto
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .agoto: return 0
      }
    }

  }

  enum inline: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ainline // = 0

    init() {
      self = .ainline
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ainline
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ainline: return 0
      }
    }

  }

  enum long: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case along // = 0

    init() {
      self = .along
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .along
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .along: return 0
      }
    }

  }

  enum mutable: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case amutable // = 0

    init() {
      self = .amutable
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .amutable
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .amutable: return 0
      }
    }

  }

  enum namespace: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case anamespace // = 0

    init() {
      self = .anamespace
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anamespace
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .anamespace: return 0
      }
    }

  }

  enum new: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case anew // = 0

    init() {
      self = .anew
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anew
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .anew: return 0
      }
    }

  }

  enum noexcept: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case anoexcept // = 0

    init() {
      self = .anoexcept
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anoexcept
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .anoexcept: return 0
      }
    }

  }

  enum not: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case anot // = 0

    init() {
      self = .anot
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anot
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .anot: return 0
      }
    }

  }

  enum not_eq: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case anotEq // = 0

    init() {
      self = .anotEq
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anotEq
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .anotEq: return 0
      }
    }

  }

  enum nullptr: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case anullptr // = 0

    init() {
      self = .anullptr
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .anullptr
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .anullptr: return 0
      }
    }

  }

  enum or: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aor // = 0

    init() {
      self = .aor
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aor
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aor: return 0
      }
    }

  }

  enum or_eq: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aorEq // = 0

    init() {
      self = .aorEq
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aorEq
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aorEq: return 0
      }
    }

  }

  enum protected: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aprotected // = 0

    init() {
      self = .aprotected
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aprotected
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aprotected: return 0
      }
    }

  }

  enum register: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aregister // = 0

    init() {
      self = .aregister
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aregister
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aregister: return 0
      }
    }

  }

  enum reinterpret_cast: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case areinterpretCast // = 0

    init() {
      self = .areinterpretCast
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .areinterpretCast
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .areinterpretCast: return 0
      }
    }

  }

  enum short: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ashort // = 0

    init() {
      self = .ashort
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ashort
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ashort: return 0
      }
    }

  }

  enum signed: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case asigned // = 0

    init() {
      self = .asigned
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .asigned
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .asigned: return 0
      }
    }

  }

  enum sizeof: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case asizeof // = 0

    init() {
      self = .asizeof
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .asizeof
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .asizeof: return 0
      }
    }

  }

  enum static_assert: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case astaticAssert // = 0

    init() {
      self = .astaticAssert
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .astaticAssert
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .astaticAssert: return 0
      }
    }

  }

  enum static_cast: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case astaticCast // = 0

    init() {
      self = .astaticCast
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .astaticCast
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .astaticCast: return 0
      }
    }

  }

  enum template: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case atemplate // = 0

    init() {
      self = .atemplate
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .atemplate
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .atemplate: return 0
      }
    }

  }

  enum this: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case athis // = 0

    init() {
      self = .athis
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .athis
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .athis: return 0
      }
    }

  }

  enum thread_local: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case athreadLocal // = 0

    init() {
      self = .athreadLocal
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .athreadLocal
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .athreadLocal: return 0
      }
    }

  }

  enum typedef: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case atypedef // = 0

    init() {
      self = .atypedef
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .atypedef
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .atypedef: return 0
      }
    }

  }

  enum typeid: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case atypeid // = 0

    init() {
      self = .atypeid
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .atypeid
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .atypeid: return 0
      }
    }

  }

  enum typename: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case atypename // = 0

    init() {
      self = .atypename
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .atypename
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .atypename: return 0
      }
    }

  }

  enum union: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aunion // = 0

    init() {
      self = .aunion
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aunion
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aunion: return 0
      }
    }

  }

  enum unsigned: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aunsigned // = 0

    init() {
      self = .aunsigned
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aunsigned
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aunsigned: return 0
      }
    }

  }

  enum using: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ausing // = 0

    init() {
      self = .ausing
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ausing
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ausing: return 0
      }
    }

  }

  enum virtual: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case avirtual // = 0

    init() {
      self = .avirtual
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .avirtual
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .avirtual: return 0
      }
    }

  }

  enum void: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case avoid // = 0

    init() {
      self = .avoid
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .avoid
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .avoid: return 0
      }
    }

  }

  enum volatile: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case avolatile // = 0

    init() {
      self = .avolatile
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .avolatile
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .avolatile: return 0
      }
    }

  }

  enum wchar_t: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case awcharT // = 0

    init() {
      self = .awcharT
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .awcharT
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .awcharT: return 0
      }
    }

  }

  enum xor: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case axor // = 0

    init() {
      self = .axor
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .axor
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .axor: return 0
      }
    }

  }

  enum xor_eq: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case axorEq // = 0

    init() {
      self = .axorEq
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .axorEq
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .axorEq: return 0
      }
    }

  }

  enum restrict: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case arestrict // = 0

    init() {
      self = .arestrict
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .arestrict
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .arestrict: return 0
      }
    }

  }

  enum Category: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aCategory // = 0

    init() {
      self = .aCategory
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aCategory
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aCategory: return 0
      }
    }

  }

  enum Ivar: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aIvar // = 0

    init() {
      self = .aIvar
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aIvar
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aIvar: return 0
      }
    }

  }

  enum Method: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aMethod // = 0

    init() {
      self = .aMethod
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aMethod
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aMethod: return 0
      }
    }

  }

  enum finalize: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case afinalize // = 0

    init() {
      self = .afinalize
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .afinalize
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .afinalize: return 0
      }
    }

  }

  enum hash: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case ahash // = 0

    init() {
      self = .ahash
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .ahash
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .ahash: return 0
      }
    }

  }

  enum dealloc: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case adealloc // = 0

    init() {
      self = .adealloc
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adealloc
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .adealloc: return 0
      }
    }

  }

  enum superclass: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case asuperclass // = 0

    init() {
      self = .asuperclass
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .asuperclass
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .asuperclass: return 0
      }
    }

  }

  enum retain: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aretain // = 0

    init() {
      self = .aretain
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aretain
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aretain: return 0
      }
    }

  }

  enum release: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case arelease // = 0

    init() {
      self = .arelease
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .arelease
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .arelease: return 0
      }
    }

  }

  enum autorelease: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aautorelease // = 0

    init() {
      self = .aautorelease
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aautorelease
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aautorelease: return 0
      }
    }

  }

  enum retainCount: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aretainCount // = 0

    init() {
      self = .aretainCount
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aretainCount
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aretainCount: return 0
      }
    }

  }

  enum zone: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case azone // = 0

    init() {
      self = .azone
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .azone
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .azone: return 0
      }
    }

  }

  enum isProxy: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aisProxy // = 0

    init() {
      self = .aisProxy
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aisProxy
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aisProxy: return 0
      }
    }

  }

  enum copy: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case acopy // = 0

    init() {
      self = .acopy
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .acopy
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .acopy: return 0
      }
    }

  }

  enum mutableCopy: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case amutableCopy // = 0

    init() {
      self = .amutableCopy
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .amutableCopy
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .amutableCopy: return 0
      }
    }

  }

  enum classForCoder: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aclassForCoder // = 0

    init() {
      self = .aclassForCoder
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aclassForCoder
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aclassForCoder: return 0
      }
    }

  }

  enum clear: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aclear // = 0

    init() {
      self = .aclear
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aclear
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aclear: return 0
      }
    }

  }

  enum data: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case adata // = 0

    init() {
      self = .adata
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adata
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .adata: return 0
      }
    }

  }

  enum delimitedData: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case adelimitedData // = 0

    init() {
      self = .adelimitedData
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adelimitedData
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .adelimitedData: return 0
      }
    }

  }

  enum descriptor: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case adescriptor // = 0

    init() {
      self = .adescriptor
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .adescriptor
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .adescriptor: return 0
      }
    }

  }

  enum extensionRegistry: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aextensionRegistry // = 0

    init() {
      self = .aextensionRegistry
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aextensionRegistry
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aextensionRegistry: return 0
      }
    }

  }

  enum extensionsCurrentlySet: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aextensionsCurrentlySet // = 0

    init() {
      self = .aextensionsCurrentlySet
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aextensionsCurrentlySet
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aextensionsCurrentlySet: return 0
      }
    }

  }

  enum isInitializedEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aisInitialized // = 0

    init() {
      self = .aisInitialized
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aisInitialized
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aisInitialized: return 0
      }
    }

  }

  enum serializedSize: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aserializedSize // = 0

    init() {
      self = .aserializedSize
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aserializedSize
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aserializedSize: return 0
      }
    }

  }

  enum sortedExtensionsInUse: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case asortedExtensionsInUse // = 0

    init() {
      self = .asortedExtensionsInUse
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .asortedExtensionsInUse
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .asortedExtensionsInUse: return 0
      }
    }

  }

  enum unknownFieldsEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aunknownFields // = 0

    init() {
      self = .aunknownFields
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aunknownFields
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aunknownFields: return 0
      }
    }

  }

  enum Fixed: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aFixed // = 0

    init() {
      self = .aFixed
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aFixed
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aFixed: return 0
      }
    }

  }

  enum Fract: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aFract // = 0

    init() {
      self = .aFract
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aFract
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aFract: return 0
      }
    }

  }

  enum Size: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aSize // = 0

    init() {
      self = .aSize
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aSize
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aSize: return 0
      }
    }

  }

  enum LogicalAddress: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aLogicalAddress // = 0

    init() {
      self = .aLogicalAddress
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aLogicalAddress
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aLogicalAddress: return 0
      }
    }

  }

  enum PhysicalAddress: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aPhysicalAddress // = 0

    init() {
      self = .aPhysicalAddress
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aPhysicalAddress
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aPhysicalAddress: return 0
      }
    }

  }

  enum ByteCount: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aByteCount // = 0

    init() {
      self = .aByteCount
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aByteCount
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aByteCount: return 0
      }
    }

  }

  enum ByteOffset: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aByteOffset // = 0

    init() {
      self = .aByteOffset
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aByteOffset
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aByteOffset: return 0
      }
    }

  }

  enum Duration: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aDuration // = 0

    init() {
      self = .aDuration
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aDuration
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aDuration: return 0
      }
    }

  }

  enum AbsoluteTime: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aAbsoluteTime // = 0

    init() {
      self = .aAbsoluteTime
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aAbsoluteTime
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aAbsoluteTime: return 0
      }
    }

  }

  enum OptionBits: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aOptionBits // = 0

    init() {
      self = .aOptionBits
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aOptionBits
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aOptionBits: return 0
      }
    }

  }

  enum ItemCount: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aItemCount // = 0

    init() {
      self = .aItemCount
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aItemCount
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aItemCount: return 0
      }
    }

  }

  enum PBVersion: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aPbversion // = 0

    init() {
      self = .aPbversion
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aPbversion
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aPbversion: return 0
      }
    }

  }

  enum ScriptCode: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aScriptCode // = 0

    init() {
      self = .aScriptCode
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aScriptCode
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aScriptCode: return 0
      }
    }

  }

  enum LangCode: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aLangCode // = 0

    init() {
      self = .aLangCode
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aLangCode
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aLangCode: return 0
      }
    }

  }

  enum RegionCode: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aRegionCode // = 0

    init() {
      self = .aRegionCode
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aRegionCode
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aRegionCode: return 0
      }
    }

  }

  enum OSType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aOstype // = 0

    init() {
      self = .aOstype
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aOstype
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aOstype: return 0
      }
    }

  }

  enum ProcessSerialNumber: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aProcessSerialNumber // = 0

    init() {
      self = .aProcessSerialNumber
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aProcessSerialNumber
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aProcessSerialNumber: return 0
      }
    }

  }

  enum Point: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aPoint // = 0

    init() {
      self = .aPoint
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aPoint
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aPoint: return 0
      }
    }

  }

  enum Rect: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aRect // = 0

    init() {
      self = .aRect
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aRect
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aRect: return 0
      }
    }

  }

  enum FixedPoint: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aFixedPoint // = 0

    init() {
      self = .aFixedPoint
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aFixedPoint
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aFixedPoint: return 0
      }
    }

  }

  enum FixedRect: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aFixedRect // = 0

    init() {
      self = .aFixedRect
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aFixedRect
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aFixedRect: return 0
      }
    }

  }

  enum Style: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aStyle // = 0

    init() {
      self = .aStyle
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aStyle
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aStyle: return 0
      }
    }

  }

  enum StyleParameter: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aStyleParameter // = 0

    init() {
      self = .aStyleParameter
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aStyleParameter
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aStyleParameter: return 0
      }
    }

  }

  enum StyleField: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aStyleField // = 0

    init() {
      self = .aStyleField
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aStyleField
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aStyleField: return 0
      }
    }

  }

  enum TimeScale: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aTimeScale // = 0

    init() {
      self = .aTimeScale
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aTimeScale
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aTimeScale: return 0
      }
    }

  }

  enum TimeBase: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aTimeBase // = 0

    init() {
      self = .aTimeBase
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aTimeBase
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aTimeBase: return 0
      }
    }

  }

  enum TimeRecord: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aTimeRecord // = 0

    init() {
      self = .aTimeRecord
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aTimeRecord
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aTimeRecord: return 0
      }
    }

  }

  enum Extension: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aExtension // = 0

    init() {
      self = .aExtension
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aExtension
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aExtension: return 0
      }
    }

  }

  enum ExtensionsEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case aExtensions // = 0

    init() {
      self = .aExtensions
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .aExtensions
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .aExtensions: return 0
      }
    }

  }

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct SwiftUnittest_Names_FieldNamingInitials: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".FieldNamingInitials"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Lowers: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_FieldNamingInitials.protoMessageName + ".Lowers"

    fileprivate var _http: Int32? = nil
    var http: Int32 {
      get {return _http ?? 0}
      set {_http = newValue}
    }
    var hasHTTP: Bool {
      return self._http != nil
    }
    mutating func clearHTTP() {
      self._http = nil
    }

    fileprivate var _httpRequest: Int32? = nil
    var httpRequest: Int32 {
      get {return _httpRequest ?? 0}
      set {_httpRequest = newValue}
    }
    var hasHTTPRequest: Bool {
      return self._httpRequest != nil
    }
    mutating func clearHTTPRequest() {
      self._httpRequest = nil
    }

    fileprivate var _theHTTPRequest: Int32? = nil
    var theHTTPRequest: Int32 {
      get {return _theHTTPRequest ?? 0}
      set {_theHTTPRequest = newValue}
    }
    var hasTheHTTPRequest: Bool {
      return self._theHTTPRequest != nil
    }
    mutating func clearTheHTTPRequest() {
      self._theHTTPRequest = nil
    }

    fileprivate var _theHTTP: Int32? = nil
    var theHTTP: Int32 {
      get {return _theHTTP ?? 0}
      set {_theHTTP = newValue}
    }
    var hasTheHTTP: Bool {
      return self._theHTTP != nil
    }
    mutating func clearTheHTTP() {
      self._theHTTP = nil
    }

    fileprivate var _https: Int32? = nil
    var https: Int32 {
      get {return _https ?? 0}
      set {_https = newValue}
    }
    var hasHTTPS: Bool {
      return self._https != nil
    }
    mutating func clearHTTPS() {
      self._https = nil
    }

    fileprivate var _httpsRequest: Int32? = nil
    var httpsRequest: Int32 {
      get {return _httpsRequest ?? 0}
      set {_httpsRequest = newValue}
    }
    var hasHTTPSRequest: Bool {
      return self._httpsRequest != nil
    }
    mutating func clearHTTPSRequest() {
      self._httpsRequest = nil
    }

    fileprivate var _theHTTPSRequest: Int32? = nil
    var theHTTPSRequest: Int32 {
      get {return _theHTTPSRequest ?? 0}
      set {_theHTTPSRequest = newValue}
    }
    var hasTheHTTPSRequest: Bool {
      return self._theHTTPSRequest != nil
    }
    mutating func clearTheHTTPSRequest() {
      self._theHTTPSRequest = nil
    }

    fileprivate var _theHTTPS: Int32? = nil
    var theHTTPS: Int32 {
      get {return _theHTTPS ?? 0}
      set {_theHTTPS = newValue}
    }
    var hasTheHTTPS: Bool {
      return self._theHTTPS != nil
    }
    mutating func clearTheHTTPS() {
      self._theHTTPS = nil
    }

    fileprivate var _url: Int32? = nil
    var url: Int32 {
      get {return _url ?? 0}
      set {_url = newValue}
    }
    var hasURL: Bool {
      return self._url != nil
    }
    mutating func clearURL() {
      self._url = nil
    }

    fileprivate var _urlValue: Int32? = nil
    var urlValue: Int32 {
      get {return _urlValue ?? 0}
      set {_urlValue = newValue}
    }
    var hasURLValue: Bool {
      return self._urlValue != nil
    }
    mutating func clearURLValue() {
      self._urlValue = nil
    }

    fileprivate var _theURLValue: Int32? = nil
    var theURLValue: Int32 {
      get {return _theURLValue ?? 0}
      set {_theURLValue = newValue}
    }
    var hasTheURLValue: Bool {
      return self._theURLValue != nil
    }
    mutating func clearTheURLValue() {
      self._theURLValue = nil
    }

    fileprivate var _theURL: Int32? = nil
    var theURL: Int32 {
      get {return _theURL ?? 0}
      set {_theURL = newValue}
    }
    var hasTheURL: Bool {
      return self._theURL != nil
    }
    mutating func clearTheURL() {
      self._theURL = nil
    }

    fileprivate var _aBC: Int32? = nil
    var aBC: Int32 {
      get {return _aBC ?? 0}
      set {_aBC = newValue}
    }
    var hasABC: Bool {
      return self._aBC != nil
    }
    mutating func clearABC() {
      self._aBC = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._http)
        case 2: try decoder.decodeSingularInt32Field(value: &self._httpRequest)
        case 3: try decoder.decodeSingularInt32Field(value: &self._theHTTPRequest)
        case 4: try decoder.decodeSingularInt32Field(value: &self._theHTTP)
        case 11: try decoder.decodeSingularInt32Field(value: &self._https)
        case 12: try decoder.decodeSingularInt32Field(value: &self._httpsRequest)
        case 13: try decoder.decodeSingularInt32Field(value: &self._theHTTPSRequest)
        case 14: try decoder.decodeSingularInt32Field(value: &self._theHTTPS)
        case 21: try decoder.decodeSingularInt32Field(value: &self._url)
        case 22: try decoder.decodeSingularInt32Field(value: &self._urlValue)
        case 23: try decoder.decodeSingularInt32Field(value: &self._theURLValue)
        case 24: try decoder.decodeSingularInt32Field(value: &self._theURL)
        case 31: try decoder.decodeSingularInt32Field(value: &self._aBC)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._http {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = self._httpRequest {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      }
      if let v = self._theHTTPRequest {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      if let v = self._theHTTP {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      }
      if let v = self._https {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
      }
      if let v = self._httpsRequest {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
      }
      if let v = self._theHTTPSRequest {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      }
      if let v = self._theHTTPS {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
      }
      if let v = self._url {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
      }
      if let v = self._urlValue {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 22)
      }
      if let v = self._theURLValue {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 23)
      }
      if let v = self._theURL {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 24)
      }
      if let v = self._aBC {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 31)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct Uppers: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_FieldNamingInitials.protoMessageName + ".Uppers"

    fileprivate var _http: Int32? = nil
    var http: Int32 {
      get {return _http ?? 0}
      set {_http = newValue}
    }
    var hasHTTP: Bool {
      return self._http != nil
    }
    mutating func clearHTTP() {
      self._http = nil
    }

    fileprivate var _httpRequest: Int32? = nil
    var httpRequest: Int32 {
      get {return _httpRequest ?? 0}
      set {_httpRequest = newValue}
    }
    var hasHTTPRequest: Bool {
      return self._httpRequest != nil
    }
    mutating func clearHTTPRequest() {
      self._httpRequest = nil
    }

    fileprivate var _theHTTPRequest: Int32? = nil
    var theHTTPRequest: Int32 {
      get {return _theHTTPRequest ?? 0}
      set {_theHTTPRequest = newValue}
    }
    var hasTheHTTPRequest: Bool {
      return self._theHTTPRequest != nil
    }
    mutating func clearTheHTTPRequest() {
      self._theHTTPRequest = nil
    }

    fileprivate var _theHTTP: Int32? = nil
    var theHTTP: Int32 {
      get {return _theHTTP ?? 0}
      set {_theHTTP = newValue}
    }
    var hasTheHTTP: Bool {
      return self._theHTTP != nil
    }
    mutating func clearTheHTTP() {
      self._theHTTP = nil
    }

    fileprivate var _https: Int32? = nil
    var https: Int32 {
      get {return _https ?? 0}
      set {_https = newValue}
    }
    var hasHTTPS: Bool {
      return self._https != nil
    }
    mutating func clearHTTPS() {
      self._https = nil
    }

    fileprivate var _httpsRequest: Int32? = nil
    var httpsRequest: Int32 {
      get {return _httpsRequest ?? 0}
      set {_httpsRequest = newValue}
    }
    var hasHTTPSRequest: Bool {
      return self._httpsRequest != nil
    }
    mutating func clearHTTPSRequest() {
      self._httpsRequest = nil
    }

    fileprivate var _theHTTPSRequest: Int32? = nil
    var theHTTPSRequest: Int32 {
      get {return _theHTTPSRequest ?? 0}
      set {_theHTTPSRequest = newValue}
    }
    var hasTheHTTPSRequest: Bool {
      return self._theHTTPSRequest != nil
    }
    mutating func clearTheHTTPSRequest() {
      self._theHTTPSRequest = nil
    }

    fileprivate var _theHTTPS: Int32? = nil
    var theHTTPS: Int32 {
      get {return _theHTTPS ?? 0}
      set {_theHTTPS = newValue}
    }
    var hasTheHTTPS: Bool {
      return self._theHTTPS != nil
    }
    mutating func clearTheHTTPS() {
      self._theHTTPS = nil
    }

    fileprivate var _url: Int32? = nil
    var url: Int32 {
      get {return _url ?? 0}
      set {_url = newValue}
    }
    var hasURL: Bool {
      return self._url != nil
    }
    mutating func clearURL() {
      self._url = nil
    }

    fileprivate var _urlValue: Int32? = nil
    var urlValue: Int32 {
      get {return _urlValue ?? 0}
      set {_urlValue = newValue}
    }
    var hasURLValue: Bool {
      return self._urlValue != nil
    }
    mutating func clearURLValue() {
      self._urlValue = nil
    }

    fileprivate var _theURLValue: Int32? = nil
    var theURLValue: Int32 {
      get {return _theURLValue ?? 0}
      set {_theURLValue = newValue}
    }
    var hasTheURLValue: Bool {
      return self._theURLValue != nil
    }
    mutating func clearTheURLValue() {
      self._theURLValue = nil
    }

    fileprivate var _theURL: Int32? = nil
    var theURL: Int32 {
      get {return _theURL ?? 0}
      set {_theURL = newValue}
    }
    var hasTheURL: Bool {
      return self._theURL != nil
    }
    mutating func clearTheURL() {
      self._theURL = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._http)
        case 2: try decoder.decodeSingularInt32Field(value: &self._httpRequest)
        case 3: try decoder.decodeSingularInt32Field(value: &self._theHTTPRequest)
        case 4: try decoder.decodeSingularInt32Field(value: &self._theHTTP)
        case 11: try decoder.decodeSingularInt32Field(value: &self._https)
        case 12: try decoder.decodeSingularInt32Field(value: &self._httpsRequest)
        case 13: try decoder.decodeSingularInt32Field(value: &self._theHTTPSRequest)
        case 14: try decoder.decodeSingularInt32Field(value: &self._theHTTPS)
        case 21: try decoder.decodeSingularInt32Field(value: &self._url)
        case 22: try decoder.decodeSingularInt32Field(value: &self._urlValue)
        case 23: try decoder.decodeSingularInt32Field(value: &self._theURLValue)
        case 24: try decoder.decodeSingularInt32Field(value: &self._theURL)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._http {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = self._httpRequest {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      }
      if let v = self._theHTTPRequest {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      if let v = self._theHTTP {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      }
      if let v = self._https {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
      }
      if let v = self._httpsRequest {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
      }
      if let v = self._theHTTPSRequest {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      }
      if let v = self._theHTTPS {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
      }
      if let v = self._url {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
      }
      if let v = self._urlValue {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 22)
      }
      if let v = self._theURLValue {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 23)
      }
      if let v = self._theURL {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 24)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  struct WordCase: SwiftProtobuf.Message {
    static let protoMessageName: String = SwiftUnittest_Names_FieldNamingInitials.protoMessageName + ".WordCase"

    fileprivate var _http: Int32? = nil
    var http: Int32 {
      get {return _http ?? 0}
      set {_http = newValue}
    }
    var hasHTTP: Bool {
      return self._http != nil
    }
    mutating func clearHTTP() {
      self._http = nil
    }

    fileprivate var _httpRequest: Int32? = nil
    var httpRequest: Int32 {
      get {return _httpRequest ?? 0}
      set {_httpRequest = newValue}
    }
    var hasHTTPRequest: Bool {
      return self._httpRequest != nil
    }
    mutating func clearHTTPRequest() {
      self._httpRequest = nil
    }

    fileprivate var _theHTTPRequest: Int32? = nil
    var theHTTPRequest: Int32 {
      get {return _theHTTPRequest ?? 0}
      set {_theHTTPRequest = newValue}
    }
    var hasTheHTTPRequest: Bool {
      return self._theHTTPRequest != nil
    }
    mutating func clearTheHTTPRequest() {
      self._theHTTPRequest = nil
    }

    fileprivate var _theHTTP: Int32? = nil
    var theHTTP: Int32 {
      get {return _theHTTP ?? 0}
      set {_theHTTP = newValue}
    }
    var hasTheHTTP: Bool {
      return self._theHTTP != nil
    }
    mutating func clearTheHTTP() {
      self._theHTTP = nil
    }

    fileprivate var _https: Int32? = nil
    var https: Int32 {
      get {return _https ?? 0}
      set {_https = newValue}
    }
    var hasHTTPS: Bool {
      return self._https != nil
    }
    mutating func clearHTTPS() {
      self._https = nil
    }

    fileprivate var _httpsRequest: Int32? = nil
    var httpsRequest: Int32 {
      get {return _httpsRequest ?? 0}
      set {_httpsRequest = newValue}
    }
    var hasHTTPSRequest: Bool {
      return self._httpsRequest != nil
    }
    mutating func clearHTTPSRequest() {
      self._httpsRequest = nil
    }

    fileprivate var _theHTTPSRequest: Int32? = nil
    var theHTTPSRequest: Int32 {
      get {return _theHTTPSRequest ?? 0}
      set {_theHTTPSRequest = newValue}
    }
    var hasTheHTTPSRequest: Bool {
      return self._theHTTPSRequest != nil
    }
    mutating func clearTheHTTPSRequest() {
      self._theHTTPSRequest = nil
    }

    fileprivate var _theHTTPS: Int32? = nil
    var theHTTPS: Int32 {
      get {return _theHTTPS ?? 0}
      set {_theHTTPS = newValue}
    }
    var hasTheHTTPS: Bool {
      return self._theHTTPS != nil
    }
    mutating func clearTheHTTPS() {
      self._theHTTPS = nil
    }

    fileprivate var _url: Int32? = nil
    var url: Int32 {
      get {return _url ?? 0}
      set {_url = newValue}
    }
    var hasURL: Bool {
      return self._url != nil
    }
    mutating func clearURL() {
      self._url = nil
    }

    fileprivate var _urlValue: Int32? = nil
    var urlValue: Int32 {
      get {return _urlValue ?? 0}
      set {_urlValue = newValue}
    }
    var hasURLValue: Bool {
      return self._urlValue != nil
    }
    mutating func clearURLValue() {
      self._urlValue = nil
    }

    fileprivate var _theURLValue: Int32? = nil
    var theURLValue: Int32 {
      get {return _theURLValue ?? 0}
      set {_theURLValue = newValue}
    }
    var hasTheURLValue: Bool {
      return self._theURLValue != nil
    }
    mutating func clearTheURLValue() {
      self._theURLValue = nil
    }

    fileprivate var _theURL: Int32? = nil
    var theURL: Int32 {
      get {return _theURL ?? 0}
      set {_theURL = newValue}
    }
    var hasTheURL: Bool {
      return self._theURL != nil
    }
    mutating func clearTheURL() {
      self._theURL = nil
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &self._http)
        case 2: try decoder.decodeSingularInt32Field(value: &self._httpRequest)
        case 3: try decoder.decodeSingularInt32Field(value: &self._theHTTPRequest)
        case 4: try decoder.decodeSingularInt32Field(value: &self._theHTTP)
        case 11: try decoder.decodeSingularInt32Field(value: &self._https)
        case 12: try decoder.decodeSingularInt32Field(value: &self._httpsRequest)
        case 13: try decoder.decodeSingularInt32Field(value: &self._theHTTPSRequest)
        case 14: try decoder.decodeSingularInt32Field(value: &self._theHTTPS)
        case 21: try decoder.decodeSingularInt32Field(value: &self._url)
        case 22: try decoder.decodeSingularInt32Field(value: &self._urlValue)
        case 23: try decoder.decodeSingularInt32Field(value: &self._theURLValue)
        case 24: try decoder.decodeSingularInt32Field(value: &self._theURL)
        default: break
        }
      }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if let v = self._http {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      }
      if let v = self._httpRequest {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      }
      if let v = self._theHTTPRequest {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      if let v = self._theHTTP {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      }
      if let v = self._https {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 11)
      }
      if let v = self._httpsRequest {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 12)
      }
      if let v = self._theHTTPSRequest {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      }
      if let v = self._theHTTPS {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
      }
      if let v = self._url {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 21)
      }
      if let v = self._urlValue {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 22)
      }
      if let v = self._theURLValue {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 23)
      }
      if let v = self._theURL {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 24)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct SwiftUnittest_Names_ExtensionNamingInitials: SwiftProtobuf.Message, SwiftProtobuf.ExtensibleMessage {
  static let protoMessageName: String = _protobuf_package + ".ExtensionNamingInitials"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      if (1 <= fieldNumber && fieldNumber < 1001) {
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: SwiftUnittest_Names_ExtensionNamingInitials.self, fieldNumber: fieldNumber)
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 1001)
    try unknownFields.traverse(visitor: &visitor)
  }

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

struct SwiftUnittest_Names_Lowers: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Lowers"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct SwiftUnittest_Names_Uppers: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Uppers"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct SwiftUnittest_Names_WordCase: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".WordCase"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct SwiftUnittest_Names_ExtensionNamingInitialsLowers: SwiftProtobuf.Message, SwiftProtobuf.ExtensibleMessage {
  static let protoMessageName: String = _protobuf_package + ".ExtensionNamingInitialsLowers"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      if (1 <= fieldNumber && fieldNumber < 1001) {
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: SwiftUnittest_Names_ExtensionNamingInitialsLowers.self, fieldNumber: fieldNumber)
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 1001)
    try unknownFields.traverse(visitor: &visitor)
  }

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

struct SwiftUnittest_Names_ExtensionNamingInitialsUppers: SwiftProtobuf.Message, SwiftProtobuf.ExtensibleMessage {
  static let protoMessageName: String = _protobuf_package + ".ExtensionNamingInitialsUppers"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      if (1 <= fieldNumber && fieldNumber < 1001) {
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: SwiftUnittest_Names_ExtensionNamingInitialsUppers.self, fieldNumber: fieldNumber)
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 1001)
    try unknownFields.traverse(visitor: &visitor)
  }

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

struct SwiftUnittest_Names_ExtensionNamingInitialsWordCase: SwiftProtobuf.Message, SwiftProtobuf.ExtensibleMessage {
  static let protoMessageName: String = _protobuf_package + ".ExtensionNamingInitialsWordCase"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      if (1 <= fieldNumber && fieldNumber < 1001) {
        try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: SwiftUnittest_Names_ExtensionNamingInitialsWordCase.self, fieldNumber: fieldNumber)
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 1, end: 1001)
    try unknownFields.traverse(visitor: &visitor)
  }

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
}

// MARK: - Extension support defined in unittest_swift_naming.proto.

extension SwiftUnittest_Names_ExtensionNamingInitialsLowers {
  var SwiftUnittest_Names_http: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_http) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_http, value: newValue)}
  }
  var hasSwiftUnittest_Names_http: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_http)
  }
  mutating func clearSwiftUnittest_Names_http() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_http)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsLowers {
  var SwiftUnittest_Names_httpRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_http_request) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_http_request, value: newValue)}
  }
  var hasSwiftUnittest_Names_httpRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_http_request)
  }
  mutating func clearSwiftUnittest_Names_httpRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_http_request)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsLowers {
  var SwiftUnittest_Names_theHTTPRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_the_http_request) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_the_http_request, value: newValue)}
  }
  var hasSwiftUnittest_Names_theHTTPRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_the_http_request)
  }
  mutating func clearSwiftUnittest_Names_theHTTPRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_the_http_request)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsLowers {
  var SwiftUnittest_Names_theHTTP: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_the_http) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_the_http, value: newValue)}
  }
  var hasSwiftUnittest_Names_theHTTP: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_the_http)
  }
  mutating func clearSwiftUnittest_Names_theHTTP() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_the_http)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsLowers {
  var SwiftUnittest_Names_https: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_https) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_https, value: newValue)}
  }
  var hasSwiftUnittest_Names_https: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_https)
  }
  mutating func clearSwiftUnittest_Names_https() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_https)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsLowers {
  var SwiftUnittest_Names_httpsRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_https_request) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_https_request, value: newValue)}
  }
  var hasSwiftUnittest_Names_httpsRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_https_request)
  }
  mutating func clearSwiftUnittest_Names_httpsRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_https_request)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsLowers {
  var SwiftUnittest_Names_theHTTPSRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_the_https_request) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_the_https_request, value: newValue)}
  }
  var hasSwiftUnittest_Names_theHTTPSRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_the_https_request)
  }
  mutating func clearSwiftUnittest_Names_theHTTPSRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_the_https_request)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsLowers {
  var SwiftUnittest_Names_theHTTPS: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_the_https) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_the_https, value: newValue)}
  }
  var hasSwiftUnittest_Names_theHTTPS: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_the_https)
  }
  mutating func clearSwiftUnittest_Names_theHTTPS() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_the_https)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsLowers {
  var SwiftUnittest_Names_url: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_url) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_url, value: newValue)}
  }
  var hasSwiftUnittest_Names_url: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_url)
  }
  mutating func clearSwiftUnittest_Names_url() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_url)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsLowers {
  var SwiftUnittest_Names_urlValue: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_url_value) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_url_value, value: newValue)}
  }
  var hasSwiftUnittest_Names_urlValue: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_url_value)
  }
  mutating func clearSwiftUnittest_Names_urlValue() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_url_value)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsLowers {
  var SwiftUnittest_Names_theURLValue: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_the_url_value) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_the_url_value, value: newValue)}
  }
  var hasSwiftUnittest_Names_theURLValue: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_the_url_value)
  }
  mutating func clearSwiftUnittest_Names_theURLValue() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_the_url_value)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsLowers {
  var SwiftUnittest_Names_theURL: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_the_url) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_the_url, value: newValue)}
  }
  var hasSwiftUnittest_Names_theURL: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_the_url)
  }
  mutating func clearSwiftUnittest_Names_theURL() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_the_url)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsLowers {
  var SwiftUnittest_Names_aBC: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_a_b_c) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_a_b_c, value: newValue)}
  }
  var hasSwiftUnittest_Names_aBC: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_a_b_c)
  }
  mutating func clearSwiftUnittest_Names_aBC() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_a_b_c)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsUppers {
  var SwiftUnittest_Names_http: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_HTTP) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_HTTP, value: newValue)}
  }
  var hasSwiftUnittest_Names_http: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_HTTP)
  }
  mutating func clearSwiftUnittest_Names_http() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_HTTP)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsUppers {
  var SwiftUnittest_Names_httpRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_HTTP_request) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_HTTP_request, value: newValue)}
  }
  var hasSwiftUnittest_Names_httpRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_HTTP_request)
  }
  mutating func clearSwiftUnittest_Names_httpRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_HTTP_request)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsUppers {
  var SwiftUnittest_Names_theHTTPRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_the_HTTP_request) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_the_HTTP_request, value: newValue)}
  }
  var hasSwiftUnittest_Names_theHTTPRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_the_HTTP_request)
  }
  mutating func clearSwiftUnittest_Names_theHTTPRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_the_HTTP_request)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsUppers {
  var SwiftUnittest_Names_theHTTP: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_the_HTTP) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_the_HTTP, value: newValue)}
  }
  var hasSwiftUnittest_Names_theHTTP: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_the_HTTP)
  }
  mutating func clearSwiftUnittest_Names_theHTTP() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_the_HTTP)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsUppers {
  var SwiftUnittest_Names_https: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_HTTPS) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_HTTPS, value: newValue)}
  }
  var hasSwiftUnittest_Names_https: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_HTTPS)
  }
  mutating func clearSwiftUnittest_Names_https() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_HTTPS)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsUppers {
  var SwiftUnittest_Names_httpsRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_HTTPS_request) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_HTTPS_request, value: newValue)}
  }
  var hasSwiftUnittest_Names_httpsRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_HTTPS_request)
  }
  mutating func clearSwiftUnittest_Names_httpsRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_HTTPS_request)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsUppers {
  var SwiftUnittest_Names_theHTTPSRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_the_HTTPS_request) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_the_HTTPS_request, value: newValue)}
  }
  var hasSwiftUnittest_Names_theHTTPSRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_the_HTTPS_request)
  }
  mutating func clearSwiftUnittest_Names_theHTTPSRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_the_HTTPS_request)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsUppers {
  var SwiftUnittest_Names_theHTTPS: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_the_HTTPS) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_the_HTTPS, value: newValue)}
  }
  var hasSwiftUnittest_Names_theHTTPS: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_the_HTTPS)
  }
  mutating func clearSwiftUnittest_Names_theHTTPS() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_the_HTTPS)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsUppers {
  var SwiftUnittest_Names_url: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_URL) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_URL, value: newValue)}
  }
  var hasSwiftUnittest_Names_url: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_URL)
  }
  mutating func clearSwiftUnittest_Names_url() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_URL)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsUppers {
  var SwiftUnittest_Names_urlValue: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_URL_value) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_URL_value, value: newValue)}
  }
  var hasSwiftUnittest_Names_urlValue: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_URL_value)
  }
  mutating func clearSwiftUnittest_Names_urlValue() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_URL_value)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsUppers {
  var SwiftUnittest_Names_theURLValue: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_the_URL_value) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_the_URL_value, value: newValue)}
  }
  var hasSwiftUnittest_Names_theURLValue: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_the_URL_value)
  }
  mutating func clearSwiftUnittest_Names_theURLValue() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_the_URL_value)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsUppers {
  var SwiftUnittest_Names_theURL: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_the_URL) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_the_URL, value: newValue)}
  }
  var hasSwiftUnittest_Names_theURL: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_the_URL)
  }
  mutating func clearSwiftUnittest_Names_theURL() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_the_URL)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsWordCase {
  var SwiftUnittest_Names_http: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_Http) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_Http, value: newValue)}
  }
  var hasSwiftUnittest_Names_http: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_Http)
  }
  mutating func clearSwiftUnittest_Names_http() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_Http)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsWordCase {
  var SwiftUnittest_Names_httpRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_HttpRequest) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_HttpRequest, value: newValue)}
  }
  var hasSwiftUnittest_Names_httpRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_HttpRequest)
  }
  mutating func clearSwiftUnittest_Names_httpRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_HttpRequest)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsWordCase {
  var SwiftUnittest_Names_theHTTPRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_TheHttpRequest) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_TheHttpRequest, value: newValue)}
  }
  var hasSwiftUnittest_Names_theHTTPRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_TheHttpRequest)
  }
  mutating func clearSwiftUnittest_Names_theHTTPRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_TheHttpRequest)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsWordCase {
  var SwiftUnittest_Names_theHTTP: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_TheHttp) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_TheHttp, value: newValue)}
  }
  var hasSwiftUnittest_Names_theHTTP: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_TheHttp)
  }
  mutating func clearSwiftUnittest_Names_theHTTP() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_TheHttp)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsWordCase {
  var SwiftUnittest_Names_https: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_Https) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_Https, value: newValue)}
  }
  var hasSwiftUnittest_Names_https: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_Https)
  }
  mutating func clearSwiftUnittest_Names_https() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_Https)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsWordCase {
  var SwiftUnittest_Names_httpsRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_HttpsRequest) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_HttpsRequest, value: newValue)}
  }
  var hasSwiftUnittest_Names_httpsRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_HttpsRequest)
  }
  mutating func clearSwiftUnittest_Names_httpsRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_HttpsRequest)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsWordCase {
  var SwiftUnittest_Names_theHTTPSRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_TheHttpsRequest) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_TheHttpsRequest, value: newValue)}
  }
  var hasSwiftUnittest_Names_theHTTPSRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_TheHttpsRequest)
  }
  mutating func clearSwiftUnittest_Names_theHTTPSRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_TheHttpsRequest)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsWordCase {
  var SwiftUnittest_Names_theHTTPS: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_TheHttps) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_TheHttps, value: newValue)}
  }
  var hasSwiftUnittest_Names_theHTTPS: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_TheHttps)
  }
  mutating func clearSwiftUnittest_Names_theHTTPS() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_TheHttps)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsWordCase {
  var SwiftUnittest_Names_url: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_Url) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_Url, value: newValue)}
  }
  var hasSwiftUnittest_Names_url: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_Url)
  }
  mutating func clearSwiftUnittest_Names_url() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_Url)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsWordCase {
  var SwiftUnittest_Names_urlValue: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_UrlValue) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_UrlValue, value: newValue)}
  }
  var hasSwiftUnittest_Names_urlValue: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_UrlValue)
  }
  mutating func clearSwiftUnittest_Names_urlValue() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_UrlValue)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsWordCase {
  var SwiftUnittest_Names_theURLValue: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_TheUrlValue) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_TheUrlValue, value: newValue)}
  }
  var hasSwiftUnittest_Names_theURLValue: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_TheUrlValue)
  }
  mutating func clearSwiftUnittest_Names_theURLValue() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_TheUrlValue)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsWordCase {
  var SwiftUnittest_Names_theURL: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Extensions_TheUrl) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Extensions_TheUrl, value: newValue)}
  }
  var hasSwiftUnittest_Names_theURL: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Extensions_TheUrl)
  }
  mutating func clearSwiftUnittest_Names_theURL() {
    clearExtensionValue(ext: SwiftUnittest_Names_Extensions_TheUrl)
  }
}

extension SwiftUnittest_Names_Foo {
  var SwiftUnittest_Names_FieldNames_foo1: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_FieldNames.Extensions.foo1) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_FieldNames.Extensions.foo1, value: newValue)}
  }
  var hasSwiftUnittest_Names_FieldNames_foo1: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_FieldNames.Extensions.foo1)
  }
  mutating func clearSwiftUnittest_Names_FieldNames_foo1() {
    clearExtensionValue(ext: SwiftUnittest_Names_FieldNames.Extensions.foo1)
  }
}

extension SwiftUnittest_Names_Foo {
  var SwiftUnittest_Names_MessageNames_foo2: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_MessageNames.Extensions.foo2) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_MessageNames.Extensions.foo2, value: newValue)}
  }
  var hasSwiftUnittest_Names_MessageNames_foo2: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_MessageNames.Extensions.foo2)
  }
  mutating func clearSwiftUnittest_Names_MessageNames_foo2() {
    clearExtensionValue(ext: SwiftUnittest_Names_MessageNames.Extensions.foo2)
  }
}

extension SwiftUnittest_Names_Foo {
  var SwiftUnittest_Names_MessageNames_foo4: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_MessageNames.Extensions.foo4) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_MessageNames.Extensions.foo4, value: newValue)}
  }
  var hasSwiftUnittest_Names_MessageNames_foo4: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_MessageNames.Extensions.foo4)
  }
  mutating func clearSwiftUnittest_Names_MessageNames_foo4() {
    clearExtensionValue(ext: SwiftUnittest_Names_MessageNames.Extensions.foo4)
  }
}

extension SwiftUnittest_Names_Foo {
  var SwiftUnittest_Names_MessageNames_StringMessage_foo3: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_MessageNames.StringMessage.Extensions.foo3) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_MessageNames.StringMessage.Extensions.foo3, value: newValue)}
  }
  var hasSwiftUnittest_Names_MessageNames_StringMessage_foo3: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_MessageNames.StringMessage.Extensions.foo3)
  }
  mutating func clearSwiftUnittest_Names_MessageNames_StringMessage_foo3() {
    clearExtensionValue(ext: SwiftUnittest_Names_MessageNames.StringMessage.Extensions.foo3)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Lowers_http: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.http) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.http, value: newValue)}
  }
  var hasSwiftUnittest_Names_Lowers_http: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.http)
  }
  mutating func clearSwiftUnittest_Names_Lowers_http() {
    clearExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.http)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Lowers_httpRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.http_request) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.http_request, value: newValue)}
  }
  var hasSwiftUnittest_Names_Lowers_httpRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.http_request)
  }
  mutating func clearSwiftUnittest_Names_Lowers_httpRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.http_request)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Lowers_theHTTPRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_http_request) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_http_request, value: newValue)}
  }
  var hasSwiftUnittest_Names_Lowers_theHTTPRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_http_request)
  }
  mutating func clearSwiftUnittest_Names_Lowers_theHTTPRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_http_request)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Lowers_theHTTP: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_http) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_http, value: newValue)}
  }
  var hasSwiftUnittest_Names_Lowers_theHTTP: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_http)
  }
  mutating func clearSwiftUnittest_Names_Lowers_theHTTP() {
    clearExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_http)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Lowers_https: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.https) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.https, value: newValue)}
  }
  var hasSwiftUnittest_Names_Lowers_https: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.https)
  }
  mutating func clearSwiftUnittest_Names_Lowers_https() {
    clearExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.https)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Lowers_httpsRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.https_request) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.https_request, value: newValue)}
  }
  var hasSwiftUnittest_Names_Lowers_httpsRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.https_request)
  }
  mutating func clearSwiftUnittest_Names_Lowers_httpsRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.https_request)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Lowers_theHTTPSRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_https_request) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_https_request, value: newValue)}
  }
  var hasSwiftUnittest_Names_Lowers_theHTTPSRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_https_request)
  }
  mutating func clearSwiftUnittest_Names_Lowers_theHTTPSRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_https_request)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Lowers_theHTTPS: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_https) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_https, value: newValue)}
  }
  var hasSwiftUnittest_Names_Lowers_theHTTPS: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_https)
  }
  mutating func clearSwiftUnittest_Names_Lowers_theHTTPS() {
    clearExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_https)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Lowers_url: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.url) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.url, value: newValue)}
  }
  var hasSwiftUnittest_Names_Lowers_url: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.url)
  }
  mutating func clearSwiftUnittest_Names_Lowers_url() {
    clearExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.url)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Lowers_urlValue: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.url_value) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.url_value, value: newValue)}
  }
  var hasSwiftUnittest_Names_Lowers_urlValue: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.url_value)
  }
  mutating func clearSwiftUnittest_Names_Lowers_urlValue() {
    clearExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.url_value)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Lowers_theURLValue: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_url_value) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_url_value, value: newValue)}
  }
  var hasSwiftUnittest_Names_Lowers_theURLValue: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_url_value)
  }
  mutating func clearSwiftUnittest_Names_Lowers_theURLValue() {
    clearExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_url_value)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Lowers_theURL: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_url) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_url, value: newValue)}
  }
  var hasSwiftUnittest_Names_Lowers_theURL: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_url)
  }
  mutating func clearSwiftUnittest_Names_Lowers_theURL() {
    clearExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.the_url)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Lowers_aBC: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.a_b_c) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.a_b_c, value: newValue)}
  }
  var hasSwiftUnittest_Names_Lowers_aBC: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.a_b_c)
  }
  mutating func clearSwiftUnittest_Names_Lowers_aBC() {
    clearExtensionValue(ext: SwiftUnittest_Names_Lowers.Extensions.a_b_c)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Uppers_http: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.HTTP) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.HTTP, value: newValue)}
  }
  var hasSwiftUnittest_Names_Uppers_http: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.HTTP)
  }
  mutating func clearSwiftUnittest_Names_Uppers_http() {
    clearExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.HTTP)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Uppers_httpRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.HTTP_request) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.HTTP_request, value: newValue)}
  }
  var hasSwiftUnittest_Names_Uppers_httpRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.HTTP_request)
  }
  mutating func clearSwiftUnittest_Names_Uppers_httpRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.HTTP_request)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Uppers_theHTTPRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_HTTP_request) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_HTTP_request, value: newValue)}
  }
  var hasSwiftUnittest_Names_Uppers_theHTTPRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_HTTP_request)
  }
  mutating func clearSwiftUnittest_Names_Uppers_theHTTPRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_HTTP_request)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Uppers_theHTTP: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_HTTP) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_HTTP, value: newValue)}
  }
  var hasSwiftUnittest_Names_Uppers_theHTTP: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_HTTP)
  }
  mutating func clearSwiftUnittest_Names_Uppers_theHTTP() {
    clearExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_HTTP)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Uppers_https: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.HTTPS) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.HTTPS, value: newValue)}
  }
  var hasSwiftUnittest_Names_Uppers_https: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.HTTPS)
  }
  mutating func clearSwiftUnittest_Names_Uppers_https() {
    clearExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.HTTPS)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Uppers_httpsRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.HTTPS_request) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.HTTPS_request, value: newValue)}
  }
  var hasSwiftUnittest_Names_Uppers_httpsRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.HTTPS_request)
  }
  mutating func clearSwiftUnittest_Names_Uppers_httpsRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.HTTPS_request)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Uppers_theHTTPSRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_HTTPS_request) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_HTTPS_request, value: newValue)}
  }
  var hasSwiftUnittest_Names_Uppers_theHTTPSRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_HTTPS_request)
  }
  mutating func clearSwiftUnittest_Names_Uppers_theHTTPSRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_HTTPS_request)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Uppers_theHTTPS: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_HTTPS) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_HTTPS, value: newValue)}
  }
  var hasSwiftUnittest_Names_Uppers_theHTTPS: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_HTTPS)
  }
  mutating func clearSwiftUnittest_Names_Uppers_theHTTPS() {
    clearExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_HTTPS)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Uppers_url: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.URL) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.URL, value: newValue)}
  }
  var hasSwiftUnittest_Names_Uppers_url: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.URL)
  }
  mutating func clearSwiftUnittest_Names_Uppers_url() {
    clearExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.URL)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Uppers_urlValue: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.URL_value) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.URL_value, value: newValue)}
  }
  var hasSwiftUnittest_Names_Uppers_urlValue: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.URL_value)
  }
  mutating func clearSwiftUnittest_Names_Uppers_urlValue() {
    clearExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.URL_value)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Uppers_theURLValue: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_URL_value) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_URL_value, value: newValue)}
  }
  var hasSwiftUnittest_Names_Uppers_theURLValue: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_URL_value)
  }
  mutating func clearSwiftUnittest_Names_Uppers_theURLValue() {
    clearExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_URL_value)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_Uppers_theURL: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_URL) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_URL, value: newValue)}
  }
  var hasSwiftUnittest_Names_Uppers_theURL: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_URL)
  }
  mutating func clearSwiftUnittest_Names_Uppers_theURL() {
    clearExtensionValue(ext: SwiftUnittest_Names_Uppers.Extensions.the_URL)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_WordCase_http: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.Http) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.Http, value: newValue)}
  }
  var hasSwiftUnittest_Names_WordCase_http: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.Http)
  }
  mutating func clearSwiftUnittest_Names_WordCase_http() {
    clearExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.Http)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_WordCase_httpRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.HttpRequest) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.HttpRequest, value: newValue)}
  }
  var hasSwiftUnittest_Names_WordCase_httpRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.HttpRequest)
  }
  mutating func clearSwiftUnittest_Names_WordCase_httpRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.HttpRequest)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_WordCase_theHTTPRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheHttpRequest) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheHttpRequest, value: newValue)}
  }
  var hasSwiftUnittest_Names_WordCase_theHTTPRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheHttpRequest)
  }
  mutating func clearSwiftUnittest_Names_WordCase_theHTTPRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheHttpRequest)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_WordCase_theHTTP: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheHttp) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheHttp, value: newValue)}
  }
  var hasSwiftUnittest_Names_WordCase_theHTTP: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheHttp)
  }
  mutating func clearSwiftUnittest_Names_WordCase_theHTTP() {
    clearExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheHttp)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_WordCase_https: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.Https) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.Https, value: newValue)}
  }
  var hasSwiftUnittest_Names_WordCase_https: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.Https)
  }
  mutating func clearSwiftUnittest_Names_WordCase_https() {
    clearExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.Https)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_WordCase_httpsRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.HttpsRequest) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.HttpsRequest, value: newValue)}
  }
  var hasSwiftUnittest_Names_WordCase_httpsRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.HttpsRequest)
  }
  mutating func clearSwiftUnittest_Names_WordCase_httpsRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.HttpsRequest)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_WordCase_theHTTPSRequest: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheHttpsRequest) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheHttpsRequest, value: newValue)}
  }
  var hasSwiftUnittest_Names_WordCase_theHTTPSRequest: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheHttpsRequest)
  }
  mutating func clearSwiftUnittest_Names_WordCase_theHTTPSRequest() {
    clearExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheHttpsRequest)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_WordCase_theHTTPS: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheHttps) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheHttps, value: newValue)}
  }
  var hasSwiftUnittest_Names_WordCase_theHTTPS: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheHttps)
  }
  mutating func clearSwiftUnittest_Names_WordCase_theHTTPS() {
    clearExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheHttps)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_WordCase_url: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.Url) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.Url, value: newValue)}
  }
  var hasSwiftUnittest_Names_WordCase_url: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.Url)
  }
  mutating func clearSwiftUnittest_Names_WordCase_url() {
    clearExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.Url)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_WordCase_urlValue: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.UrlValue) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.UrlValue, value: newValue)}
  }
  var hasSwiftUnittest_Names_WordCase_urlValue: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.UrlValue)
  }
  mutating func clearSwiftUnittest_Names_WordCase_urlValue() {
    clearExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.UrlValue)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_WordCase_theURLValue: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheUrlValue) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheUrlValue, value: newValue)}
  }
  var hasSwiftUnittest_Names_WordCase_theURLValue: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheUrlValue)
  }
  mutating func clearSwiftUnittest_Names_WordCase_theURLValue() {
    clearExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheUrlValue)
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials {
  var SwiftUnittest_Names_WordCase_theURL: Int32 {
    get {return getExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheUrl) ?? 0}
    set {setExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheUrl, value: newValue)}
  }
  var hasSwiftUnittest_Names_WordCase_theURL: Bool {
    return hasExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheUrl)
  }
  mutating func clearSwiftUnittest_Names_WordCase_theURL() {
    clearExtensionValue(ext: SwiftUnittest_Names_WordCase.Extensions.TheUrl)
  }
}

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let SwiftUnittest_Names_UnittestSwiftNaming_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  SwiftUnittest_Names_Extensions_http,
  SwiftUnittest_Names_Extensions_http_request,
  SwiftUnittest_Names_Extensions_the_http_request,
  SwiftUnittest_Names_Extensions_the_http,
  SwiftUnittest_Names_Extensions_https,
  SwiftUnittest_Names_Extensions_https_request,
  SwiftUnittest_Names_Extensions_the_https_request,
  SwiftUnittest_Names_Extensions_the_https,
  SwiftUnittest_Names_Extensions_url,
  SwiftUnittest_Names_Extensions_url_value,
  SwiftUnittest_Names_Extensions_the_url_value,
  SwiftUnittest_Names_Extensions_the_url,
  SwiftUnittest_Names_Extensions_a_b_c,
  SwiftUnittest_Names_Extensions_HTTP,
  SwiftUnittest_Names_Extensions_HTTP_request,
  SwiftUnittest_Names_Extensions_the_HTTP_request,
  SwiftUnittest_Names_Extensions_the_HTTP,
  SwiftUnittest_Names_Extensions_HTTPS,
  SwiftUnittest_Names_Extensions_HTTPS_request,
  SwiftUnittest_Names_Extensions_the_HTTPS_request,
  SwiftUnittest_Names_Extensions_the_HTTPS,
  SwiftUnittest_Names_Extensions_URL,
  SwiftUnittest_Names_Extensions_URL_value,
  SwiftUnittest_Names_Extensions_the_URL_value,
  SwiftUnittest_Names_Extensions_the_URL,
  SwiftUnittest_Names_Extensions_Http,
  SwiftUnittest_Names_Extensions_HttpRequest,
  SwiftUnittest_Names_Extensions_TheHttpRequest,
  SwiftUnittest_Names_Extensions_TheHttp,
  SwiftUnittest_Names_Extensions_Https,
  SwiftUnittest_Names_Extensions_HttpsRequest,
  SwiftUnittest_Names_Extensions_TheHttpsRequest,
  SwiftUnittest_Names_Extensions_TheHttps,
  SwiftUnittest_Names_Extensions_Url,
  SwiftUnittest_Names_Extensions_UrlValue,
  SwiftUnittest_Names_Extensions_TheUrlValue,
  SwiftUnittest_Names_Extensions_TheUrl,
  SwiftUnittest_Names_FieldNames.Extensions.foo1,
  SwiftUnittest_Names_MessageNames.Extensions.foo2,
  SwiftUnittest_Names_MessageNames.Extensions.foo4,
  SwiftUnittest_Names_MessageNames.StringMessage.Extensions.foo3,
  SwiftUnittest_Names_Lowers.Extensions.http,
  SwiftUnittest_Names_Lowers.Extensions.http_request,
  SwiftUnittest_Names_Lowers.Extensions.the_http_request,
  SwiftUnittest_Names_Lowers.Extensions.the_http,
  SwiftUnittest_Names_Lowers.Extensions.https,
  SwiftUnittest_Names_Lowers.Extensions.https_request,
  SwiftUnittest_Names_Lowers.Extensions.the_https_request,
  SwiftUnittest_Names_Lowers.Extensions.the_https,
  SwiftUnittest_Names_Lowers.Extensions.url,
  SwiftUnittest_Names_Lowers.Extensions.url_value,
  SwiftUnittest_Names_Lowers.Extensions.the_url_value,
  SwiftUnittest_Names_Lowers.Extensions.the_url,
  SwiftUnittest_Names_Lowers.Extensions.a_b_c,
  SwiftUnittest_Names_Uppers.Extensions.HTTP,
  SwiftUnittest_Names_Uppers.Extensions.HTTP_request,
  SwiftUnittest_Names_Uppers.Extensions.the_HTTP_request,
  SwiftUnittest_Names_Uppers.Extensions.the_HTTP,
  SwiftUnittest_Names_Uppers.Extensions.HTTPS,
  SwiftUnittest_Names_Uppers.Extensions.HTTPS_request,
  SwiftUnittest_Names_Uppers.Extensions.the_HTTPS_request,
  SwiftUnittest_Names_Uppers.Extensions.the_HTTPS,
  SwiftUnittest_Names_Uppers.Extensions.URL,
  SwiftUnittest_Names_Uppers.Extensions.URL_value,
  SwiftUnittest_Names_Uppers.Extensions.the_URL_value,
  SwiftUnittest_Names_Uppers.Extensions.the_URL,
  SwiftUnittest_Names_WordCase.Extensions.Http,
  SwiftUnittest_Names_WordCase.Extensions.HttpRequest,
  SwiftUnittest_Names_WordCase.Extensions.TheHttpRequest,
  SwiftUnittest_Names_WordCase.Extensions.TheHttp,
  SwiftUnittest_Names_WordCase.Extensions.Https,
  SwiftUnittest_Names_WordCase.Extensions.HttpsRequest,
  SwiftUnittest_Names_WordCase.Extensions.TheHttpsRequest,
  SwiftUnittest_Names_WordCase.Extensions.TheHttps,
  SwiftUnittest_Names_WordCase.Extensions.Url,
  SwiftUnittest_Names_WordCase.Extensions.UrlValue,
  SwiftUnittest_Names_WordCase.Extensions.TheUrlValue,
  SwiftUnittest_Names_WordCase.Extensions.TheUrl
]

let SwiftUnittest_Names_Extensions_http = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsLowers>(
  _protobuf_fieldNumber: 1,
  fieldName: "swift_unittest.names.http",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_http_request = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsLowers>(
  _protobuf_fieldNumber: 2,
  fieldName: "swift_unittest.names.http_request",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_the_http_request = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsLowers>(
  _protobuf_fieldNumber: 3,
  fieldName: "swift_unittest.names.the_http_request",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_the_http = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsLowers>(
  _protobuf_fieldNumber: 4,
  fieldName: "swift_unittest.names.the_http",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_https = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsLowers>(
  _protobuf_fieldNumber: 11,
  fieldName: "swift_unittest.names.https",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_https_request = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsLowers>(
  _protobuf_fieldNumber: 12,
  fieldName: "swift_unittest.names.https_request",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_the_https_request = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsLowers>(
  _protobuf_fieldNumber: 13,
  fieldName: "swift_unittest.names.the_https_request",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_the_https = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsLowers>(
  _protobuf_fieldNumber: 14,
  fieldName: "swift_unittest.names.the_https",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_url = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsLowers>(
  _protobuf_fieldNumber: 21,
  fieldName: "swift_unittest.names.url",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_url_value = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsLowers>(
  _protobuf_fieldNumber: 22,
  fieldName: "swift_unittest.names.url_value",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_the_url_value = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsLowers>(
  _protobuf_fieldNumber: 23,
  fieldName: "swift_unittest.names.the_url_value",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_the_url = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsLowers>(
  _protobuf_fieldNumber: 24,
  fieldName: "swift_unittest.names.the_url",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_a_b_c = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsLowers>(
  _protobuf_fieldNumber: 31,
  fieldName: "swift_unittest.names.a_b_c",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_HTTP = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsUppers>(
  _protobuf_fieldNumber: 1,
  fieldName: "swift_unittest.names.HTTP",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_HTTP_request = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsUppers>(
  _protobuf_fieldNumber: 2,
  fieldName: "swift_unittest.names.HTTP_request",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_the_HTTP_request = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsUppers>(
  _protobuf_fieldNumber: 3,
  fieldName: "swift_unittest.names.the_HTTP_request",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_the_HTTP = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsUppers>(
  _protobuf_fieldNumber: 4,
  fieldName: "swift_unittest.names.the_HTTP",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_HTTPS = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsUppers>(
  _protobuf_fieldNumber: 11,
  fieldName: "swift_unittest.names.HTTPS",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_HTTPS_request = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsUppers>(
  _protobuf_fieldNumber: 12,
  fieldName: "swift_unittest.names.HTTPS_request",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_the_HTTPS_request = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsUppers>(
  _protobuf_fieldNumber: 13,
  fieldName: "swift_unittest.names.the_HTTPS_request",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_the_HTTPS = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsUppers>(
  _protobuf_fieldNumber: 14,
  fieldName: "swift_unittest.names.the_HTTPS",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_URL = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsUppers>(
  _protobuf_fieldNumber: 21,
  fieldName: "swift_unittest.names.URL",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_URL_value = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsUppers>(
  _protobuf_fieldNumber: 22,
  fieldName: "swift_unittest.names.URL_value",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_the_URL_value = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsUppers>(
  _protobuf_fieldNumber: 23,
  fieldName: "swift_unittest.names.the_URL_value",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_the_URL = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsUppers>(
  _protobuf_fieldNumber: 24,
  fieldName: "swift_unittest.names.the_URL",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_Http = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsWordCase>(
  _protobuf_fieldNumber: 1,
  fieldName: "swift_unittest.names.Http",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_HttpRequest = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsWordCase>(
  _protobuf_fieldNumber: 2,
  fieldName: "swift_unittest.names.HttpRequest",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_TheHttpRequest = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsWordCase>(
  _protobuf_fieldNumber: 3,
  fieldName: "swift_unittest.names.TheHttpRequest",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_TheHttp = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsWordCase>(
  _protobuf_fieldNumber: 4,
  fieldName: "swift_unittest.names.TheHttp",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_Https = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsWordCase>(
  _protobuf_fieldNumber: 11,
  fieldName: "swift_unittest.names.Https",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_HttpsRequest = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsWordCase>(
  _protobuf_fieldNumber: 12,
  fieldName: "swift_unittest.names.HttpsRequest",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_TheHttpsRequest = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsWordCase>(
  _protobuf_fieldNumber: 13,
  fieldName: "swift_unittest.names.TheHttpsRequest",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_TheHttps = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsWordCase>(
  _protobuf_fieldNumber: 14,
  fieldName: "swift_unittest.names.TheHttps",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_Url = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsWordCase>(
  _protobuf_fieldNumber: 21,
  fieldName: "swift_unittest.names.Url",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_UrlValue = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsWordCase>(
  _protobuf_fieldNumber: 22,
  fieldName: "swift_unittest.names.UrlValue",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_TheUrlValue = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsWordCase>(
  _protobuf_fieldNumber: 23,
  fieldName: "swift_unittest.names.TheUrlValue",
  defaultValue: 0
)

let SwiftUnittest_Names_Extensions_TheUrl = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitialsWordCase>(
  _protobuf_fieldNumber: 24,
  fieldName: "swift_unittest.names.TheUrl",
  defaultValue: 0
)

extension SwiftUnittest_Names_FieldNames {
  enum Extensions {
    static let foo1 = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_Foo>(
      _protobuf_fieldNumber: 1,
      fieldName: "swift_unittest.names.FieldNames.foo1",
      defaultValue: 0
    )
  }
}

extension SwiftUnittest_Names_MessageNames {
  enum Extensions {
    static let foo2 = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_Foo>(
      _protobuf_fieldNumber: 2,
      fieldName: "swift_unittest.names.MessageNames.foo2",
      defaultValue: 0
    )

    static let foo4 = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_Foo>(
      _protobuf_fieldNumber: 4,
      fieldName: "swift_unittest.names.MessageNames.foo4",
      defaultValue: 0
    )
  }
}

extension SwiftUnittest_Names_MessageNames.StringMessage {
  enum Extensions {
    static let foo3 = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_Foo>(
      _protobuf_fieldNumber: 3,
      fieldName: "swift_unittest.names.MessageNames.String.foo3",
      defaultValue: 0
    )
  }
}

extension SwiftUnittest_Names_Lowers {
  enum Extensions {
    static let http = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 1,
      fieldName: "swift_unittest.names.Lowers.http",
      defaultValue: 0
    )

    static let http_request = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 2,
      fieldName: "swift_unittest.names.Lowers.http_request",
      defaultValue: 0
    )

    static let the_http_request = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 3,
      fieldName: "swift_unittest.names.Lowers.the_http_request",
      defaultValue: 0
    )

    static let the_http = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 4,
      fieldName: "swift_unittest.names.Lowers.the_http",
      defaultValue: 0
    )

    static let https = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 11,
      fieldName: "swift_unittest.names.Lowers.https",
      defaultValue: 0
    )

    static let https_request = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 12,
      fieldName: "swift_unittest.names.Lowers.https_request",
      defaultValue: 0
    )

    static let the_https_request = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 13,
      fieldName: "swift_unittest.names.Lowers.the_https_request",
      defaultValue: 0
    )

    static let the_https = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 14,
      fieldName: "swift_unittest.names.Lowers.the_https",
      defaultValue: 0
    )

    static let url = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 21,
      fieldName: "swift_unittest.names.Lowers.url",
      defaultValue: 0
    )

    static let url_value = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 22,
      fieldName: "swift_unittest.names.Lowers.url_value",
      defaultValue: 0
    )

    static let the_url_value = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 23,
      fieldName: "swift_unittest.names.Lowers.the_url_value",
      defaultValue: 0
    )

    static let the_url = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 24,
      fieldName: "swift_unittest.names.Lowers.the_url",
      defaultValue: 0
    )

    static let a_b_c = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 31,
      fieldName: "swift_unittest.names.Lowers.a_b_c",
      defaultValue: 0
    )
  }
}

extension SwiftUnittest_Names_Uppers {
  enum Extensions {
    static let HTTP = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 101,
      fieldName: "swift_unittest.names.Uppers.HTTP",
      defaultValue: 0
    )

    static let HTTP_request = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 102,
      fieldName: "swift_unittest.names.Uppers.HTTP_request",
      defaultValue: 0
    )

    static let the_HTTP_request = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 103,
      fieldName: "swift_unittest.names.Uppers.the_HTTP_request",
      defaultValue: 0
    )

    static let the_HTTP = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 104,
      fieldName: "swift_unittest.names.Uppers.the_HTTP",
      defaultValue: 0
    )

    static let HTTPS = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 111,
      fieldName: "swift_unittest.names.Uppers.HTTPS",
      defaultValue: 0
    )

    static let HTTPS_request = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 112,
      fieldName: "swift_unittest.names.Uppers.HTTPS_request",
      defaultValue: 0
    )

    static let the_HTTPS_request = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 113,
      fieldName: "swift_unittest.names.Uppers.the_HTTPS_request",
      defaultValue: 0
    )

    static let the_HTTPS = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 114,
      fieldName: "swift_unittest.names.Uppers.the_HTTPS",
      defaultValue: 0
    )

    static let URL = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 121,
      fieldName: "swift_unittest.names.Uppers.URL",
      defaultValue: 0
    )

    static let URL_value = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 122,
      fieldName: "swift_unittest.names.Uppers.URL_value",
      defaultValue: 0
    )

    static let the_URL_value = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 123,
      fieldName: "swift_unittest.names.Uppers.the_URL_value",
      defaultValue: 0
    )

    static let the_URL = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 124,
      fieldName: "swift_unittest.names.Uppers.the_URL",
      defaultValue: 0
    )
  }
}

extension SwiftUnittest_Names_WordCase {
  enum Extensions {
    static let Http = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 201,
      fieldName: "swift_unittest.names.WordCase.Http",
      defaultValue: 0
    )

    static let HttpRequest = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 202,
      fieldName: "swift_unittest.names.WordCase.HttpRequest",
      defaultValue: 0
    )

    static let TheHttpRequest = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 203,
      fieldName: "swift_unittest.names.WordCase.TheHttpRequest",
      defaultValue: 0
    )

    static let TheHttp = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 204,
      fieldName: "swift_unittest.names.WordCase.TheHttp",
      defaultValue: 0
    )

    static let Https = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 211,
      fieldName: "swift_unittest.names.WordCase.Https",
      defaultValue: 0
    )

    static let HttpsRequest = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 212,
      fieldName: "swift_unittest.names.WordCase.HttpsRequest",
      defaultValue: 0
    )

    static let TheHttpsRequest = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 213,
      fieldName: "swift_unittest.names.WordCase.TheHttpsRequest",
      defaultValue: 0
    )

    static let TheHttps = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 214,
      fieldName: "swift_unittest.names.WordCase.TheHttps",
      defaultValue: 0
    )

    static let Url = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 221,
      fieldName: "swift_unittest.names.WordCase.Url",
      defaultValue: 0
    )

    static let UrlValue = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 222,
      fieldName: "swift_unittest.names.WordCase.UrlValue",
      defaultValue: 0
    )

    static let TheUrlValue = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 223,
      fieldName: "swift_unittest.names.WordCase.TheUrlValue",
      defaultValue: 0
    )

    static let TheUrl = SwiftProtobuf.MessageExtension<OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftUnittest_Names_ExtensionNamingInitials>(
      _protobuf_fieldNumber: 224,
      fieldName: "swift_unittest.names.WordCase.TheUrl",
      defaultValue: 0
    )
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "swift_unittest.names"

extension SwiftUnittest_Names_EnumFieldNames: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "A"),
    1: .same(proto: "String"),
    2: .same(proto: "Int"),
    3: .same(proto: "Double"),
    4: .same(proto: "Float"),
    5: .same(proto: "UInt"),
    6: .same(proto: "hashValue"),
    7: .same(proto: "description"),
    8: .same(proto: "debugDescription"),
    9: .same(proto: "Swift"),
    10: .same(proto: "UNRECOGNIZED"),
    11: .same(proto: "class"),
    12: .same(proto: "deinit"),
    13: .same(proto: "enum"),
    14: .same(proto: "extension"),
    15: .same(proto: "func"),
    16: .same(proto: "import"),
    17: .same(proto: "init"),
    18: .same(proto: "inout"),
    19: .same(proto: "internal"),
    20: .same(proto: "let"),
    21: .same(proto: "operator"),
    22: .same(proto: "private"),
    23: .same(proto: "protocol"),
    24: .same(proto: "public"),
    25: .same(proto: "static"),
    26: .same(proto: "struct"),
    27: .same(proto: "subscript"),
    28: .same(proto: "typealias"),
    29: .same(proto: "var"),
    30: .same(proto: "break"),
    31: .same(proto: "case"),
    32: .same(proto: "continue"),
    33: .same(proto: "default"),
    34: .same(proto: "defer"),
    35: .same(proto: "do"),
    36: .same(proto: "else"),
    37: .same(proto: "fallthrough"),
    38: .same(proto: "for"),
    39: .same(proto: "guard"),
    40: .same(proto: "if"),
    41: .same(proto: "in"),
    42: .same(proto: "repeat"),
    43: .same(proto: "return"),
    44: .same(proto: "switch"),
    45: .same(proto: "where"),
    46: .same(proto: "while"),
    47: .same(proto: "as"),
    48: .same(proto: "catch"),
    49: .same(proto: "dynamicType"),
    50: .same(proto: "false"),
    51: .same(proto: "is"),
    52: .same(proto: "nil"),
    53: .same(proto: "rethrows"),
    54: .same(proto: "super"),
    55: .same(proto: "self"),
    57: .same(proto: "throw"),
    58: .same(proto: "throws"),
    59: .same(proto: "true"),
    60: .same(proto: "try"),
    61: .same(proto: "__COLUMN__"),
    62: .same(proto: "__FILE__"),
    63: .same(proto: "__FUNCTION__"),
    64: .same(proto: "__LINE__"),
    65: .same(proto: "_"),
    66: .same(proto: "associativity"),
    67: .same(proto: "convenience"),
    68: .same(proto: "dynamic"),
    69: .same(proto: "didSet"),
    70: .same(proto: "final"),
    71: .same(proto: "get"),
    72: .same(proto: "infix"),
    73: .same(proto: "indirect"),
    74: .same(proto: "lazy"),
    75: .same(proto: "left"),
    76: .same(proto: "mutating"),
    77: .same(proto: "none"),
    78: .same(proto: "nonmutating"),
    79: .same(proto: "optional"),
    80: .same(proto: "override"),
    81: .same(proto: "postfix"),
    82: .same(proto: "precedence"),
    83: .same(proto: "prefix"),
    85: .same(proto: "required"),
    86: .same(proto: "right"),
    87: .same(proto: "set"),
    88: .same(proto: "Type"),
    89: .same(proto: "unowned"),
    90: .same(proto: "weak"),
    91: .same(proto: "willSet"),
    92: .same(proto: "id"),
    93: .same(proto: "_cmd"),
    96: .same(proto: "out"),
    98: .same(proto: "bycopy"),
    99: .same(proto: "byref"),
    100: .same(proto: "oneway"),
    102: .same(proto: "and"),
    103: .same(proto: "and_eq"),
    104: .same(proto: "alignas"),
    105: .same(proto: "alignof"),
    106: .same(proto: "asm"),
    107: .same(proto: "auto"),
    108: .same(proto: "bitand"),
    109: .same(proto: "bitor"),
    110: .same(proto: "bool"),
    114: .same(proto: "char"),
    115: .same(proto: "char16_t"),
    116: .same(proto: "char32_t"),
    118: .same(proto: "compl"),
    119: .same(proto: "const"),
    120: .same(proto: "constexpr"),
    121: .same(proto: "const_cast"),
    123: .same(proto: "decltype"),
    125: .same(proto: "delete"),
    127: .same(proto: "dynamic_cast"),
    130: .same(proto: "explicit"),
    131: .same(proto: "export"),
    132: .same(proto: "extern"),
    136: .same(proto: "friend"),
    137: .same(proto: "goto"),
    139: .same(proto: "inline"),
    141: .same(proto: "long"),
    142: .same(proto: "mutable"),
    143: .same(proto: "namespace"),
    144: .same(proto: "new"),
    145: .same(proto: "noexcept"),
    146: .same(proto: "not"),
    147: .same(proto: "not_eq"),
    148: .same(proto: "nullptr"),
    150: .same(proto: "or"),
    151: .same(proto: "or_eq"),
    153: .same(proto: "protected"),
    155: .same(proto: "register"),
    156: .same(proto: "reinterpret_cast"),
    158: .same(proto: "short"),
    159: .same(proto: "signed"),
    160: .same(proto: "sizeof"),
    162: .same(proto: "static_assert"),
    163: .same(proto: "static_cast"),
    166: .same(proto: "template"),
    167: .same(proto: "this"),
    168: .same(proto: "thread_local"),
    172: .same(proto: "typedef"),
    173: .same(proto: "typeid"),
    174: .same(proto: "typename"),
    175: .same(proto: "union"),
    176: .same(proto: "unsigned"),
    177: .same(proto: "using"),
    178: .same(proto: "virtual"),
    179: .same(proto: "void"),
    180: .same(proto: "volatile"),
    181: .same(proto: "wchar_t"),
    183: .same(proto: "xor"),
    184: .same(proto: "xor_eq"),
    185: .same(proto: "restrict"),
    186: .same(proto: "Category"),
    187: .same(proto: "Ivar"),
    188: .same(proto: "Method"),
    192: .same(proto: "finalize"),
    193: .same(proto: "hash"),
    194: .same(proto: "dealloc"),
    197: .same(proto: "superclass"),
    198: .same(proto: "retain"),
    199: .same(proto: "release"),
    200: .same(proto: "autorelease"),
    201: .same(proto: "retainCount"),
    202: .same(proto: "zone"),
    203: .same(proto: "isProxy"),
    204: .same(proto: "copy"),
    205: .same(proto: "mutableCopy"),
    206: .same(proto: "classForCoder"),
    207: .same(proto: "clear"),
    208: .same(proto: "data"),
    209: .same(proto: "delimitedData"),
    210: .same(proto: "descriptor"),
    211: .same(proto: "extensionRegistry"),
    212: .same(proto: "extensionsCurrentlySet"),
    213: .same(proto: "isInitialized"),
    214: .same(proto: "serializedSize"),
    215: .same(proto: "sortedExtensionsInUse"),
    216: .same(proto: "unknownFields"),
    217: .same(proto: "Fixed"),
    218: .same(proto: "Fract"),
    219: .same(proto: "Size"),
    220: .same(proto: "LogicalAddress"),
    221: .same(proto: "PhysicalAddress"),
    222: .same(proto: "ByteCount"),
    223: .same(proto: "ByteOffset"),
    224: .same(proto: "Duration"),
    225: .same(proto: "AbsoluteTime"),
    226: .same(proto: "OptionBits"),
    227: .same(proto: "ItemCount"),
    228: .same(proto: "PBVersion"),
    229: .same(proto: "ScriptCode"),
    230: .same(proto: "LangCode"),
    231: .same(proto: "RegionCode"),
    232: .same(proto: "OSType"),
    233: .same(proto: "ProcessSerialNumber"),
    234: .same(proto: "Point"),
    235: .same(proto: "Rect"),
    236: .same(proto: "FixedPoint"),
    237: .same(proto: "FixedRect"),
    238: .same(proto: "Style"),
    239: .same(proto: "StyleParameter"),
    240: .same(proto: "StyleField"),
    241: .same(proto: "TimeScale"),
    242: .same(proto: "TimeBase"),
    243: .same(proto: "TimeRecord"),
    244: .same(proto: "Extensions"),
  ]
}

extension SwiftUnittest_Names_EnumFieldNames2: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AA"),
    1065: .same(proto: "__"),
  ]
}

extension SwiftUnittest_Names_Foo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_Foo) -> Bool {
    if unknownFields != other.unknownFields {return false}
    if _protobuf_extensionFieldValues != other._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension SwiftUnittest_Names_FieldNames: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "String"),
    2: .same(proto: "Int"),
    3: .same(proto: "Double"),
    4: .same(proto: "Float"),
    5: .same(proto: "UInt"),
    6: .same(proto: "hashValue"),
    7: .same(proto: "description"),
    8: .same(proto: "debugDescription"),
    9: .same(proto: "Swift"),
    10: .same(proto: "UNRECOGNIZED"),
    11: .same(proto: "class"),
    12: .same(proto: "deinit"),
    13: .same(proto: "enum"),
    15: .same(proto: "func"),
    16: .same(proto: "import"),
    17: .same(proto: "init"),
    18: .same(proto: "inout"),
    19: .same(proto: "internal"),
    20: .same(proto: "let"),
    21: .same(proto: "operator"),
    22: .same(proto: "private"),
    23: .same(proto: "protocol"),
    24: .same(proto: "public"),
    25: .same(proto: "static"),
    26: .same(proto: "struct"),
    27: .same(proto: "subscript"),
    28: .same(proto: "typealias"),
    29: .same(proto: "var"),
    30: .same(proto: "break"),
    31: .same(proto: "case"),
    32: .same(proto: "continue"),
    33: .same(proto: "default"),
    34: .same(proto: "defer"),
    35: .same(proto: "do"),
    36: .same(proto: "else"),
    37: .same(proto: "fallthrough"),
    38: .same(proto: "for"),
    39: .same(proto: "guard"),
    40: .same(proto: "if"),
    41: .same(proto: "in"),
    42: .same(proto: "repeat"),
    43: .same(proto: "return"),
    44: .same(proto: "switch"),
    45: .same(proto: "where"),
    46: .same(proto: "while"),
    47: .same(proto: "as"),
    48: .same(proto: "catch"),
    49: .same(proto: "dynamicType"),
    50: .same(proto: "false"),
    51: .same(proto: "is"),
    52: .same(proto: "nil"),
    53: .same(proto: "rethrows"),
    54: .same(proto: "super"),
    55: .same(proto: "self"),
    57: .same(proto: "throw"),
    58: .same(proto: "throws"),
    59: .same(proto: "true"),
    60: .same(proto: "try"),
    61: .standard(proto: "__COLUMN__"),
    62: .standard(proto: "__FILE__"),
    63: .standard(proto: "__FUNCTION__"),
    64: .standard(proto: "__LINE__"),
    65: .standard(proto: "_"),
    66: .same(proto: "associativity"),
    67: .same(proto: "convenience"),
    68: .same(proto: "dynamic"),
    69: .same(proto: "didSet"),
    70: .same(proto: "final"),
    71: .same(proto: "get"),
    72: .same(proto: "infix"),
    73: .same(proto: "indirect"),
    74: .same(proto: "lazy"),
    75: .same(proto: "left"),
    76: .same(proto: "mutating"),
    77: .same(proto: "none"),
    78: .same(proto: "nonmutating"),
    79: .same(proto: "optional"),
    80: .same(proto: "override"),
    81: .same(proto: "postfix"),
    82: .same(proto: "precedence"),
    83: .same(proto: "prefix"),
    85: .same(proto: "required"),
    86: .same(proto: "right"),
    87: .same(proto: "set"),
    88: .same(proto: "Type"),
    89: .same(proto: "unowned"),
    90: .same(proto: "weak"),
    91: .same(proto: "willSet"),
    92: .same(proto: "id"),
    93: .standard(proto: "_cmd"),
    96: .same(proto: "out"),
    98: .same(proto: "bycopy"),
    99: .same(proto: "byref"),
    100: .same(proto: "oneway"),
    102: .same(proto: "and"),
    103: .standard(proto: "and_eq"),
    104: .same(proto: "alignas"),
    105: .same(proto: "alignof"),
    106: .same(proto: "asm"),
    107: .same(proto: "auto"),
    108: .same(proto: "bitand"),
    109: .same(proto: "bitor"),
    110: .same(proto: "bool"),
    114: .same(proto: "char"),
    115: .standard(proto: "char16_t"),
    116: .standard(proto: "char32_t"),
    118: .same(proto: "compl"),
    119: .same(proto: "const"),
    120: .same(proto: "constexpr"),
    121: .standard(proto: "const_cast"),
    123: .same(proto: "decltype"),
    125: .same(proto: "delete"),
    127: .standard(proto: "dynamic_cast"),
    130: .same(proto: "explicit"),
    131: .same(proto: "export"),
    132: .same(proto: "extern"),
    136: .same(proto: "friend"),
    137: .same(proto: "goto"),
    139: .same(proto: "inline"),
    141: .same(proto: "long"),
    142: .same(proto: "mutable"),
    143: .same(proto: "namespace"),
    144: .same(proto: "new"),
    145: .same(proto: "noexcept"),
    146: .same(proto: "not"),
    147: .standard(proto: "not_eq"),
    148: .same(proto: "nullptr"),
    150: .same(proto: "or"),
    151: .standard(proto: "or_eq"),
    153: .same(proto: "protected"),
    155: .same(proto: "register"),
    156: .standard(proto: "reinterpret_cast"),
    158: .same(proto: "short"),
    159: .same(proto: "signed"),
    160: .same(proto: "sizeof"),
    162: .standard(proto: "static_assert"),
    163: .standard(proto: "static_cast"),
    166: .same(proto: "template"),
    167: .same(proto: "this"),
    168: .standard(proto: "thread_local"),
    172: .same(proto: "typedef"),
    173: .same(proto: "typeid"),
    174: .same(proto: "typename"),
    175: .same(proto: "union"),
    176: .same(proto: "unsigned"),
    177: .same(proto: "using"),
    178: .same(proto: "virtual"),
    179: .same(proto: "void"),
    180: .same(proto: "volatile"),
    181: .standard(proto: "wchar_t"),
    183: .same(proto: "xor"),
    184: .standard(proto: "xor_eq"),
    185: .same(proto: "restrict"),
    186: .same(proto: "Category"),
    187: .same(proto: "Ivar"),
    188: .same(proto: "Method"),
    192: .same(proto: "finalize"),
    193: .same(proto: "hash"),
    194: .same(proto: "dealloc"),
    197: .same(proto: "superclass"),
    198: .same(proto: "retain"),
    199: .same(proto: "release"),
    200: .same(proto: "autorelease"),
    201: .same(proto: "retainCount"),
    202: .same(proto: "zone"),
    203: .same(proto: "isProxy"),
    204: .same(proto: "copy"),
    205: .same(proto: "mutableCopy"),
    206: .same(proto: "classForCoder"),
    207: .same(proto: "clear"),
    208: .same(proto: "data"),
    209: .same(proto: "delimitedData"),
    210: .same(proto: "descriptor"),
    211: .same(proto: "extensionRegistry"),
    212: .same(proto: "extensionsCurrentlySet"),
    213: .same(proto: "isInitialized"),
    214: .same(proto: "serializedSize"),
    215: .same(proto: "sortedExtensionsInUse"),
    216: .same(proto: "unknownFields"),
    217: .same(proto: "Fixed"),
    218: .same(proto: "Fract"),
    219: .same(proto: "Size"),
    220: .same(proto: "LogicalAddress"),
    221: .same(proto: "PhysicalAddress"),
    222: .same(proto: "ByteCount"),
    223: .same(proto: "ByteOffset"),
    224: .same(proto: "Duration"),
    225: .same(proto: "AbsoluteTime"),
    226: .same(proto: "OptionBits"),
    227: .same(proto: "ItemCount"),
    228: .same(proto: "PBVersion"),
    229: .same(proto: "ScriptCode"),
    230: .same(proto: "LangCode"),
    231: .same(proto: "RegionCode"),
    232: .same(proto: "OSType"),
    233: .same(proto: "ProcessSerialNumber"),
    234: .same(proto: "Point"),
    235: .same(proto: "Rect"),
    236: .same(proto: "FixedPoint"),
    237: .same(proto: "FixedRect"),
    238: .same(proto: "Style"),
    239: .same(proto: "StyleParameter"),
    240: .same(proto: "StyleField"),
    241: .same(proto: "TimeScale"),
    242: .same(proto: "TimeBase"),
    243: .same(proto: "TimeRecord"),
    244: .unique(proto: "json_should_be_overriden", json: "json_was_overridden"),
    245: .same(proto: "Any"),
    246: .same(proto: "Int32"),
    247: .same(proto: "Int64"),
    250: .same(proto: "UInt32"),
    251: .same(proto: "UInt64"),
    252: .same(proto: "associatedtype"),
    253: .same(proto: "fileprivate"),
    254: .same(proto: "open"),
    255: .same(proto: "serializedData"),
    256: .same(proto: "hasSerializedData"),
    257: .same(proto: "clearSerializedData"),
    258: .same(proto: "jsonUTF8Data"),
    259: .same(proto: "jsonString"),
    260: .same(proto: "Extension"),
    261: .same(proto: "Extensions"),
  ]

  fileprivate class _StorageClass {
    var _string: Int32? = nil
    var _int: Int32? = nil
    var _double: Int32? = nil
    var _float: Int32? = nil
    var _uint: Int32? = nil
    var _hashValue_p: Int32? = nil
    var _description_p: Int32? = nil
    var _debugDescription_p: Int32? = nil
    var _swift: Int32? = nil
    var _unrecognized: Int32? = nil
    var _class_p: Int32? = nil
    var _deinit_p: Int32? = nil
    var _enum_p: Int32? = nil
    var _func_p: Int32? = nil
    var _import_p: Int32? = nil
    var _init_p: Int32? = nil
    var _inout_p: Int32? = nil
    var _internal_p: Int32? = nil
    var _let_p: Int32? = nil
    var _operator_p: Int32? = nil
    var _private_p: Int32? = nil
    var _protocol_p: Int32? = nil
    var _public_p: Int32? = nil
    var _static_p: Int32? = nil
    var _struct_p: Int32? = nil
    var _subscript_p: Int32? = nil
    var _typealias_p: Int32? = nil
    var _var_p: Int32? = nil
    var _break_p: Int32? = nil
    var _case_p: Int32? = nil
    var _continue_p: Int32? = nil
    var _default_p: Int32? = nil
    var _defer_p: Int32? = nil
    var _do_p: Int32? = nil
    var _else_p: Int32? = nil
    var _fallthrough_p: Int32? = nil
    var _for_p: Int32? = nil
    var _guard_p: Int32? = nil
    var _if_p: Int32? = nil
    var _in_p: Int32? = nil
    var _repeat_p: Int32? = nil
    var _return_p: Int32? = nil
    var _switch_p: Int32? = nil
    var _where_p: Int32? = nil
    var _while_p: Int32? = nil
    var _as_p: Int32? = nil
    var _catch_p: Int32? = nil
    var _dynamicType_p: Int32? = nil
    var _false_p: Int32? = nil
    var _is_p: Int32? = nil
    var _nil_p: Int32? = nil
    var _rethrows_p: Int32? = nil
    var _super_p: Int32? = nil
    var _self_p: Int32? = nil
    var _throw_p: Int32? = nil
    var _throws_p: Int32? = nil
    var _true_p: Int32? = nil
    var _try_p: Int32? = nil
    var __Column__: Int32? = nil
    var __File__: Int32? = nil
    var __Function__: Int32? = nil
    var __Line__: Int32? = nil
    var ____: Int32? = nil
    var _associativity: Int32? = nil
    var _convenience: Int32? = nil
    var _dynamic: Int32? = nil
    var _didSet: Int32? = nil
    var _final: Int32? = nil
    var _get: Int32? = nil
    var _infix: Int32? = nil
    var _indirect: Int32? = nil
    var _lazy: Int32? = nil
    var _left: Int32? = nil
    var _mutating: Int32? = nil
    var _none: Int32? = nil
    var _nonmutating: Int32? = nil
    var _optional: Int32? = nil
    var _override: Int32? = nil
    var _postfix: Int32? = nil
    var _precedence: Int32? = nil
    var _prefix: Int32? = nil
    var _required: Int32? = nil
    var _right: Int32? = nil
    var _set: Int32? = nil
    var _type: Int32? = nil
    var _unowned: Int32? = nil
    var _weak: Int32? = nil
    var _willSet: Int32? = nil
    var _id: Int32? = nil
    var _cmd: Int32? = nil
    var _out: Int32? = nil
    var _bycopy: Int32? = nil
    var _byref: Int32? = nil
    var _oneway: Int32? = nil
    var _and: Int32? = nil
    var _andEq: Int32? = nil
    var _alignas: Int32? = nil
    var _alignof: Int32? = nil
    var _asm: Int32? = nil
    var _auto: Int32? = nil
    var _bitand: Int32? = nil
    var _bitor: Int32? = nil
    var _bool: Int32? = nil
    var _char: Int32? = nil
    var _char16T: Int32? = nil
    var _char32T: Int32? = nil
    var _compl: Int32? = nil
    var _const: Int32? = nil
    var _constexpr: Int32? = nil
    var _constCast: Int32? = nil
    var _decltype: Int32? = nil
    var _delete: Int32? = nil
    var _dynamicCast: Int32? = nil
    var _explicit: Int32? = nil
    var _export: Int32? = nil
    var _extern: Int32? = nil
    var _friend: Int32? = nil
    var _goto: Int32? = nil
    var _inline: Int32? = nil
    var _long: Int32? = nil
    var _mutable: Int32? = nil
    var _namespace: Int32? = nil
    var _new: Int32? = nil
    var _noexcept: Int32? = nil
    var _not: Int32? = nil
    var _notEq: Int32? = nil
    var _nullptr: Int32? = nil
    var _or: Int32? = nil
    var _orEq: Int32? = nil
    var _protected: Int32? = nil
    var _register: Int32? = nil
    var _reinterpretCast: Int32? = nil
    var _short: Int32? = nil
    var _signed: Int32? = nil
    var _sizeof: Int32? = nil
    var _staticAssert: Int32? = nil
    var _staticCast: Int32? = nil
    var _template: Int32? = nil
    var _this: Int32? = nil
    var _threadLocal: Int32? = nil
    var _typedef: Int32? = nil
    var _typeid: Int32? = nil
    var _typename: Int32? = nil
    var _union: Int32? = nil
    var _unsigned: Int32? = nil
    var _using: Int32? = nil
    var _virtual: Int32? = nil
    var _void: Int32? = nil
    var _volatile: Int32? = nil
    var _wcharT: Int32? = nil
    var _xor: Int32? = nil
    var _xorEq: Int32? = nil
    var _restrict: Int32? = nil
    var _category: Int32? = nil
    var _ivar: Int32? = nil
    var _method: Int32? = nil
    var _finalize: Int32? = nil
    var _hash_p: Int32? = nil
    var _dealloc: Int32? = nil
    var _superclass: Int32? = nil
    var _retain: Int32? = nil
    var _release: Int32? = nil
    var _autorelease: Int32? = nil
    var _retainCount: Int32? = nil
    var _zone: Int32? = nil
    var _isProxy: Int32? = nil
    var _copy: Int32? = nil
    var _mutableCopy: Int32? = nil
    var _classForCoder: Int32? = nil
    var _clear_p: Int32? = nil
    var _data: Int32? = nil
    var _delimitedData: Int32? = nil
    var _descriptor: Int32? = nil
    var _extensionRegistry: Int32? = nil
    var _extensionsCurrentlySet: Int32? = nil
    var _isInitialized_p: Int32? = nil
    var _serializedSize: Int32? = nil
    var _sortedExtensionsInUse: Int32? = nil
    var _unknownFields_p: Int32? = nil
    var _fixed: Int32? = nil
    var _fract: Int32? = nil
    var _size: Int32? = nil
    var _logicalAddress: Int32? = nil
    var _physicalAddress: Int32? = nil
    var _byteCount: Int32? = nil
    var _byteOffset: Int32? = nil
    var _duration: Int32? = nil
    var _absoluteTime: Int32? = nil
    var _optionBits: Int32? = nil
    var _itemCount: Int32? = nil
    var _pbversion: Int32? = nil
    var _scriptCode: Int32? = nil
    var _langCode: Int32? = nil
    var _regionCode: Int32? = nil
    var _ostype: Int32? = nil
    var _processSerialNumber: Int32? = nil
    var _point: Int32? = nil
    var _rect: Int32? = nil
    var _fixedPoint: Int32? = nil
    var _fixedRect: Int32? = nil
    var _style: Int32? = nil
    var _styleParameter: Int32? = nil
    var _styleField: Int32? = nil
    var _timeScale: Int32? = nil
    var _timeBase: Int32? = nil
    var _timeRecord: Int32? = nil
    var _jsonShouldBeOverriden: Int32? = nil
    var _any: Int32? = nil
    var _int32: Int32? = nil
    var _int64: Int32? = nil
    var _uint32: Int32? = nil
    var _uint64: Int32? = nil
    var _associatedtype_p: Int32? = nil
    var _fileprivate_p: Int32? = nil
    var _open_p: Int32? = nil
    var _serializedData: Int32? = nil
    var _hasSerializedData_p: Int32? = nil
    var _clearSerializedData_p: Int32? = nil
    var _jsonUtf8Data: Int32? = nil
    var _jsonString: Int32? = nil
    var _extension_p: Int32? = nil
    var _extensions: Int32? = nil

    init() {}

    init(copying source: _StorageClass) {
      _string = source._string
      _int = source._int
      _double = source._double
      _float = source._float
      _uint = source._uint
      _hashValue_p = source._hashValue_p
      _description_p = source._description_p
      _debugDescription_p = source._debugDescription_p
      _swift = source._swift
      _unrecognized = source._unrecognized
      _class_p = source._class_p
      _deinit_p = source._deinit_p
      _enum_p = source._enum_p
      _func_p = source._func_p
      _import_p = source._import_p
      _init_p = source._init_p
      _inout_p = source._inout_p
      _internal_p = source._internal_p
      _let_p = source._let_p
      _operator_p = source._operator_p
      _private_p = source._private_p
      _protocol_p = source._protocol_p
      _public_p = source._public_p
      _static_p = source._static_p
      _struct_p = source._struct_p
      _subscript_p = source._subscript_p
      _typealias_p = source._typealias_p
      _var_p = source._var_p
      _break_p = source._break_p
      _case_p = source._case_p
      _continue_p = source._continue_p
      _default_p = source._default_p
      _defer_p = source._defer_p
      _do_p = source._do_p
      _else_p = source._else_p
      _fallthrough_p = source._fallthrough_p
      _for_p = source._for_p
      _guard_p = source._guard_p
      _if_p = source._if_p
      _in_p = source._in_p
      _repeat_p = source._repeat_p
      _return_p = source._return_p
      _switch_p = source._switch_p
      _where_p = source._where_p
      _while_p = source._while_p
      _as_p = source._as_p
      _catch_p = source._catch_p
      _dynamicType_p = source._dynamicType_p
      _false_p = source._false_p
      _is_p = source._is_p
      _nil_p = source._nil_p
      _rethrows_p = source._rethrows_p
      _super_p = source._super_p
      _self_p = source._self_p
      _throw_p = source._throw_p
      _throws_p = source._throws_p
      _true_p = source._true_p
      _try_p = source._try_p
      __Column__ = source.__Column__
      __File__ = source.__File__
      __Function__ = source.__Function__
      __Line__ = source.__Line__
      ____ = source.____
      _associativity = source._associativity
      _convenience = source._convenience
      _dynamic = source._dynamic
      _didSet = source._didSet
      _final = source._final
      _get = source._get
      _infix = source._infix
      _indirect = source._indirect
      _lazy = source._lazy
      _left = source._left
      _mutating = source._mutating
      _none = source._none
      _nonmutating = source._nonmutating
      _optional = source._optional
      _override = source._override
      _postfix = source._postfix
      _precedence = source._precedence
      _prefix = source._prefix
      _required = source._required
      _right = source._right
      _set = source._set
      _type = source._type
      _unowned = source._unowned
      _weak = source._weak
      _willSet = source._willSet
      _id = source._id
      _cmd = source._cmd
      _out = source._out
      _bycopy = source._bycopy
      _byref = source._byref
      _oneway = source._oneway
      _and = source._and
      _andEq = source._andEq
      _alignas = source._alignas
      _alignof = source._alignof
      _asm = source._asm
      _auto = source._auto
      _bitand = source._bitand
      _bitor = source._bitor
      _bool = source._bool
      _char = source._char
      _char16T = source._char16T
      _char32T = source._char32T
      _compl = source._compl
      _const = source._const
      _constexpr = source._constexpr
      _constCast = source._constCast
      _decltype = source._decltype
      _delete = source._delete
      _dynamicCast = source._dynamicCast
      _explicit = source._explicit
      _export = source._export
      _extern = source._extern
      _friend = source._friend
      _goto = source._goto
      _inline = source._inline
      _long = source._long
      _mutable = source._mutable
      _namespace = source._namespace
      _new = source._new
      _noexcept = source._noexcept
      _not = source._not
      _notEq = source._notEq
      _nullptr = source._nullptr
      _or = source._or
      _orEq = source._orEq
      _protected = source._protected
      _register = source._register
      _reinterpretCast = source._reinterpretCast
      _short = source._short
      _signed = source._signed
      _sizeof = source._sizeof
      _staticAssert = source._staticAssert
      _staticCast = source._staticCast
      _template = source._template
      _this = source._this
      _threadLocal = source._threadLocal
      _typedef = source._typedef
      _typeid = source._typeid
      _typename = source._typename
      _union = source._union
      _unsigned = source._unsigned
      _using = source._using
      _virtual = source._virtual
      _void = source._void
      _volatile = source._volatile
      _wcharT = source._wcharT
      _xor = source._xor
      _xorEq = source._xorEq
      _restrict = source._restrict
      _category = source._category
      _ivar = source._ivar
      _method = source._method
      _finalize = source._finalize
      _hash_p = source._hash_p
      _dealloc = source._dealloc
      _superclass = source._superclass
      _retain = source._retain
      _release = source._release
      _autorelease = source._autorelease
      _retainCount = source._retainCount
      _zone = source._zone
      _isProxy = source._isProxy
      _copy = source._copy
      _mutableCopy = source._mutableCopy
      _classForCoder = source._classForCoder
      _clear_p = source._clear_p
      _data = source._data
      _delimitedData = source._delimitedData
      _descriptor = source._descriptor
      _extensionRegistry = source._extensionRegistry
      _extensionsCurrentlySet = source._extensionsCurrentlySet
      _isInitialized_p = source._isInitialized_p
      _serializedSize = source._serializedSize
      _sortedExtensionsInUse = source._sortedExtensionsInUse
      _unknownFields_p = source._unknownFields_p
      _fixed = source._fixed
      _fract = source._fract
      _size = source._size
      _logicalAddress = source._logicalAddress
      _physicalAddress = source._physicalAddress
      _byteCount = source._byteCount
      _byteOffset = source._byteOffset
      _duration = source._duration
      _absoluteTime = source._absoluteTime
      _optionBits = source._optionBits
      _itemCount = source._itemCount
      _pbversion = source._pbversion
      _scriptCode = source._scriptCode
      _langCode = source._langCode
      _regionCode = source._regionCode
      _ostype = source._ostype
      _processSerialNumber = source._processSerialNumber
      _point = source._point
      _rect = source._rect
      _fixedPoint = source._fixedPoint
      _fixedRect = source._fixedRect
      _style = source._style
      _styleParameter = source._styleParameter
      _styleField = source._styleField
      _timeScale = source._timeScale
      _timeBase = source._timeBase
      _timeRecord = source._timeRecord
      _jsonShouldBeOverriden = source._jsonShouldBeOverriden
      _any = source._any
      _int32 = source._int32
      _int64 = source._int64
      _uint32 = source._uint32
      _uint64 = source._uint64
      _associatedtype_p = source._associatedtype_p
      _fileprivate_p = source._fileprivate_p
      _open_p = source._open_p
      _serializedData = source._serializedData
      _hasSerializedData_p = source._hasSerializedData_p
      _clearSerializedData_p = source._clearSerializedData_p
      _jsonUtf8Data = source._jsonUtf8Data
      _jsonString = source._jsonString
      _extension_p = source._extension_p
      _extensions = source._extensions
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_FieldNames) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._string != other_storage._string {return false}
        if _storage._int != other_storage._int {return false}
        if _storage._double != other_storage._double {return false}
        if _storage._float != other_storage._float {return false}
        if _storage._uint != other_storage._uint {return false}
        if _storage._hashValue_p != other_storage._hashValue_p {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._debugDescription_p != other_storage._debugDescription_p {return false}
        if _storage._swift != other_storage._swift {return false}
        if _storage._unrecognized != other_storage._unrecognized {return false}
        if _storage._class_p != other_storage._class_p {return false}
        if _storage._deinit_p != other_storage._deinit_p {return false}
        if _storage._enum_p != other_storage._enum_p {return false}
        if _storage._func_p != other_storage._func_p {return false}
        if _storage._import_p != other_storage._import_p {return false}
        if _storage._init_p != other_storage._init_p {return false}
        if _storage._inout_p != other_storage._inout_p {return false}
        if _storage._internal_p != other_storage._internal_p {return false}
        if _storage._let_p != other_storage._let_p {return false}
        if _storage._operator_p != other_storage._operator_p {return false}
        if _storage._private_p != other_storage._private_p {return false}
        if _storage._protocol_p != other_storage._protocol_p {return false}
        if _storage._public_p != other_storage._public_p {return false}
        if _storage._static_p != other_storage._static_p {return false}
        if _storage._struct_p != other_storage._struct_p {return false}
        if _storage._subscript_p != other_storage._subscript_p {return false}
        if _storage._typealias_p != other_storage._typealias_p {return false}
        if _storage._var_p != other_storage._var_p {return false}
        if _storage._break_p != other_storage._break_p {return false}
        if _storage._case_p != other_storage._case_p {return false}
        if _storage._continue_p != other_storage._continue_p {return false}
        if _storage._default_p != other_storage._default_p {return false}
        if _storage._defer_p != other_storage._defer_p {return false}
        if _storage._do_p != other_storage._do_p {return false}
        if _storage._else_p != other_storage._else_p {return false}
        if _storage._fallthrough_p != other_storage._fallthrough_p {return false}
        if _storage._for_p != other_storage._for_p {return false}
        if _storage._guard_p != other_storage._guard_p {return false}
        if _storage._if_p != other_storage._if_p {return false}
        if _storage._in_p != other_storage._in_p {return false}
        if _storage._repeat_p != other_storage._repeat_p {return false}
        if _storage._return_p != other_storage._return_p {return false}
        if _storage._switch_p != other_storage._switch_p {return false}
        if _storage._where_p != other_storage._where_p {return false}
        if _storage._while_p != other_storage._while_p {return false}
        if _storage._as_p != other_storage._as_p {return false}
        if _storage._catch_p != other_storage._catch_p {return false}
        if _storage._dynamicType_p != other_storage._dynamicType_p {return false}
        if _storage._false_p != other_storage._false_p {return false}
        if _storage._is_p != other_storage._is_p {return false}
        if _storage._nil_p != other_storage._nil_p {return false}
        if _storage._rethrows_p != other_storage._rethrows_p {return false}
        if _storage._super_p != other_storage._super_p {return false}
        if _storage._self_p != other_storage._self_p {return false}
        if _storage._throw_p != other_storage._throw_p {return false}
        if _storage._throws_p != other_storage._throws_p {return false}
        if _storage._true_p != other_storage._true_p {return false}
        if _storage._try_p != other_storage._try_p {return false}
        if _storage.__Column__ != other_storage.__Column__ {return false}
        if _storage.__File__ != other_storage.__File__ {return false}
        if _storage.__Function__ != other_storage.__Function__ {return false}
        if _storage.__Line__ != other_storage.__Line__ {return false}
        if _storage.____ != other_storage.____ {return false}
        if _storage._associativity != other_storage._associativity {return false}
        if _storage._convenience != other_storage._convenience {return false}
        if _storage._dynamic != other_storage._dynamic {return false}
        if _storage._didSet != other_storage._didSet {return false}
        if _storage._final != other_storage._final {return false}
        if _storage._get != other_storage._get {return false}
        if _storage._infix != other_storage._infix {return false}
        if _storage._indirect != other_storage._indirect {return false}
        if _storage._lazy != other_storage._lazy {return false}
        if _storage._left != other_storage._left {return false}
        if _storage._mutating != other_storage._mutating {return false}
        if _storage._none != other_storage._none {return false}
        if _storage._nonmutating != other_storage._nonmutating {return false}
        if _storage._optional != other_storage._optional {return false}
        if _storage._override != other_storage._override {return false}
        if _storage._postfix != other_storage._postfix {return false}
        if _storage._precedence != other_storage._precedence {return false}
        if _storage._prefix != other_storage._prefix {return false}
        if _storage._required != other_storage._required {return false}
        if _storage._right != other_storage._right {return false}
        if _storage._set != other_storage._set {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._unowned != other_storage._unowned {return false}
        if _storage._weak != other_storage._weak {return false}
        if _storage._willSet != other_storage._willSet {return false}
        if _storage._id != other_storage._id {return false}
        if _storage._cmd != other_storage._cmd {return false}
        if _storage._out != other_storage._out {return false}
        if _storage._bycopy != other_storage._bycopy {return false}
        if _storage._byref != other_storage._byref {return false}
        if _storage._oneway != other_storage._oneway {return false}
        if _storage._and != other_storage._and {return false}
        if _storage._andEq != other_storage._andEq {return false}
        if _storage._alignas != other_storage._alignas {return false}
        if _storage._alignof != other_storage._alignof {return false}
        if _storage._asm != other_storage._asm {return false}
        if _storage._auto != other_storage._auto {return false}
        if _storage._bitand != other_storage._bitand {return false}
        if _storage._bitor != other_storage._bitor {return false}
        if _storage._bool != other_storage._bool {return false}
        if _storage._char != other_storage._char {return false}
        if _storage._char16T != other_storage._char16T {return false}
        if _storage._char32T != other_storage._char32T {return false}
        if _storage._compl != other_storage._compl {return false}
        if _storage._const != other_storage._const {return false}
        if _storage._constexpr != other_storage._constexpr {return false}
        if _storage._constCast != other_storage._constCast {return false}
        if _storage._decltype != other_storage._decltype {return false}
        if _storage._delete != other_storage._delete {return false}
        if _storage._dynamicCast != other_storage._dynamicCast {return false}
        if _storage._explicit != other_storage._explicit {return false}
        if _storage._export != other_storage._export {return false}
        if _storage._extern != other_storage._extern {return false}
        if _storage._friend != other_storage._friend {return false}
        if _storage._goto != other_storage._goto {return false}
        if _storage._inline != other_storage._inline {return false}
        if _storage._long != other_storage._long {return false}
        if _storage._mutable != other_storage._mutable {return false}
        if _storage._namespace != other_storage._namespace {return false}
        if _storage._new != other_storage._new {return false}
        if _storage._noexcept != other_storage._noexcept {return false}
        if _storage._not != other_storage._not {return false}
        if _storage._notEq != other_storage._notEq {return false}
        if _storage._nullptr != other_storage._nullptr {return false}
        if _storage._or != other_storage._or {return false}
        if _storage._orEq != other_storage._orEq {return false}
        if _storage._protected != other_storage._protected {return false}
        if _storage._register != other_storage._register {return false}
        if _storage._reinterpretCast != other_storage._reinterpretCast {return false}
        if _storage._short != other_storage._short {return false}
        if _storage._signed != other_storage._signed {return false}
        if _storage._sizeof != other_storage._sizeof {return false}
        if _storage._staticAssert != other_storage._staticAssert {return false}
        if _storage._staticCast != other_storage._staticCast {return false}
        if _storage._template != other_storage._template {return false}
        if _storage._this != other_storage._this {return false}
        if _storage._threadLocal != other_storage._threadLocal {return false}
        if _storage._typedef != other_storage._typedef {return false}
        if _storage._typeid != other_storage._typeid {return false}
        if _storage._typename != other_storage._typename {return false}
        if _storage._union != other_storage._union {return false}
        if _storage._unsigned != other_storage._unsigned {return false}
        if _storage._using != other_storage._using {return false}
        if _storage._virtual != other_storage._virtual {return false}
        if _storage._void != other_storage._void {return false}
        if _storage._volatile != other_storage._volatile {return false}
        if _storage._wcharT != other_storage._wcharT {return false}
        if _storage._xor != other_storage._xor {return false}
        if _storage._xorEq != other_storage._xorEq {return false}
        if _storage._restrict != other_storage._restrict {return false}
        if _storage._category != other_storage._category {return false}
        if _storage._ivar != other_storage._ivar {return false}
        if _storage._method != other_storage._method {return false}
        if _storage._finalize != other_storage._finalize {return false}
        if _storage._hash_p != other_storage._hash_p {return false}
        if _storage._dealloc != other_storage._dealloc {return false}
        if _storage._superclass != other_storage._superclass {return false}
        if _storage._retain != other_storage._retain {return false}
        if _storage._release != other_storage._release {return false}
        if _storage._autorelease != other_storage._autorelease {return false}
        if _storage._retainCount != other_storage._retainCount {return false}
        if _storage._zone != other_storage._zone {return false}
        if _storage._isProxy != other_storage._isProxy {return false}
        if _storage._copy != other_storage._copy {return false}
        if _storage._mutableCopy != other_storage._mutableCopy {return false}
        if _storage._classForCoder != other_storage._classForCoder {return false}
        if _storage._clear_p != other_storage._clear_p {return false}
        if _storage._data != other_storage._data {return false}
        if _storage._delimitedData != other_storage._delimitedData {return false}
        if _storage._descriptor != other_storage._descriptor {return false}
        if _storage._extensionRegistry != other_storage._extensionRegistry {return false}
        if _storage._extensionsCurrentlySet != other_storage._extensionsCurrentlySet {return false}
        if _storage._isInitialized_p != other_storage._isInitialized_p {return false}
        if _storage._serializedSize != other_storage._serializedSize {return false}
        if _storage._sortedExtensionsInUse != other_storage._sortedExtensionsInUse {return false}
        if _storage._unknownFields_p != other_storage._unknownFields_p {return false}
        if _storage._fixed != other_storage._fixed {return false}
        if _storage._fract != other_storage._fract {return false}
        if _storage._size != other_storage._size {return false}
        if _storage._logicalAddress != other_storage._logicalAddress {return false}
        if _storage._physicalAddress != other_storage._physicalAddress {return false}
        if _storage._byteCount != other_storage._byteCount {return false}
        if _storage._byteOffset != other_storage._byteOffset {return false}
        if _storage._duration != other_storage._duration {return false}
        if _storage._absoluteTime != other_storage._absoluteTime {return false}
        if _storage._optionBits != other_storage._optionBits {return false}
        if _storage._itemCount != other_storage._itemCount {return false}
        if _storage._pbversion != other_storage._pbversion {return false}
        if _storage._scriptCode != other_storage._scriptCode {return false}
        if _storage._langCode != other_storage._langCode {return false}
        if _storage._regionCode != other_storage._regionCode {return false}
        if _storage._ostype != other_storage._ostype {return false}
        if _storage._processSerialNumber != other_storage._processSerialNumber {return false}
        if _storage._point != other_storage._point {return false}
        if _storage._rect != other_storage._rect {return false}
        if _storage._fixedPoint != other_storage._fixedPoint {return false}
        if _storage._fixedRect != other_storage._fixedRect {return false}
        if _storage._style != other_storage._style {return false}
        if _storage._styleParameter != other_storage._styleParameter {return false}
        if _storage._styleField != other_storage._styleField {return false}
        if _storage._timeScale != other_storage._timeScale {return false}
        if _storage._timeBase != other_storage._timeBase {return false}
        if _storage._timeRecord != other_storage._timeRecord {return false}
        if _storage._jsonShouldBeOverriden != other_storage._jsonShouldBeOverriden {return false}
        if _storage._any != other_storage._any {return false}
        if _storage._int32 != other_storage._int32 {return false}
        if _storage._int64 != other_storage._int64 {return false}
        if _storage._uint32 != other_storage._uint32 {return false}
        if _storage._uint64 != other_storage._uint64 {return false}
        if _storage._associatedtype_p != other_storage._associatedtype_p {return false}
        if _storage._fileprivate_p != other_storage._fileprivate_p {return false}
        if _storage._open_p != other_storage._open_p {return false}
        if _storage._serializedData != other_storage._serializedData {return false}
        if _storage._hasSerializedData_p != other_storage._hasSerializedData_p {return false}
        if _storage._clearSerializedData_p != other_storage._clearSerializedData_p {return false}
        if _storage._jsonUtf8Data != other_storage._jsonUtf8Data {return false}
        if _storage._jsonString != other_storage._jsonString {return false}
        if _storage._extension_p != other_storage._extension_p {return false}
        if _storage._extensions != other_storage._extensions {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.StringMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "String"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.StringMessage) -> Bool {
    if self._string != other._string {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.ProtocolMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Protocol"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.ProtocolMessage) -> Bool {
    if self._protocol_p != other._protocol_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.IntMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Int"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.IntMessage) -> Bool {
    if self._int != other._int {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.DoubleMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Double"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.DoubleMessage) -> Bool {
    if self._double != other._double {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.FloatMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Float"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.FloatMessage) -> Bool {
    if self._float != other._float {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.UIntMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UInt"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.UIntMessage) -> Bool {
    if self._uint != other._uint {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.hashValueMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hashValue"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.hashValueMessage) -> Bool {
    if self._hashValue_p != other._hashValue_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.descriptionMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.descriptionMessage) -> Bool {
    if self._description_p != other._description_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.debugDescriptionMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "debugDescription"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.debugDescriptionMessage) -> Bool {
    if self._debugDescription_p != other._debugDescription_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.Swift: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Swift"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Swift) -> Bool {
    if self._swift != other._swift {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.UNRECOGNIZED: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UNRECOGNIZED"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.UNRECOGNIZED) -> Bool {
    if self._unrecognized != other._unrecognized {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.classMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "class"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.classMessage) -> Bool {
    if self._class_p != other._class_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.deinitMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "deinit"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.deinitMessage) -> Bool {
    if self._deinit_p != other._deinit_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.enumMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enum"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.enumMessage) -> Bool {
    if self._enum_p != other._enum_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.extensionMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "extension"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.extensionMessage) -> Bool {
    if self._extension_p != other._extension_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.funcMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "func"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.funcMessage) -> Bool {
    if self._func_p != other._func_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.importMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "import"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.importMessage) -> Bool {
    if self._import_p != other._import_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.initMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "init"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.initMessage) -> Bool {
    if self._init_p != other._init_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.inoutMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inout"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.inoutMessage) -> Bool {
    if self._inout_p != other._inout_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.internalMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "internal"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.internalMessage) -> Bool {
    if self._internal_p != other._internal_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.letMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "let"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.letMessage) -> Bool {
    if self._let_p != other._let_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.operatorMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operator"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.operatorMessage) -> Bool {
    if self._operator_p != other._operator_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.privateMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "private"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.privateMessage) -> Bool {
    if self._private_p != other._private_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.protocolMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "protocol"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.protocolMessage) -> Bool {
    if self._protocol_p != other._protocol_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.publicMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "public"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.publicMessage) -> Bool {
    if self._public_p != other._public_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.staticMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "static"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.staticMessage) -> Bool {
    if self._static_p != other._static_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.structMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "struct"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.structMessage) -> Bool {
    if self._struct_p != other._struct_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.subscriptMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subscript"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.subscriptMessage) -> Bool {
    if self._subscript_p != other._subscript_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.typealiasMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "typealias"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.typealiasMessage) -> Bool {
    if self._typealias_p != other._typealias_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.varMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "var"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.varMessage) -> Bool {
    if self._var_p != other._var_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.breakMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "break"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.breakMessage) -> Bool {
    if self._break_p != other._break_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.caseMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "case"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.caseMessage) -> Bool {
    if self._case_p != other._case_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.continueMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "continue"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.continueMessage) -> Bool {
    if self._continue_p != other._continue_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.defaultMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "default"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.defaultMessage) -> Bool {
    if self._default_p != other._default_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.deferMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "defer"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.deferMessage) -> Bool {
    if self._defer_p != other._defer_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.doMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "do"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.doMessage) -> Bool {
    if self._do_p != other._do_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.elseMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "else"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.elseMessage) -> Bool {
    if self._else_p != other._else_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.fallthroughMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fallthrough"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.fallthroughMessage) -> Bool {
    if self._fallthrough_p != other._fallthrough_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.forMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "for"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.forMessage) -> Bool {
    if self._for_p != other._for_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.guardMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "guard"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.guardMessage) -> Bool {
    if self._guard_p != other._guard_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.ifMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "if"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.ifMessage) -> Bool {
    if self._if_p != other._if_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.inMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "in"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.inMessage) -> Bool {
    if self._in_p != other._in_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.repeatMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "repeat"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.repeatMessage) -> Bool {
    if self._repeat_p != other._repeat_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.returnMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "return"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.returnMessage) -> Bool {
    if self._return_p != other._return_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.switchMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "switch"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.switchMessage) -> Bool {
    if self._switch_p != other._switch_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.whereMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "where"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.whereMessage) -> Bool {
    if self._where_p != other._where_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.whileMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "while"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.whileMessage) -> Bool {
    if self._while_p != other._while_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.asMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "as"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.asMessage) -> Bool {
    if self._as_p != other._as_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.catchMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "catch"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.catchMessage) -> Bool {
    if self._catch_p != other._catch_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.dynamicTypeMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dynamicType"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.dynamicTypeMessage) -> Bool {
    if self._dynamicType_p != other._dynamicType_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.falseMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "false"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.falseMessage) -> Bool {
    if self._false_p != other._false_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.isMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "is"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.isMessage) -> Bool {
    if self._is_p != other._is_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.nilMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nil"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.nilMessage) -> Bool {
    if self._nil_p != other._nil_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.rethrowsMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rethrows"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.rethrowsMessage) -> Bool {
    if self._rethrows_p != other._rethrows_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.superMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "super"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.superMessage) -> Bool {
    if self._super_p != other._super_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.selfMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "self"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.selfMessage) -> Bool {
    if self._self_p != other._self_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.throwMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "throw"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.throwMessage) -> Bool {
    if self._throw_p != other._throw_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.throwsMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "throws"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.throwsMessage) -> Bool {
    if self._throws_p != other._throws_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.trueMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "true"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.trueMessage) -> Bool {
    if self._true_p != other._true_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.tryMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "try"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.tryMessage) -> Bool {
    if self._try_p != other._try_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.__COLUMN__Message: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "__COLUMN__"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.__COLUMN__Message) -> Bool {
    if self.__Column__ != other.__Column__ {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.__FILE__Message: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "__FILE__"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.__FILE__Message) -> Bool {
    if self.__File__ != other.__File__ {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.__FUNCTION__Message: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "__FUNCTION__"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.__FUNCTION__Message) -> Bool {
    if self.__Function__ != other.__Function__ {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.__LINE__Message: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "__LINE__"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.__LINE__Message) -> Bool {
    if self.__Line__ != other.__Line__ {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames._Message: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "_"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames._Message) -> Bool {
    if self.____ != other.____ {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.__Message: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "__"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.__Message) -> Bool {
    if self._____ != other._____ {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.associativity: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "associativity"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.associativity) -> Bool {
    if self._associativity != other._associativity {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.convenience: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "convenience"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.convenience) -> Bool {
    if self._convenience != other._convenience {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.dynamic: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dynamic"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.dynamic) -> Bool {
    if self._dynamic != other._dynamic {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.didSet: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "didSet"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.didSet) -> Bool {
    if self._didSet != other._didSet {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.final: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "final"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.final) -> Bool {
    if self._final != other._final {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.get: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "get"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.get) -> Bool {
    if self._get != other._get {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.infix: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "infix"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.infix) -> Bool {
    if self._infix != other._infix {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.indirect: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "indirect"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.indirect) -> Bool {
    if self._indirect != other._indirect {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.lazy: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lazy"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.lazy) -> Bool {
    if self._lazy != other._lazy {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.left: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "left"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.left) -> Bool {
    if self._left != other._left {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.mutating: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mutating"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.mutating) -> Bool {
    if self._mutating != other._mutating {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.none: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "none"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.none) -> Bool {
    if self._none != other._none {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.nonmutating: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nonmutating"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.nonmutating) -> Bool {
    if self._nonmutating != other._nonmutating {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.optional: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "optional"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.optional) -> Bool {
    if self._optional != other._optional {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.override: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "override"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.override) -> Bool {
    if self._override != other._override {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.postfix: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "postfix"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.postfix) -> Bool {
    if self._postfix != other._postfix {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.precedence: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "precedence"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.precedence) -> Bool {
    if self._precedence != other._precedence {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.prefix: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "prefix"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.prefix) -> Bool {
    if self._prefix != other._prefix {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.required: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "required"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.required) -> Bool {
    if self._required != other._required {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.right: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "right"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.right) -> Bool {
    if self._right != other._right {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.set: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "set"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.set) -> Bool {
    if self._set != other._set {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.TypeMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Type"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.TypeMessage) -> Bool {
    if self._type != other._type {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.unowned: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unowned"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.unowned) -> Bool {
    if self._unowned != other._unowned {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.weak: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "weak"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.weak) -> Bool {
    if self._weak != other._weak {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.willSet: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "willSet"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.willSet) -> Bool {
    if self._willSet != other._willSet {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.id: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.id) -> Bool {
    if self._id != other._id {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames._cmd: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "_cmd"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames._cmd) -> Bool {
    if self._cmd != other._cmd {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.out: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "out"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.out) -> Bool {
    if self._out != other._out {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.bycopy: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bycopy"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.bycopy) -> Bool {
    if self._bycopy != other._bycopy {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.byref: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "byref"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.byref) -> Bool {
    if self._byref != other._byref {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.oneway: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "oneway"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.oneway) -> Bool {
    if self._oneway != other._oneway {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.and: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "and"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.and) -> Bool {
    if self._and != other._and {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.and_eq: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "and_eq"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.and_eq) -> Bool {
    if self._andEq != other._andEq {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.alignas: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "alignas"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.alignas) -> Bool {
    if self._alignas != other._alignas {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.alignof: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "alignof"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.alignof) -> Bool {
    if self._alignof != other._alignof {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.asm: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asm"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.asm) -> Bool {
    if self._asm != other._asm {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.auto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "auto"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.auto) -> Bool {
    if self._auto != other._auto {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.bitand: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bitand"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.bitand) -> Bool {
    if self._bitand != other._bitand {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.bitor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bitor"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.bitor) -> Bool {
    if self._bitor != other._bitor {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.bool: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bool"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.bool) -> Bool {
    if self._bool != other._bool {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.char: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "char"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.char) -> Bool {
    if self._char != other._char {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.char16_t: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "char16_t"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.char16_t) -> Bool {
    if self._char16T != other._char16T {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.char32_t: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "char32_t"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.char32_t) -> Bool {
    if self._char32T != other._char32T {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.compl: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "compl"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.compl) -> Bool {
    if self._compl != other._compl {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.const: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "const"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.const) -> Bool {
    if self._const != other._const {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.constexpr: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "constexpr"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.constexpr) -> Bool {
    if self._constexpr != other._constexpr {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.const_cast: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "const_cast"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.const_cast) -> Bool {
    if self._constCast != other._constCast {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.decltype: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "decltype"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.decltype) -> Bool {
    if self._decltype != other._decltype {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.delete: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "delete"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.delete) -> Bool {
    if self._delete != other._delete {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.dynamic_cast: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dynamic_cast"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.dynamic_cast) -> Bool {
    if self._dynamicCast != other._dynamicCast {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.explicit: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "explicit"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.explicit) -> Bool {
    if self._explicit != other._explicit {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.export: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "export"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.export) -> Bool {
    if self._export != other._export {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.extern: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "extern"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.extern) -> Bool {
    if self._extern != other._extern {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.friend: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "friend"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.friend) -> Bool {
    if self._friend != other._friend {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.goto: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "goto"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.goto) -> Bool {
    if self._goto != other._goto {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.inline: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inline"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.inline) -> Bool {
    if self._inline != other._inline {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.long: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "long"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.long) -> Bool {
    if self._long != other._long {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.mutable: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mutable"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.mutable) -> Bool {
    if self._mutable != other._mutable {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.namespace: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "namespace"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.namespace) -> Bool {
    if self._namespace != other._namespace {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.new: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "new"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.new) -> Bool {
    if self._new != other._new {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.noexcept: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "noexcept"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.noexcept) -> Bool {
    if self._noexcept != other._noexcept {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.not: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "not"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.not) -> Bool {
    if self._not != other._not {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.not_eq: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "not_eq"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.not_eq) -> Bool {
    if self._notEq != other._notEq {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.nullptr: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nullptr"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.nullptr) -> Bool {
    if self._nullptr != other._nullptr {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.or: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "or"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.or) -> Bool {
    if self._or != other._or {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.or_eq: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "or_eq"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.or_eq) -> Bool {
    if self._orEq != other._orEq {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.protected: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "protected"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.protected) -> Bool {
    if self._protected != other._protected {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.register: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "register"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.register) -> Bool {
    if self._register != other._register {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.reinterpret_cast: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "reinterpret_cast"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.reinterpret_cast) -> Bool {
    if self._reinterpretCast != other._reinterpretCast {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.short: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "short"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.short) -> Bool {
    if self._short != other._short {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.signed: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signed"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.signed) -> Bool {
    if self._signed != other._signed {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.sizeof: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sizeof"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.sizeof) -> Bool {
    if self._sizeof != other._sizeof {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.static_assert: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "static_assert"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.static_assert) -> Bool {
    if self._staticAssert != other._staticAssert {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.static_cast: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "static_cast"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.static_cast) -> Bool {
    if self._staticCast != other._staticCast {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.template: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "template"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.template) -> Bool {
    if self._template != other._template {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.this: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "this"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.this) -> Bool {
    if self._this != other._this {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.thread_local: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "thread_local"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.thread_local) -> Bool {
    if self._threadLocal != other._threadLocal {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.typedef: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "typedef"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.typedef) -> Bool {
    if self._typedef != other._typedef {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.typeid: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "typeid"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.typeid) -> Bool {
    if self._typeid != other._typeid {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.typename: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "typename"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.typename) -> Bool {
    if self._typename != other._typename {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.union: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "union"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.union) -> Bool {
    if self._union != other._union {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.unsigned: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unsigned"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.unsigned) -> Bool {
    if self._unsigned != other._unsigned {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.using: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "using"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.using) -> Bool {
    if self._using != other._using {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.virtual: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "virtual"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.virtual) -> Bool {
    if self._virtual != other._virtual {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.void: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "void"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.void) -> Bool {
    if self._void != other._void {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.volatile: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "volatile"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.volatile) -> Bool {
    if self._volatile != other._volatile {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.wchar_t: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "wchar_t"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.wchar_t) -> Bool {
    if self._wcharT != other._wcharT {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.xor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "xor"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.xor) -> Bool {
    if self._xor != other._xor {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.xor_eq: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "xor_eq"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.xor_eq) -> Bool {
    if self._xorEq != other._xorEq {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.restrict: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "restrict"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.restrict) -> Bool {
    if self._restrict != other._restrict {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.Category: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Category"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Category) -> Bool {
    if self._category != other._category {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.Ivar: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Ivar"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Ivar) -> Bool {
    if self._ivar != other._ivar {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.Method: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Method"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Method) -> Bool {
    if self._method != other._method {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.finalize: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "finalize"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.finalize) -> Bool {
    if self._finalize != other._finalize {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.hash: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.hash) -> Bool {
    if self._hash_p != other._hash_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.dealloc: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dealloc"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.dealloc) -> Bool {
    if self._dealloc != other._dealloc {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.superclass: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "superclass"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.superclass) -> Bool {
    if self._superclass != other._superclass {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.retain: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "retain"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.retain) -> Bool {
    if self._retain != other._retain {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.release: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "release"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.release) -> Bool {
    if self._release != other._release {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.autorelease: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "autorelease"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.autorelease) -> Bool {
    if self._autorelease != other._autorelease {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.retainCount: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "retainCount"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.retainCount) -> Bool {
    if self._retainCount != other._retainCount {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.zone: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "zone"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.zone) -> Bool {
    if self._zone != other._zone {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.isProxy: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "isProxy"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.isProxy) -> Bool {
    if self._isProxy != other._isProxy {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.copy: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "copy"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.copy) -> Bool {
    if self._copy != other._copy {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.mutableCopy: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mutableCopy"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.mutableCopy) -> Bool {
    if self._mutableCopy != other._mutableCopy {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.classForCoder: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "classForCoder"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.classForCoder) -> Bool {
    if self._classForCoder != other._classForCoder {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.clear: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clear"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.clear) -> Bool {
    if self._clear_p != other._clear_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.data: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.data) -> Bool {
    if self._data != other._data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.delimitedData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "delimitedData"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.delimitedData) -> Bool {
    if self._delimitedData != other._delimitedData {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.descriptor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "descriptor"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.descriptor) -> Bool {
    if self._descriptor != other._descriptor {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.extensionRegistry: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "extensionRegistry"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.extensionRegistry) -> Bool {
    if self._extensionRegistry != other._extensionRegistry {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.extensionsCurrentlySet: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "extensionsCurrentlySet"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.extensionsCurrentlySet) -> Bool {
    if self._extensionsCurrentlySet != other._extensionsCurrentlySet {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.isInitializedMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "isInitialized"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.isInitializedMessage) -> Bool {
    if self._isInitialized_p != other._isInitialized_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.serializedSize: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "serializedSize"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.serializedSize) -> Bool {
    if self._serializedSize != other._serializedSize {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.sortedExtensionsInUse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sortedExtensionsInUse"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.sortedExtensionsInUse) -> Bool {
    if self._sortedExtensionsInUse != other._sortedExtensionsInUse {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.unknownFieldsMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unknownFields"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.unknownFieldsMessage) -> Bool {
    if self._unknownFields_p != other._unknownFields_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.Fixed: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Fixed"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Fixed) -> Bool {
    if self._fixed != other._fixed {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.Fract: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Fract"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Fract) -> Bool {
    if self._fract != other._fract {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.Size: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Size"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Size) -> Bool {
    if self._size != other._size {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.LogicalAddress: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "LogicalAddress"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.LogicalAddress) -> Bool {
    if self._logicalAddress != other._logicalAddress {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.PhysicalAddress: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PhysicalAddress"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.PhysicalAddress) -> Bool {
    if self._physicalAddress != other._physicalAddress {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.ByteCount: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ByteCount"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.ByteCount) -> Bool {
    if self._byteCount != other._byteCount {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.ByteOffset: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ByteOffset"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.ByteOffset) -> Bool {
    if self._byteOffset != other._byteOffset {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.Duration: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Duration"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Duration) -> Bool {
    if self._duration != other._duration {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.AbsoluteTime: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "AbsoluteTime"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.AbsoluteTime) -> Bool {
    if self._absoluteTime != other._absoluteTime {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.OptionBits: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "OptionBits"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.OptionBits) -> Bool {
    if self._optionBits != other._optionBits {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.ItemCount: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ItemCount"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.ItemCount) -> Bool {
    if self._itemCount != other._itemCount {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.PBVersion: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "PBVersion"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.PBVersion) -> Bool {
    if self._pbversion != other._pbversion {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.ScriptCode: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ScriptCode"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.ScriptCode) -> Bool {
    if self._scriptCode != other._scriptCode {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.LangCode: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "LangCode"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.LangCode) -> Bool {
    if self._langCode != other._langCode {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.RegionCode: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "RegionCode"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.RegionCode) -> Bool {
    if self._regionCode != other._regionCode {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.OSType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "OSType"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.OSType) -> Bool {
    if self._ostype != other._ostype {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.ProcessSerialNumber: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ProcessSerialNumber"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.ProcessSerialNumber) -> Bool {
    if self._processSerialNumber != other._processSerialNumber {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.Point: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Point"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Point) -> Bool {
    if self._point != other._point {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.Rect: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Rect"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Rect) -> Bool {
    if self._rect != other._rect {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.FixedPoint: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FixedPoint"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.FixedPoint) -> Bool {
    if self._fixedPoint != other._fixedPoint {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.FixedRect: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "FixedRect"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.FixedRect) -> Bool {
    if self._fixedRect != other._fixedRect {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.Style: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Style"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Style) -> Bool {
    if self._style != other._style {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.StyleParameter: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "StyleParameter"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.StyleParameter) -> Bool {
    if self._styleParameter != other._styleParameter {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.StyleField: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "StyleField"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.StyleField) -> Bool {
    if self._styleField != other._styleField {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.TimeScale: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TimeScale"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.TimeScale) -> Bool {
    if self._timeScale != other._timeScale {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.TimeBase: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TimeBase"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.TimeBase) -> Bool {
    if self._timeBase != other._timeBase {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.TimeRecord: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "TimeRecord"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.TimeRecord) -> Bool {
    if self._timeRecord != other._timeRecord {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.serializedData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "serializedData"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.serializedData) -> Bool {
    if self._serializedData != other._serializedData {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.jsonUTF8Data: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jsonUTF8Data"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.jsonUTF8Data) -> Bool {
    if self._jsonUtf8Data != other._jsonUtf8Data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.jsonString: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "jsonString"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.jsonString) -> Bool {
    if self._jsonString != other._jsonString {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.Extension: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Extension"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.Extension) -> Bool {
    if self._extension_p != other._extension_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_MessageNames.ExtensionsMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Extensions"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_MessageNames.ExtensionsMessage) -> Bool {
    if self._extensions != other._extensions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_EnumNames: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_EnumNames) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_EnumNames.StringEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aString"),
  ]
}

extension SwiftUnittest_Names_EnumNames.ProtocolEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aProtocol"),
  ]
}

extension SwiftUnittest_Names_EnumNames.IntEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aInt"),
  ]
}

extension SwiftUnittest_Names_EnumNames.DoubleEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aDouble"),
  ]
}

extension SwiftUnittest_Names_EnumNames.FloatEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aFloat"),
  ]
}

extension SwiftUnittest_Names_EnumNames.UIntEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aUInt"),
  ]
}

extension SwiftUnittest_Names_EnumNames.hashValueEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ahashValue"),
  ]
}

extension SwiftUnittest_Names_EnumNames.descriptionEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adescription"),
  ]
}

extension SwiftUnittest_Names_EnumNames.debugDescriptionEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adebugDescription"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Swift: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aSwift"),
  ]
}

extension SwiftUnittest_Names_EnumNames.UNRECOGNIZED: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aUNRECOGNIZED"),
  ]
}

extension SwiftUnittest_Names_EnumNames.classEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aclass"),
  ]
}

extension SwiftUnittest_Names_EnumNames.deinitEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adeinit"),
  ]
}

extension SwiftUnittest_Names_EnumNames.enumEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aenum"),
  ]
}

extension SwiftUnittest_Names_EnumNames.extensionEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aextension"),
  ]
}

extension SwiftUnittest_Names_EnumNames.funcEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "afunc"),
  ]
}

extension SwiftUnittest_Names_EnumNames.importEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aimport"),
  ]
}

extension SwiftUnittest_Names_EnumNames.initEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ainit"),
  ]
}

extension SwiftUnittest_Names_EnumNames.inoutEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ainout"),
  ]
}

extension SwiftUnittest_Names_EnumNames.internalEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ainternal"),
  ]
}

extension SwiftUnittest_Names_EnumNames.letEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "alet"),
  ]
}

extension SwiftUnittest_Names_EnumNames.operatorEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aoperator"),
  ]
}

extension SwiftUnittest_Names_EnumNames.privateEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aprivate"),
  ]
}

extension SwiftUnittest_Names_EnumNames.protocolEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aprotocol"),
  ]
}

extension SwiftUnittest_Names_EnumNames.publicEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "apublic"),
  ]
}

extension SwiftUnittest_Names_EnumNames.staticEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "astatic"),
  ]
}

extension SwiftUnittest_Names_EnumNames.structEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "astruct"),
  ]
}

extension SwiftUnittest_Names_EnumNames.subscriptEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "asubscript"),
  ]
}

extension SwiftUnittest_Names_EnumNames.typealiasEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "atypealias"),
  ]
}

extension SwiftUnittest_Names_EnumNames.varEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "avar"),
  ]
}

extension SwiftUnittest_Names_EnumNames.breakEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "abreak"),
  ]
}

extension SwiftUnittest_Names_EnumNames.caseEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "acase"),
  ]
}

extension SwiftUnittest_Names_EnumNames.continueEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "acontinue"),
  ]
}

extension SwiftUnittest_Names_EnumNames.defaultEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adefault"),
  ]
}

extension SwiftUnittest_Names_EnumNames.deferEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adefer"),
  ]
}

extension SwiftUnittest_Names_EnumNames.doEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ado"),
  ]
}

extension SwiftUnittest_Names_EnumNames.elseEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aelse"),
  ]
}

extension SwiftUnittest_Names_EnumNames.fallthroughEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "afallthrough"),
  ]
}

extension SwiftUnittest_Names_EnumNames.forEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "afor"),
  ]
}

extension SwiftUnittest_Names_EnumNames.guardEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aguard"),
  ]
}

extension SwiftUnittest_Names_EnumNames.ifEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aif"),
  ]
}

extension SwiftUnittest_Names_EnumNames.inEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ain"),
  ]
}

extension SwiftUnittest_Names_EnumNames.repeatEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "arepeat"),
  ]
}

extension SwiftUnittest_Names_EnumNames.returnEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "areturn"),
  ]
}

extension SwiftUnittest_Names_EnumNames.switchEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aswitch"),
  ]
}

extension SwiftUnittest_Names_EnumNames.whereEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "awhere"),
  ]
}

extension SwiftUnittest_Names_EnumNames.whileEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "awhile"),
  ]
}

extension SwiftUnittest_Names_EnumNames.asEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aas"),
  ]
}

extension SwiftUnittest_Names_EnumNames.catchEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "acatch"),
  ]
}

extension SwiftUnittest_Names_EnumNames.dynamicTypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adynamicType"),
  ]
}

extension SwiftUnittest_Names_EnumNames.falseEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "afalse"),
  ]
}

extension SwiftUnittest_Names_EnumNames.isEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ais"),
  ]
}

extension SwiftUnittest_Names_EnumNames.nilEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anil"),
  ]
}

extension SwiftUnittest_Names_EnumNames.rethrowsEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "arethrows"),
  ]
}

extension SwiftUnittest_Names_EnumNames.superEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "asuper"),
  ]
}

extension SwiftUnittest_Names_EnumNames.selfEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aself"),
  ]
}

extension SwiftUnittest_Names_EnumNames.throwEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "athrow"),
  ]
}

extension SwiftUnittest_Names_EnumNames.throwsEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "athrows"),
  ]
}

extension SwiftUnittest_Names_EnumNames.trueEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "atrue"),
  ]
}

extension SwiftUnittest_Names_EnumNames.tryEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "atry"),
  ]
}

extension SwiftUnittest_Names_EnumNames.__COLUMN__Enum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "a__COLUMN__"),
  ]
}

extension SwiftUnittest_Names_EnumNames.__FILE__Enum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "a__FILE__"),
  ]
}

extension SwiftUnittest_Names_EnumNames.__FUNCTION__Enum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "a__FUNCTION__"),
  ]
}

extension SwiftUnittest_Names_EnumNames.__LINE__Enum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "a__LINE__"),
  ]
}

extension SwiftUnittest_Names_EnumNames._Enum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "a_"),
  ]
}

extension SwiftUnittest_Names_EnumNames.__Enum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "a__"),
  ]
}

extension SwiftUnittest_Names_EnumNames.associativity: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aassociativity"),
  ]
}

extension SwiftUnittest_Names_EnumNames.convenience: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aconvenience"),
  ]
}

extension SwiftUnittest_Names_EnumNames.dynamic: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adynamic"),
  ]
}

extension SwiftUnittest_Names_EnumNames.didSet: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adidSet"),
  ]
}

extension SwiftUnittest_Names_EnumNames.final: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "afinal"),
  ]
}

extension SwiftUnittest_Names_EnumNames.get: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aget"),
  ]
}

extension SwiftUnittest_Names_EnumNames.infix: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ainfix"),
  ]
}

extension SwiftUnittest_Names_EnumNames.indirect: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aindirect"),
  ]
}

extension SwiftUnittest_Names_EnumNames.lazy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "alazy"),
  ]
}

extension SwiftUnittest_Names_EnumNames.left: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aleft"),
  ]
}

extension SwiftUnittest_Names_EnumNames.mutating: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "amutating"),
  ]
}

extension SwiftUnittest_Names_EnumNames.none: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anone"),
  ]
}

extension SwiftUnittest_Names_EnumNames.nonmutating: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anonmutating"),
  ]
}

extension SwiftUnittest_Names_EnumNames.optional: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aoptional"),
  ]
}

extension SwiftUnittest_Names_EnumNames.override: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aoverride"),
  ]
}

extension SwiftUnittest_Names_EnumNames.postfix: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "apostfix"),
  ]
}

extension SwiftUnittest_Names_EnumNames.precedence: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aprecedence"),
  ]
}

extension SwiftUnittest_Names_EnumNames.prefix: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aprefix"),
  ]
}

extension SwiftUnittest_Names_EnumNames.required: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "arequired"),
  ]
}

extension SwiftUnittest_Names_EnumNames.right: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aright"),
  ]
}

extension SwiftUnittest_Names_EnumNames.set: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aset"),
  ]
}

extension SwiftUnittest_Names_EnumNames.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aType"),
  ]
}

extension SwiftUnittest_Names_EnumNames.unowned: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aunowned"),
  ]
}

extension SwiftUnittest_Names_EnumNames.weak: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aweak"),
  ]
}

extension SwiftUnittest_Names_EnumNames.willSet: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "awillSet"),
  ]
}

extension SwiftUnittest_Names_EnumNames.id: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aid"),
  ]
}

extension SwiftUnittest_Names_EnumNames._cmd: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "a_cmd"),
  ]
}

extension SwiftUnittest_Names_EnumNames.out: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aout"),
  ]
}

extension SwiftUnittest_Names_EnumNames.bycopy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "abycopy"),
  ]
}

extension SwiftUnittest_Names_EnumNames.byref: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "abyref"),
  ]
}

extension SwiftUnittest_Names_EnumNames.oneway: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aoneway"),
  ]
}

extension SwiftUnittest_Names_EnumNames.and: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aand"),
  ]
}

extension SwiftUnittest_Names_EnumNames.and_eq: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aand_eq"),
  ]
}

extension SwiftUnittest_Names_EnumNames.alignas: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aalignas"),
  ]
}

extension SwiftUnittest_Names_EnumNames.alignof: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aalignof"),
  ]
}

extension SwiftUnittest_Names_EnumNames.asm: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aasm"),
  ]
}

extension SwiftUnittest_Names_EnumNames.auto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aauto"),
  ]
}

extension SwiftUnittest_Names_EnumNames.bitand: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "abitand"),
  ]
}

extension SwiftUnittest_Names_EnumNames.bitor: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "abitor"),
  ]
}

extension SwiftUnittest_Names_EnumNames.bool: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "abool"),
  ]
}

extension SwiftUnittest_Names_EnumNames.char: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "achar"),
  ]
}

extension SwiftUnittest_Names_EnumNames.char16_t: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "achar16_t"),
  ]
}

extension SwiftUnittest_Names_EnumNames.char32_t: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "achar32_t"),
  ]
}

extension SwiftUnittest_Names_EnumNames.compl: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "acompl"),
  ]
}

extension SwiftUnittest_Names_EnumNames.const: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aconst"),
  ]
}

extension SwiftUnittest_Names_EnumNames.constexpr: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aconstexpr"),
  ]
}

extension SwiftUnittest_Names_EnumNames.const_cast: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aconst_cast"),
  ]
}

extension SwiftUnittest_Names_EnumNames.decltype: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adecltype"),
  ]
}

extension SwiftUnittest_Names_EnumNames.delete: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adelete"),
  ]
}

extension SwiftUnittest_Names_EnumNames.dynamic_cast: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adynamic_cast"),
  ]
}

extension SwiftUnittest_Names_EnumNames.explicit: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aexplicit"),
  ]
}

extension SwiftUnittest_Names_EnumNames.export: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aexport"),
  ]
}

extension SwiftUnittest_Names_EnumNames.extern: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aextern"),
  ]
}

extension SwiftUnittest_Names_EnumNames.friend: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "afriend"),
  ]
}

extension SwiftUnittest_Names_EnumNames.goto: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "agoto"),
  ]
}

extension SwiftUnittest_Names_EnumNames.inline: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ainline"),
  ]
}

extension SwiftUnittest_Names_EnumNames.long: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "along"),
  ]
}

extension SwiftUnittest_Names_EnumNames.mutable: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "amutable"),
  ]
}

extension SwiftUnittest_Names_EnumNames.namespace: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anamespace"),
  ]
}

extension SwiftUnittest_Names_EnumNames.new: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anew"),
  ]
}

extension SwiftUnittest_Names_EnumNames.noexcept: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anoexcept"),
  ]
}

extension SwiftUnittest_Names_EnumNames.not: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anot"),
  ]
}

extension SwiftUnittest_Names_EnumNames.not_eq: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anot_eq"),
  ]
}

extension SwiftUnittest_Names_EnumNames.nullptr: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "anullptr"),
  ]
}

extension SwiftUnittest_Names_EnumNames.or: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aor"),
  ]
}

extension SwiftUnittest_Names_EnumNames.or_eq: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aor_eq"),
  ]
}

extension SwiftUnittest_Names_EnumNames.protected: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aprotected"),
  ]
}

extension SwiftUnittest_Names_EnumNames.register: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aregister"),
  ]
}

extension SwiftUnittest_Names_EnumNames.reinterpret_cast: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "areinterpret_cast"),
  ]
}

extension SwiftUnittest_Names_EnumNames.short: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ashort"),
  ]
}

extension SwiftUnittest_Names_EnumNames.signed: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "asigned"),
  ]
}

extension SwiftUnittest_Names_EnumNames.sizeof: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "asizeof"),
  ]
}

extension SwiftUnittest_Names_EnumNames.static_assert: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "astatic_assert"),
  ]
}

extension SwiftUnittest_Names_EnumNames.static_cast: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "astatic_cast"),
  ]
}

extension SwiftUnittest_Names_EnumNames.template: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "atemplate"),
  ]
}

extension SwiftUnittest_Names_EnumNames.this: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "athis"),
  ]
}

extension SwiftUnittest_Names_EnumNames.thread_local: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "athread_local"),
  ]
}

extension SwiftUnittest_Names_EnumNames.typedef: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "atypedef"),
  ]
}

extension SwiftUnittest_Names_EnumNames.typeid: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "atypeid"),
  ]
}

extension SwiftUnittest_Names_EnumNames.typename: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "atypename"),
  ]
}

extension SwiftUnittest_Names_EnumNames.union: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aunion"),
  ]
}

extension SwiftUnittest_Names_EnumNames.unsigned: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aunsigned"),
  ]
}

extension SwiftUnittest_Names_EnumNames.using: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ausing"),
  ]
}

extension SwiftUnittest_Names_EnumNames.virtual: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "avirtual"),
  ]
}

extension SwiftUnittest_Names_EnumNames.void: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "avoid"),
  ]
}

extension SwiftUnittest_Names_EnumNames.volatile: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "avolatile"),
  ]
}

extension SwiftUnittest_Names_EnumNames.wchar_t: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "awchar_t"),
  ]
}

extension SwiftUnittest_Names_EnumNames.xor: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "axor"),
  ]
}

extension SwiftUnittest_Names_EnumNames.xor_eq: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "axor_eq"),
  ]
}

extension SwiftUnittest_Names_EnumNames.restrict: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "arestrict"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Category: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aCategory"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Ivar: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aIvar"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Method: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aMethod"),
  ]
}

extension SwiftUnittest_Names_EnumNames.finalize: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "afinalize"),
  ]
}

extension SwiftUnittest_Names_EnumNames.hash: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ahash"),
  ]
}

extension SwiftUnittest_Names_EnumNames.dealloc: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adealloc"),
  ]
}

extension SwiftUnittest_Names_EnumNames.superclass: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "asuperclass"),
  ]
}

extension SwiftUnittest_Names_EnumNames.retain: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aretain"),
  ]
}

extension SwiftUnittest_Names_EnumNames.release: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "arelease"),
  ]
}

extension SwiftUnittest_Names_EnumNames.autorelease: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aautorelease"),
  ]
}

extension SwiftUnittest_Names_EnumNames.retainCount: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aretainCount"),
  ]
}

extension SwiftUnittest_Names_EnumNames.zone: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "azone"),
  ]
}

extension SwiftUnittest_Names_EnumNames.isProxy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aisProxy"),
  ]
}

extension SwiftUnittest_Names_EnumNames.copy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "acopy"),
  ]
}

extension SwiftUnittest_Names_EnumNames.mutableCopy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "amutableCopy"),
  ]
}

extension SwiftUnittest_Names_EnumNames.classForCoder: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aclassForCoder"),
  ]
}

extension SwiftUnittest_Names_EnumNames.clear: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aclear"),
  ]
}

extension SwiftUnittest_Names_EnumNames.data: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adata"),
  ]
}

extension SwiftUnittest_Names_EnumNames.delimitedData: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adelimitedData"),
  ]
}

extension SwiftUnittest_Names_EnumNames.descriptor: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "adescriptor"),
  ]
}

extension SwiftUnittest_Names_EnumNames.extensionRegistry: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aextensionRegistry"),
  ]
}

extension SwiftUnittest_Names_EnumNames.extensionsCurrentlySet: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aextensionsCurrentlySet"),
  ]
}

extension SwiftUnittest_Names_EnumNames.isInitializedEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aisInitialized"),
  ]
}

extension SwiftUnittest_Names_EnumNames.serializedSize: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aserializedSize"),
  ]
}

extension SwiftUnittest_Names_EnumNames.sortedExtensionsInUse: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "asortedExtensionsInUse"),
  ]
}

extension SwiftUnittest_Names_EnumNames.unknownFieldsEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aunknownFields"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Fixed: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aFixed"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Fract: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aFract"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Size: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aSize"),
  ]
}

extension SwiftUnittest_Names_EnumNames.LogicalAddress: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aLogicalAddress"),
  ]
}

extension SwiftUnittest_Names_EnumNames.PhysicalAddress: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aPhysicalAddress"),
  ]
}

extension SwiftUnittest_Names_EnumNames.ByteCount: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aByteCount"),
  ]
}

extension SwiftUnittest_Names_EnumNames.ByteOffset: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aByteOffset"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Duration: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aDuration"),
  ]
}

extension SwiftUnittest_Names_EnumNames.AbsoluteTime: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aAbsoluteTime"),
  ]
}

extension SwiftUnittest_Names_EnumNames.OptionBits: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aOptionBits"),
  ]
}

extension SwiftUnittest_Names_EnumNames.ItemCount: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aItemCount"),
  ]
}

extension SwiftUnittest_Names_EnumNames.PBVersion: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aPBVersion"),
  ]
}

extension SwiftUnittest_Names_EnumNames.ScriptCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aScriptCode"),
  ]
}

extension SwiftUnittest_Names_EnumNames.LangCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aLangCode"),
  ]
}

extension SwiftUnittest_Names_EnumNames.RegionCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aRegionCode"),
  ]
}

extension SwiftUnittest_Names_EnumNames.OSType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aOSType"),
  ]
}

extension SwiftUnittest_Names_EnumNames.ProcessSerialNumber: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aProcessSerialNumber"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Point: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aPoint"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Rect: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aRect"),
  ]
}

extension SwiftUnittest_Names_EnumNames.FixedPoint: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aFixedPoint"),
  ]
}

extension SwiftUnittest_Names_EnumNames.FixedRect: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aFixedRect"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Style: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aStyle"),
  ]
}

extension SwiftUnittest_Names_EnumNames.StyleParameter: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aStyleParameter"),
  ]
}

extension SwiftUnittest_Names_EnumNames.StyleField: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aStyleField"),
  ]
}

extension SwiftUnittest_Names_EnumNames.TimeScale: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aTimeScale"),
  ]
}

extension SwiftUnittest_Names_EnumNames.TimeBase: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aTimeBase"),
  ]
}

extension SwiftUnittest_Names_EnumNames.TimeRecord: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aTimeRecord"),
  ]
}

extension SwiftUnittest_Names_EnumNames.Extension: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aExtension"),
  ]
}

extension SwiftUnittest_Names_EnumNames.ExtensionsEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "aExtensions"),
  ]
}

extension SwiftUnittest_Names_FieldNamingInitials: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_FieldNamingInitials) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_FieldNamingInitials.Lowers: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "http"),
    2: .standard(proto: "http_request"),
    3: .standard(proto: "the_http_request"),
    4: .standard(proto: "the_http"),
    11: .same(proto: "https"),
    12: .standard(proto: "https_request"),
    13: .standard(proto: "the_https_request"),
    14: .standard(proto: "the_https"),
    21: .same(proto: "url"),
    22: .standard(proto: "url_value"),
    23: .standard(proto: "the_url_value"),
    24: .standard(proto: "the_url"),
    31: .standard(proto: "a_b_c"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_FieldNamingInitials.Lowers) -> Bool {
    if self._http != other._http {return false}
    if self._httpRequest != other._httpRequest {return false}
    if self._theHTTPRequest != other._theHTTPRequest {return false}
    if self._theHTTP != other._theHTTP {return false}
    if self._https != other._https {return false}
    if self._httpsRequest != other._httpsRequest {return false}
    if self._theHTTPSRequest != other._theHTTPSRequest {return false}
    if self._theHTTPS != other._theHTTPS {return false}
    if self._url != other._url {return false}
    if self._urlValue != other._urlValue {return false}
    if self._theURLValue != other._theURLValue {return false}
    if self._theURL != other._theURL {return false}
    if self._aBC != other._aBC {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_FieldNamingInitials.Uppers: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "HTTP"),
    2: .standard(proto: "HTTP_request"),
    3: .standard(proto: "the_HTTP_request"),
    4: .standard(proto: "the_HTTP"),
    11: .same(proto: "HTTPS"),
    12: .standard(proto: "HTTPS_request"),
    13: .standard(proto: "the_HTTPS_request"),
    14: .standard(proto: "the_HTTPS"),
    21: .same(proto: "URL"),
    22: .standard(proto: "URL_value"),
    23: .standard(proto: "the_URL_value"),
    24: .standard(proto: "the_URL"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_FieldNamingInitials.Uppers) -> Bool {
    if self._http != other._http {return false}
    if self._httpRequest != other._httpRequest {return false}
    if self._theHTTPRequest != other._theHTTPRequest {return false}
    if self._theHTTP != other._theHTTP {return false}
    if self._https != other._https {return false}
    if self._httpsRequest != other._httpsRequest {return false}
    if self._theHTTPSRequest != other._theHTTPSRequest {return false}
    if self._theHTTPS != other._theHTTPS {return false}
    if self._url != other._url {return false}
    if self._urlValue != other._urlValue {return false}
    if self._theURLValue != other._theURLValue {return false}
    if self._theURL != other._theURL {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_FieldNamingInitials.WordCase: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Http"),
    2: .same(proto: "HttpRequest"),
    3: .same(proto: "TheHttpRequest"),
    4: .same(proto: "TheHttp"),
    11: .same(proto: "Https"),
    12: .same(proto: "HttpsRequest"),
    13: .same(proto: "TheHttpsRequest"),
    14: .same(proto: "TheHttps"),
    21: .same(proto: "Url"),
    22: .same(proto: "UrlValue"),
    23: .same(proto: "TheUrlValue"),
    24: .same(proto: "TheUrl"),
  ]

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_FieldNamingInitials.WordCase) -> Bool {
    if self._http != other._http {return false}
    if self._httpRequest != other._httpRequest {return false}
    if self._theHTTPRequest != other._theHTTPRequest {return false}
    if self._theHTTP != other._theHTTP {return false}
    if self._https != other._https {return false}
    if self._httpsRequest != other._httpsRequest {return false}
    if self._theHTTPSRequest != other._theHTTPSRequest {return false}
    if self._theHTTPS != other._theHTTPS {return false}
    if self._url != other._url {return false}
    if self._urlValue != other._urlValue {return false}
    if self._theURLValue != other._theURLValue {return false}
    if self._theURL != other._theURL {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitials: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_ExtensionNamingInitials) -> Bool {
    if unknownFields != other.unknownFields {return false}
    if _protobuf_extensionFieldValues != other._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension SwiftUnittest_Names_Lowers: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_Lowers) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_Uppers: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_Uppers) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_WordCase: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_WordCase) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsLowers: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_ExtensionNamingInitialsLowers) -> Bool {
    if unknownFields != other.unknownFields {return false}
    if _protobuf_extensionFieldValues != other._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsUppers: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_ExtensionNamingInitialsUppers) -> Bool {
    if unknownFields != other.unknownFields {return false}
    if _protobuf_extensionFieldValues != other._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension SwiftUnittest_Names_ExtensionNamingInitialsWordCase: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: SwiftUnittest_Names_ExtensionNamingInitialsWordCase) -> Bool {
    if unknownFields != other.unknownFields {return false}
    if _protobuf_extensionFieldValues != other._protobuf_extensionFieldValues {return false}
    return true
  }
}
