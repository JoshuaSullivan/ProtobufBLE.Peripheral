// See Makefile for the logic that generates this
// Protoc errors imply this file is being generated incorrectly
// Swift compile errors are probably bugs in protoc-gen-swift
syntax = "proto3";
package protobuf_unittest;
enum GeneratedSwiftReservedEnum {
  NONE = 0;
  a = 1;
  adjusted = 2;
  any = 3;
  AnyExtensionField = 4;
  AnyMessageStorage = 5;
  Api = 6;
  appended = 7;
  appendUIntHex = 8;
  appendUnknown = 9;
  apple = 10;
  are = 11;
  areAllInitialized = 12;
  arrayLiteral = 13;
  arraySeparator = 14;
  as = 15;
  asciiOpenCurlyBracket = 16;
  asciiZero = 17;
  asJSONObject = 18;
  available = 19;
  b = 20;
  base64String = 21;
  BaseType = 22;
  because = 23;
  binary = 24;
  BinaryDecoder = 25;
  BinaryEncoder = 26;
  BinaryEncodingSizeVisitor = 27;
  BinaryEncodingVisitor = 28;
  bits = 29;
  body = 30;
  bodySize = 31;
  Bool = 32;
  booleanLiteral = 33;
  BooleanLiteralType = 34;
  boolValue = 35;
  buffer = 36;
  buildTypeURL = 37;
  by = 38;
  bytes = 39;
  BytesValue = 40;
  c = 41;
  capitalizeNext = 42;
  cardinality = 43;
  Character = 44;
  characters = 45;
  chars = 46;
  clearExtensionValue = 47;
  clearSourceContext = 48;
  clearValue = 49;
  com = 50;
  consume = 51;
  contentJSON = 52;
  contentsOf = 53;
  count = 54;
  customCodable = 55;
  d = 56;
  Data = 57;
  dataResult = 58;
  dataSize = 59;
  date = 60;
  daySec = 61;
  daysSinceEpoch = 62;
  DD = 63;
  debugDescription = 64;
  decodeBytes = 65;
  decoded = 66;
  decodedFromJSONNull = 67;
  decodeExtensionField = 68;
  decodeJSON = 69;
  decodeMapField = 70;
  decodeMessage = 71;
  decoder = 72;
  decodeRepeated = 73;
  decodeRepeatedBoolField = 74;
  decodeRepeatedBytesField = 75;
  decodeRepeatedDoubleField = 76;
  decodeRepeatedEnumField = 77;
  decodeRepeatedFixed32Field = 78;
  decodeRepeatedFixed64Field = 79;
  decodeRepeatedFloatField = 80;
  decodeRepeatedGroupField = 81;
  decodeRepeatedInt32Field = 82;
  decodeRepeatedInt64Field = 83;
  decodeRepeatedMessageField = 84;
  decodeRepeatedSFixed32Field = 85;
  decodeRepeatedSFixed64Field = 86;
  decodeRepeatedSInt32Field = 87;
  decodeRepeatedSInt64Field = 88;
  decodeRepeatedStringField = 89;
  decodeRepeatedUInt32Field = 90;
  decodeRepeatedUInt64Field = 91;
  decodeSingular = 92;
  decodeSingularBoolField = 93;
  decodeSingularBytesField = 94;
  decodeSingularDoubleField = 95;
  decodeSingularEnumField = 96;
  decodeSingularFixed32Field = 97;
  decodeSingularFixed64Field = 98;
  decodeSingularFloatField = 99;
  decodeSingularGroupField = 100;
  decodeSingularInt32Field = 101;
  decodeSingularInt64Field = 102;
  decodeSingularMessageField = 103;
  decodeSingularSFixed32Field = 104;
  decodeSingularSFixed64Field = 105;
  decodeSingularSInt32Field = 106;
  decodeSingularSInt64Field = 107;
  decodeSingularStringField = 108;
  decodeSingularUInt32Field = 109;
  decodeSingularUInt64Field = 110;
  decodeString = 111;
  decodeTextFormat = 112;
  defaultValue = 113;
  description = 114;
  destination = 115;
  Dictionary = 116;
  dictionaryLiteral = 117;
  digit0 = 118;
  digit1 = 119;
  digitCount = 120;
  digits = 121;
  digitValue = 122;
  discardableResult = 123;
  DispatchQueue = 124;
  div = 125;
  double = 126;
  doubleToUtf8 = 127;
  DoubleValue = 128;
  Duration = 129;
  E = 130;
  Element = 131;
  elements = 132;
  emitExtensionFieldName = 133;
  emitFieldName = 134;
  emitFieldNumber = 135;
  emitVerboseTextForm = 136;
  Empty = 137;
  emptyData = 138;
  encoded = 139;
  encodedJSONString = 140;
  encodedSize = 141;
  encodeField = 142;
  encoder = 143;
  end = 144;
  endArray = 145;
  endMessageField = 146;
  endObject = 147;
  endRegularField = 148;
  Enum = 149;
  enumvalue = 150;
  Equatable = 151;
  ext = 152;
  extendedGraphemeClusterLiteral = 153;
  ExtendedGraphemeClusterLiteralType = 154;
  ExtensionFieldValueSet = 155;
  ExtensionMap = 156;
  extensions = 157;
  extras = 158;
  f = 159;
  false = 160;
  field = 161;
  FieldMask = 162;
  fieldName = 163;
  fieldNameCount = 164;
  fieldNumber = 165;
  fieldNumberForProto = 166;
  fields = 167;
  fieldSize = 168;
  FieldTag = 169;
  fieldType = 170;
  fieldValue = 171;
  fileName = 172;
  fileprivate = 173;
  firstItem = 174;
  flatMap = 175;
  float = 176;
  floatLiteral = 177;
  FloatLiteralType = 178;
  floatToUtf8 = 179;
  FloatValue = 180;
  for = 181;
  formatDuration = 182;
  formatTimestamp = 183;
  forMessage = 184;
  forMessageName = 185;
  forReadingFrom = 186;
  forTypeURL = 187;
  forWritingInto = 188;
  from = 189;
  fromAscii2 = 190;
  fromAscii4 = 191;
  fromHexDigit = 192;
  fromMessage = 193;
  fromURL = 194;
  func = 195;
  Functions = 196;
  G = 197;
  generated = 198;
  get = 199;
  getExtensionValue = 200;
  Google_Protobuf_Any = 201;
  Google_Protobuf_Api = 202;
  Google_Protobuf_BoolValue = 203;
  Google_Protobuf_BytesValue = 204;
  Google_Protobuf_DoubleValue = 205;
  Google_Protobuf_Duration = 206;
  Google_Protobuf_Empty = 207;
  Google_Protobuf_Enum = 208;
  Google_Protobuf_EnumValue = 209;
  Google_Protobuf_Field = 210;
  Google_Protobuf_FieldMask = 211;
  Google_Protobuf_FloatValue = 212;
  Google_Protobuf_Int32Value = 213;
  Google_Protobuf_Int64Value = 214;
  Google_Protobuf_ListValue = 215;
  Google_Protobuf_Method = 216;
  Google_Protobuf_Mixin = 217;
  Google_Protobuf_NullValue = 218;
  Google_Protobuf_Option = 219;
  Google_Protobuf_SourceContext = 220;
  Google_Protobuf_StringValue = 221;
  Google_Protobuf_Struct = 222;
  Google_Protobuf_Syntax = 223;
  Google_Protobuf_Timestamp = 224;
  Google_Protobuf_Type = 225;
  Google_Protobuf_UInt32Value = 226;
  Google_Protobuf_UInt64Value = 227;
  Google_Protobuf_Value = 228;
  gregorianDateFromSecondsSince1970 = 229;
  group = 230;
  h = 231;
  handleConflictingOneOf = 232;
  has = 233;
  hasExtensionValue = 234;
  hash = 235;
  Hashable = 236;
  hashValue = 237;
  HashVisitor = 238;
  hasSourceContext = 239;
  hasValue = 240;
  hh = 241;
  hour = 242;
  i = 243;
  index = 244;
  init = 245;
  inout = 246;
  insert = 247;
  insertIntoSet = 248;
  Int = 249;
  Int32 = 250;
  Int32Value = 251;
  Int64 = 252;
  Int64Value = 253;
  Int8 = 254;
  integerLiteral = 255;
  IntegerLiteralType = 256;
  intern = 257;
  Internal = 258;
  InternalState = 259;
  isA = 260;
  isEqual = 261;
  isEqualTo = 262;
  isInitialized = 263;
  it = 264;
  i_2166136261 = 265;
  json = 266;
  JSONDecoder = 267;
  jsonEncoder = 268;
  JSONEncodingVisitor = 269;
  JSONMapEncodingVisitor = 270;
  jsonName = 271;
  jsonPath = 272;
  jsonPaths = 273;
  JSONScanner = 274;
  jsonString = 275;
  jsonText = 276;
  JSONToProto = 277;
  jsonUTF8Data = 278;
  julianDayNumberFromSecondsSince1970 = 279;
  k = 280;
  Key = 281;
  keyField = 282;
  KeyType = 283;
  kind = 284;
  knownTypes = 285;
  l = 286;
  label = 287;
  length = 288;
  let = 289;
  lhs = 290;
  listOfMessages = 291;
  listValue = 292;
  littleEndian = 293;
  littleEndianBytes = 294;
  M = 295;
  major = 296;
  makeIterator = 297;
  mapHash = 298;
  MapKeyType = 299;
  mapNameResolver = 300;
  mapToMessages = 301;
  MapValueType = 302;
  mapVisitor = 303;
  mdayStart = 304;
  members = 305;
  merge = 306;
  message = 307;
  MessageExtension = 308;
  MessageExtensionBase = 309;
  messageType = 310;
  Method = 311;
  methods = 312;
  minor = 313;
  Mixin = 314;
  mixins = 315;
  mm = 316;
  mod = 317;
  month = 318;
  mutating = 319;
  n = 320;
  name = 321;
  NameDescription = 322;
  NameMap = 323;
  nameResolver = 324;
  names = 325;
  nanos = 326;
  nativeBytes = 327;
  nativeEndianBytes = 328;
  newL = 329;
  newValue = 330;
  nextFieldNumber = 331;
  nil = 332;
  nilLiteral = 333;
  no = 334;
  normalizeForDuration = 335;
  normalizeForTimestamp = 336;
  nullValue = 337;
  number = 338;
  numberValue = 339;
  of = 340;
  oneofIndex = 341;
  oneofs = 342;
  OneOf_Kind = 343;
  only = 344;
  Option = 345;
  OptionalEnumExtensionField = 346;
  OptionalExtensionField = 347;
  OptionalGroupExtensionField = 348;
  OptionalMessageExtensionField = 349;
  options = 350;
  other = 351;
  out = 352;
  output = 353;
  p = 354;
  packed = 355;
  PackedEnumExtensionField = 356;
  PackedExtensionField = 357;
  packedSize = 358;
  parseBareFloatString = 359;
  parseBareSInt = 360;
  parseBareUInt = 361;
  parseDuration = 362;
  parseJSONFieldNames = 363;
  parseTimestamp = 364;
  partial = 365;
  path = 366;
  paths = 367;
  pointer = 368;
  pos = 369;
  prefix = 370;
  preTraverse = 371;
  private = 372;
  proto = 373;
  proto2 = 374;
  proto3DefaultValue = 375;
  ProtobufBool = 376;
  ProtobufBytes = 377;
  ProtobufDouble = 378;
  ProtobufEnumMap = 379;
  protobufExtension = 380;
  ProtobufFloat = 381;
  ProtobufInt32 = 382;
  ProtobufInt64 = 383;
  ProtobufMap = 384;
  ProtobufMessageMap = 385;
  ProtobufString = 386;
  ProtobufUInt32 = 387;
  ProtobufUInt64 = 388;
  protobuf_extensionFieldValues = 389;
  protobuf_fieldNumber = 390;
  protobuf_generated_isEqualTo = 391;
  protobuf_nameMap = 392;
  protobuf_newField = 393;
  protobuf_package = 394;
  protobuf_set = 395;
  protoFieldName = 396;
  protoMessageName = 397;
  protoPaths = 398;
  ProtoToJSON = 399;
  public = 400;
  putBoolValue = 401;
  putBytesValue = 402;
  putDoubleValue = 403;
  putEnumValue = 404;
  putFixedUInt32 = 405;
  putFixedUInt64 = 406;
  putFloatValue = 407;
  putInt64 = 408;
  putStringValue = 409;
  putUInt64 = 410;
  putUInt64Hex = 411;
  putVarInt = 412;
  putZigZagVarInt = 413;
  RawValue = 414;
  register = 415;
  RepeatedEnumExtensionField = 416;
  RepeatedExtensionField = 417;
  RepeatedGroupExtensionField = 418;
  RepeatedMessageExtensionField = 419;
  requestStreaming = 420;
  requestTypeURL = 421;
  requiredSize = 422;
  responseStreaming = 423;
  responseTypeURL = 424;
  result = 425;
  return = 426;
  revision = 427;
  rhs = 428;
  root = 429;
  s = 430;
  savedPosition = 431;
  sawBackslash = 432;
  scanner = 433;
  seconds = 434;
  self = 435;
  separator = 436;
  serializeAnyJSON = 437;
  serializedData = 438;
  serializedSize = 439;
  serialQueue = 440;
  set = 441;
  setExtensionValue = 442;
  shift = 443;
  SignedInteger = 444;
  SimpleExtensionMap = 445;
  sizer = 446;
  slowUtf8ToString = 447;
  source = 448;
  sourceContext = 449;
  split = 450;
  ss = 451;
  start = 452;
  startArray = 453;
  startField = 454;
  startIndex = 455;
  startMessageField = 456;
  startObject = 457;
  startRegularField = 458;
  state = 459;
  static = 460;
  StaticString = 461;
  storage = 462;
  StorageClass = 463;
  String = 464;
  stringLiteral = 465;
  StringLiteralType = 466;
  stringResult = 467;
  stringValue = 468;
  Struct = 469;
  structValue = 470;
  subDecoder = 471;
  subscript = 472;
  swift = 473;
  SwiftProtobuf = 474;
  syntax = 475;
  T = 476;
  tag = 477;
  target = 478;
  terminator = 479;
  testDecoder = 480;
  text = 481;
  textDecoder = 482;
  TextFormatDecoder = 483;
  TextFormatEncoder = 484;
  TextFormatEncodingVisitor = 485;
  TextFormatScanner = 486;
  textFormatString = 487;
  that = 488;
  they = 489;
  throws = 490;
  timeInterval = 491;
  timeIntervalSince1970 = 492;
  timeIntervalSinceReferenceDate = 493;
  timeOfDayFromSecondsSince1970 = 494;
  Timestamp = 495;
  toJsonFieldName = 496;
  total = 497;
  traverse = 498;
  true = 499;
  try = 500;
  Type = 501;
  typealias = 502;
  typeName = 503;
  typePrefix = 504;
  typeRegistry = 505;
  typeStart = 506;
  typeUnknown = 507;
  typeURL = 508;
  UInt32 = 509;
  UInt32Value = 510;
  UInt64 = 511;
  UInt64Value = 512;
  UInt8 = 513;
  UnicodeScalar = 514;
  unicodeScalarLiteral = 515;
  UnicodeScalarLiteralType = 516;
  unicodeScalars = 517;
  UnicodeScalarView = 518;
  union = 519;
  uniqueStorage = 520;
  unknown = 521;
  unknownData = 522;
  unknownFields = 523;
  UnknownStorage = 524;
  unpack = 525;
  unpackTo = 526;
  UnsafeBufferPointer = 527;
  UnsafeMutablePointer = 528;
  UnsafeMutableRawBufferPointer = 529;
  UnsafePointer = 530;
  url = 531;
  used = 532;
  utf8 = 533;
  utf8Buffer = 534;
  utf8Codec = 535;
  utf8ToDouble = 536;
  utf8ToString = 537;
  UTF8View = 538;
  v = 539;
  value = 540;
  valueField = 541;
  values = 542;
  ValueType = 543;
  var = 544;
  version = 545;
  versionString = 546;
  visitExtensionFields = 547;
  visitMapField = 548;
  visitor = 549;
  visitPacked = 550;
  visitPackedBoolField = 551;
  visitPackedDoubleField = 552;
  visitPackedEnumField = 553;
  visitPackedFixed32Field = 554;
  visitPackedFixed64Field = 555;
  visitPackedFloatField = 556;
  visitPackedInt32Field = 557;
  visitPackedInt64Field = 558;
  visitPackedSFixed32Field = 559;
  visitPackedSFixed64Field = 560;
  visitPackedSInt32Field = 561;
  visitPackedSInt64Field = 562;
  visitPackedUInt32Field = 563;
  visitPackedUInt64Field = 564;
  visitRepeated = 565;
  visitRepeatedBoolField = 566;
  visitRepeatedBytesField = 567;
  visitRepeatedDoubleField = 568;
  visitRepeatedEnumField = 569;
  visitRepeatedFixed32Field = 570;
  visitRepeatedFixed64Field = 571;
  visitRepeatedFloatField = 572;
  visitRepeatedGroupField = 573;
  visitRepeatedInt32Field = 574;
  visitRepeatedInt64Field = 575;
  visitRepeatedMessageField = 576;
  visitRepeatedSFixed32Field = 577;
  visitRepeatedSFixed64Field = 578;
  visitRepeatedSInt32Field = 579;
  visitRepeatedSInt64Field = 580;
  visitRepeatedStringField = 581;
  visitRepeatedUInt32Field = 582;
  visitRepeatedUInt64Field = 583;
  visitSingular = 584;
  visitSingularBoolField = 585;
  visitSingularBytesField = 586;
  visitSingularDoubleField = 587;
  visitSingularEnumField = 588;
  visitSingularFixed32Field = 589;
  visitSingularFixed64Field = 590;
  visitSingularFloatField = 591;
  visitSingularGroupField = 592;
  visitSingularInt32Field = 593;
  visitSingularInt64Field = 594;
  visitSingularMessageField = 595;
  visitSingularSFixed32Field = 596;
  visitSingularSFixed64Field = 597;
  visitSingularSInt32Field = 598;
  visitSingularSInt64Field = 599;
  visitSingularStringField = 600;
  visitSingularUInt32Field = 601;
  visitSingularUInt64Field = 602;
  visitUnknown = 603;
  where = 604;
  wireFormat = 605;
  with = 606;
  WrappedType = 607;
  wrapped_vsnprintf = 608;
  yday = 609;
  YY = 610;
}
